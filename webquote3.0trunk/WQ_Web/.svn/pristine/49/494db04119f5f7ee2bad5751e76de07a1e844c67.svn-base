package com.avnet.emasia.webquote.web.pricerupload;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.FormulaEvaluator;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;

import com.avnet.emasia.webquote.commodity.bean.PricerUploadTemplateBean;
import com.avnet.emasia.webquote.commodity.constant.PRICER_TYPE;
import com.avnet.emasia.webquote.commodity.constant.PricerConstant;
import com.avnet.emasia.webquote.commodity.constant.UPLOAD_ACTION;
import com.avnet.emasia.webquote.commodity.util.PricerUtils;
import com.avnet.emasia.webquote.entity.User;
import com.avnet.emasia.webquote.utilites.resources.ResourceMB;
import com.avnet.emasia.webquote.utilites.web.util.POIUtils;
import com.avnet.emasia.webquote.utilites.web.util.PricerUploadHelper;
import com.avnet.emasia.webquote.utilities.bean.ExcelAliasBean;
import com.avnet.emasia.webquote.utilities.util.QuoteUtil;
import com.avnet.emasia.webquote.web.maintenance.UploadStrategy;

public class PriceUploadStrategy extends UploadStrategy{

	private static final long serialVersionUID = -43475458881197935L;

	@Override
	public List excel2Beans(Sheet sheet) {
		List<PricerUploadTemplateBean> beans = new ArrayList<PricerUploadTemplateBean>();
		FormulaEvaluator evaluator = sheet.getWorkbook().getCreationHelper().createFormulaEvaluator();
		User user = getUser();

		Cell cell;
		int lineSeq = 0;
		List<ExcelAliasBean> excelAliasTreeSet = PricerUploadHelper.getPricerExcelAliasAnnotation();

		Row row = null;
		int lastRownum = sheet.getLastRowNum();

		for(int i=0;i<=lastRownum;i++){
			// skip 5 row
			if (lineSeq < PricerConstant.PRICER_TEMPLATE_HEADER_ROW_NUMBER) {
				lineSeq++;
				continue;
			}
			row = sheet.getRow(i);
			if(row==null){
				continue;
			}
			PricerUploadTemplateBean bean = new PricerUploadTemplateBean();
			bean.setLineSeq(++lineSeq);
			for(ExcelAliasBean excelAliasBean:excelAliasTreeSet){
				cell = row.getCell(excelAliasBean.getCellNum()-1); 
				if(cell!=null){
					POIUtils.setter(bean,excelAliasBean.getFieldName(),POIUtils.getCellValueWithFormatter(cell,evaluator),String.class);
				}			
			}
		
			bean.setBizUnit(user.getDefaultBizUnit());
			beans.add(bean);
		}
		sheet = null;
		return beans;
	}
	
	/**
	 *  add/update verify
	 */
	@Override
	public String verifyFields(List<?> beans) {

		StringBuffer validateMsg = new StringBuffer();

		PricerUploadTemplateBean bean = null;
		HashMap<String, List<PricerUploadTemplateBean>> hash = PricerUtils.getSortPricerUploadTemplateBean((List<PricerUploadTemplateBean>)beans);
		
		for (int i=0;i<beans.size();i++) {
			bean = (PricerUploadTemplateBean) beans.get(i);
			if(PricerUtils.isAllowAppend(validateMsg.length())){
				/**validate action and pricerType for all rows*/
				validateMsg.append(PricerUploadHelper.validateActionAndPricerType(bean));
			}else{
				break;
			}
			if(PricerUtils.isAllowAppend(validateMsg.length())){
				/**validate mandatory for all fields*/
				validateMsg.append(PricerUploadHelper.validateMandatoryFields(bean));
			}else{
				break;
			}
			
			if(PricerUtils.isAllowAppend(validateMsg.length())){
				/**for fix defect 377 to MOQ or MOV are empty, error message shall be shown*/
				validateMsg.append(PricerUploadHelper.validateMOQAndMOV(bean));
			}else{
				break;
			}
			
			/*if(PricerUtils.isAllowAppend(validateMsg.length())){
				*//**validate duplicate *//*
				List<PricerUploadTemplateBean> list = hash.get(bean.getMfr()+" " +bean.getFullMfrPart());
				
				validateMsg.append(PricerUploadHelper.validateDuplicate(bean,i, list));
			}else{
				break;
			}*/
			
			if(PricerUtils.isAllowAppend(validateMsg.length())){
				/**validate field type for some fields*/
				validateMsg.append(PricerUploadHelper.validateFieldType(bean));
			}else{
				break;
			}
			
			if(PricerUtils.isAllowAppend(validateMsg.length())){
				/**validate length for some fields */
				validateMsg.append(PricerUploadHelper.validateLengthOfFields(bean));
			}else{
				break;
			}
			if(PricerUtils.isAllowAppend(validateMsg.length())){
				/**validate length for some fields */
				validateMsg.append(PricerUploadHelper.validateValidity(bean));
			}else{
				break;
			}
			if(PricerUtils.isAllowAppend(validateMsg.length())){
				/**validate boolean for some fields */
				validateMsg.append(PricerUploadHelper.validateBoolean(bean));
			}else{
				break;
			}
			if(PricerUtils.isAllowAppend(validateMsg.length())){
				/**validate value for some fields */
				validateMsg.append(PricerUploadHelper.validateValue(bean));
			}else{
				break;
			}
			
			if(PricerUtils.isAllowAppend(validateMsg.length())){
				/**validate  A-Book Cost   */
				validateMsg.append(PricerUploadHelper.validateABookCost(bean));
			}else{
				break;
			}
			//check for program type, the maximum length is 20   by damon@20170113 
			if(PricerUtils.isAllowAppend(validateMsg.length())){
				/**validate  A-Book Cost   */
				validateMsg.append(PricerUploadHelper.validateProgramType(bean));
			}else{
				break;
			}
		}	
		return validateMsg.toString();
	}	
	
	public String verifyFieldsForRemove(List<?> beans){
		StringBuffer validateMsg = new StringBuffer();
		PricerUploadTemplateBean bean = null;
		
		for (int i=0;i<beans.size();i++) {
			bean = (PricerUploadTemplateBean) beans.get(i);

			if(PricerUtils.isAllowAppend(validateMsg.length())){
				validateMsg.append(PricerUploadHelper.validateMandatoryFieldsForRemove(bean));
			}

			if(PricerUtils.isAllowAppend(validateMsg.length())){
				validateMsg.append(PricerUploadHelper.validateDuplicate(bean,i, beans));
			}
			if(PricerUtils.isAllowAppend(validateMsg.length())){
				validateMsg.append(PricerUploadHelper.validateRemoveABookCost(bean));
			}
		}
		return validateMsg.toString();
	}
	
	public String verifyFieldsForRemoveAllPricer(List<?> beans){
		StringBuffer validateMsg = new StringBuffer();
		PricerUploadTemplateBean bean = null;
		
		for (int i=0;i<beans.size();i++) {
			bean = (PricerUploadTemplateBean) beans.get(i);

			if(PricerUtils.isAllowAppend(validateMsg.length())){
				validateMsg.append(PricerUploadHelper.validateMandatoryFieldsForRemoveAllPricer(bean));
			}

			if(PricerUtils.isAllowAppend(validateMsg.length())){
				validateMsg.append(PricerUploadHelper.validateDuplicate(bean,i, beans));
			}
		}
		return validateMsg.toString();
	}
	
	public String verifyPricerType(List<PricerUploadTemplateBean> beans){
		StringBuffer sb = new StringBuffer();
		PricerUploadTemplateBean bean = null;
		
		for (int i=0;i<beans.size();i++) {
			bean = beans.get(i);

			if(PricerUtils.isAllowAppend(sb.length())){
				if(QuoteUtil.isEmpty(bean.getPricerType())){  
					sb.append(ResourceMB.getText("wq.message.row")+" ["+bean.getLineSeq()+"] :"+ResourceMB.getText("wq.error.mandatoryPricerField") +", <br/>");
				}
			}else{ 
				return sb.toString();
			}

			
		}
		return sb.toString();
	}
	
	public Boolean validateUiqueActionOrPricerType(String currentAction,String currentPricerType,List<?> beans){
		PricerUploadTemplateBean bean = null;

		for (int i=1;i<beans.size();i++) {//Starting from the second row,currentAction and currentPricerType From the first row of data
			bean = (PricerUploadTemplateBean) beans.get(i);

			if(bean.getAction()!=null&&!bean.getAction().equals(currentAction)){
				return false;
			}

			if(bean.getPricerType()!=null&&!bean.getPricerType().equalsIgnoreCase(currentPricerType)) {
				return false;
			}
		}
		return true;
	}
	
	/**
	 * Display error message: Remove (Pricer Only) cannot be applied to Part Master type file.
	 * @param action
	 * @param pricerType
	 * @return
	 */
	public Boolean verifyRemoveForPartMaster(String action,String pricerType){
		if(PRICER_TYPE.PARTMASTER.getName().equalsIgnoreCase(pricerType)&&UPLOAD_ACTION.REMOVE_PRICER_ONLY.getName().equalsIgnoreCase(action)){
			return false;
		}
		return true;
	}
	
	public Boolean verifyRemoveAllPricer(String action,String pricerType){
		
		if(action.equalsIgnoreCase(UPLOAD_ACTION.REMOVE_ALL_PRICER.getName()) && ! pricerType.equalsIgnoreCase(PRICER_TYPE.ALLPRICER.getName())){
			return false;
		}

		if(! action.equalsIgnoreCase(UPLOAD_ACTION.REMOVE_ALL_PRICER.getName()) && pricerType.equalsIgnoreCase(PRICER_TYPE.ALLPRICER.getName())){
			return false;
		}
		
		return true;
		
	}
	
	public Boolean verifyAction(String action ){
		if(QuoteUtil.isEmpty(action)){
			return false;
		}
		return true;
	}
}
