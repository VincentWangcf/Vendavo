package com.avnet.emasia.webquote.web.pricerupload;

import java.io.Serializable;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Queue;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ManagedProperty;
import javax.faces.bean.SessionScoped;
import javax.faces.context.FacesContext;
import javax.faces.model.SelectItem;
import javax.jms.JMSException;
import javax.naming.InitialContext;
import javax.naming.NamingException;

import org.eclipse.jetty.util.log.Log;
import org.primefaces.component.datatable.DataTable;
import org.primefaces.context.RequestContext;
import org.primefaces.event.SelectEvent;
import org.primefaces.event.ToggleSelectEvent;
import org.primefaces.event.UnselectEvent;
import org.primefaces.model.StreamedContent;

import com.avnet.emasia.webquote.commodity.bean.PricerUploadTemplateBean;
import com.avnet.emasia.webquote.commodity.constant.PRICER_TYPE;
import com.avnet.emasia.webquote.commodity.constant.PricerConstant;
import com.avnet.emasia.webquote.commodity.ejb.ContractPriceUploadSB;
//import com.avnet.emasia.webquote.commodity.ejb.PricerEnquiryLazySB;
import com.avnet.emasia.webquote.commodity.ejb.PricerEnquirySB;
import com.avnet.emasia.webquote.commodity.ejb.PricerUploadVerifySB;
import com.avnet.emasia.webquote.commodity.util.PricerUtils;
import com.avnet.emasia.webquote.entity.Manufacturer;
import com.avnet.emasia.webquote.entity.User;
import com.avnet.emasia.webquote.quote.ejb.ManufacturerSB;
import com.avnet.emasia.webquote.quote.ejb.SystemCodeMaintenanceSB;
import com.avnet.emasia.webquote.user.ejb.UserSB;
import com.avnet.emasia.webquote.utilites.resources.ResourceMB;
import com.avnet.emasia.webquote.utilites.web.util.PricerUploadHelper;
import com.avnet.emasia.webquote.utilites.web.util.QuoteUtil;
import com.avnet.emasia.webquote.utilities.common.SysConfigSB;
import com.avnet.emasia.webquote.utilities.ejb.MailUtilsSB;
import com.avnet.emasia.webquote.web.datatable.SelectableLazyDataModel;
import com.avnet.emasia.webquote.web.quote.FacesUtil;
import com.avnet.emasia.webquote.web.quote.cache.CostIndicatorCacheManager;
import com.avnet.emasia.webquote.web.quote.cache.MfrCacheManager;
import com.avnet.emasia.webquote.web.user.UserInfo;

@ManagedBean
@SessionScoped
//NEC Pagination Changes: Class modified for implementing lazy loading in pagination
public class PricerEnquiryMB implements Serializable{
	private SelectItem[] mfrSelectList;
	private SelectItem[] costIndicatorSelectList;
	private transient StreamedContent downloadAll;
	private transient StreamedContent downloadSelected;
	private String bizUnitName = null;
	private boolean recordsExceedMaxAllowed = false;

	private PricerUploadTemplateBean criteria;
	private SelectItem[] typeSelectList;
	
	@EJB
	private SysConfigSB sysConfigSB;
	
	@EJB
	PricerEnquirySB pricerEnquirySB;
	@EJB
	PricerEnquiryOffline pricerEnquiryOffline;
	@EJB
	private ManufacturerSB manufacturerSB;
	@EJB
	private PricerUploadVerifySB pricerUploadVerifySB;
	@EJB
	private UserSB userSB;
	@EJB
	ContractPriceUploadSB contractPriceUploadSB;
	@EJB
	private PricerEnquirySB peSB;
	@EJB
	protected MailUtilsSB mailUtilsSB;
	
	@EJB
	private SystemCodeMaintenanceSB sysCodeMaintSB;
	
	/** The resource MB. */
	@ManagedProperty(value="#{resourceMB}")
	/** To Inject ResourceMB instance  */
	private ResourceMB resourceMB;
	
	private PricerDownLoadStrategy downloadSrategy = null;
	
	private static final long serialVersionUID = -7299394000861327426L;
	private static final Logger LOG = Logger.getLogger(PricerEnquiryMB.class.getName());
	private String pricerType = null;
	private boolean isNormalMaterial = true;
	private boolean isProgramMaterial = true;
	private boolean isContractPricer = true;
	private User user = null;
	private transient Method lastSearchMethod;
	
	//NEC Pagination changes: initialize the Lazy data  model for supporting the lazy loading in pagination
	LazyDataModelForPricerEnquiry beans = new LazyDataModelForPricerEnquiry();
	
	/**
	 * @param resourceMB the resourceMB to set
	 */
	public void setResourceMB(ResourceMB resourceMB) {
		this.resourceMB = resourceMB;
	}

	/**
	 * Searchs pricer(normal,program, contract).
	 */
	public void pricerSearch() {
		LOG.info("pricerSearch begin...");
		long start = System.currentTimeMillis();
		try {
			pricerType = criteria.getPricerType();
			User user = UserInfo.getUser();
			criteria.setBizUnit(user.getDefaultBizUnit());
			if (QuoteUtil.isEmpty(criteria.getMfr())) {
				FacesContext.getCurrentInstance().addMessage(
						null,
						new FacesMessage(FacesMessage.SEVERITY_ERROR, ResourceMB.getText("wq.message.mrfField"), ""));
				return;
			}
			
			int minLenSearchKey4Others=5;
			int minLenSearchKey4CustCoder=3;

			boolean isMinLength = validateCriteriaFieldMinLength(criteria, minLenSearchKey4Others,minLenSearchKey4CustCoder); 

			if (isMinLength) {
				Object[] obj = {minLenSearchKey4CustCoder,minLenSearchKey4Others};
				FacesMessage msg = new FacesMessage(FacesMessage.SEVERITY_ERROR, ResourceMB.getParameterizedString("wq.message.minLenghtSearchKey",obj) , "");
				FacesContext.getCurrentInstance().addMessage("msgId", msg);
				return;
			}
			
			//NEC Pagination changes: Set datatable's first record value
			String tableId = "pcrEnquiryForm:pricr_datatable";
			if (isNormalMaterial()) {
				tableId = "pcrEnquiryForm:pricr_datatable";
			} else if (isProgramMaterial()) {
				tableId = "pcrEnquiryForm:datatable_prg";
			} else if(isContractPricer()){
				tableId = "pcrEnquiryForm:ctrp_table";
			}
			//NEC Pagination Changes: Clear filter and sort field when reset is clicked
			final DataTable d = (DataTable) FacesContext.getCurrentInstance().getViewRoot()
			         .findComponent(tableId);
			int first = 0;
			if(null!=d){
				d.setFirst(first);
			}
			
			
			if(isNormalMaterial){
				beans.setSelectionItems(beans.getSelectedNormals());
			}
			else if(isProgramMaterial){
				beans.setSelectionItems(beans.getSelectedPrograms());
			}
			else{
				beans.setSelectionItems(beans.getSelectedContracts());
			}
			beans.startPagination();
		} catch (Exception e)
		{
			LOG.log(Level.SEVERE, "Enquiry upload pricer failed! for pricer type : "+pricerType+", business Unit : "+bizUnitName+", MFR "+criteria.getMfr()+", message" + e.getMessage(), e);
		}
		
		try {
			lastSearchMethod = this.getClass().getDeclaredMethod("pricerSearch",null);
		} catch (Exception e) {
			LOG.log(Level.SEVERE,
					"Error occured when get search Method with reflection in PricerEnquiryMB for pricer type : "+pricerType+", business Unit : "+bizUnitName+", MFR "+criteria.getMfr()+", message" + e.getMessage(),
					e);
		}
		long end = System.currentTimeMillis();
		LOG.info("pricerSearch end,takes " + (end - start) + " ms");	
	}

	@PostConstruct
	public void postContruct() {
		user = UserInfo.getUser();
		bizUnitName = user.getDefaultBizUnit().getName();
		this.changePullDownMenu(bizUnitName);
		downloadSrategy = new PricerDownLoadStrategy();
		criteria = new PricerUploadTemplateBean();
		criteria.setPricerType(PRICER_TYPE.NORMAL.getName());
		Date shipmentValidityFrom = PricerUtils.getTimesmorning(PricerUtils.getAfterMonth(-6));//-6 is  6 months ago
		criteria.setShipmentValidityFrom(shipmentValidityFrom);
		Date quotationEffectiveDateFrom = PricerUtils.getTimesmorning(PricerUtils.getAfterMonth(-6));//-6 is  6 months ago;
		criteria.setQuotationEffectiveDateFrom(quotationEffectiveDateFrom );
		setNormalMaterial(true);
		setProgramMaterial(false);
		setContractPricer(false);
		//if(beans==null){
			//NEC Pagination changes: initialize the Lazy data  model for supporting the pagination lazy loading
			beans= new LazyDataModelForPricerEnquiry();
		//}
	}
	public String getMyPage() {

		beans.setCacheSelectedItems(new HashSet<>());
		
		if (lastSearchMethod != null) {
			try {
				lastSearchMethod.invoke(this, null);
			} catch (Exception e) {
				LOG.log(Level.SEVERE,
						"Error occured when calling search method with reflection. on last serched method : "+lastSearchMethod+", Exception message: "+e.getMessage(),
						e);
			}
		}
		return "/RFQ/PricerEnquiry.jsf?faces-redirect=true";
	}
	
	public void removeSelectedPricer(){
		if((PRICER_TYPE.CONTRACT.getName().equalsIgnoreCase(pricerType) && (null==this.beans.getSelectedContracts() || 0==this.beans.getSelectedContracts().size())
				|| PRICER_TYPE.NORMAL.getName().equalsIgnoreCase(pricerType) && (null==this.beans.getSelectedNormals() || 0==this.beans.getSelectedNormals().size()) 
				|| PRICER_TYPE.PROGRAM.getName().equalsIgnoreCase(pricerType) && (null==this.beans.getSelectedPrograms() || 0==this.beans.getSelectedPrograms().size())) ){
			 FacesContext.getCurrentInstance().addMessage(
					"messages",new FacesMessage(FacesMessage.SEVERITY_ERROR, ResourceMB.getText("wq.message.selectPricer"), ""));
				return;
		}
		String errorMsgOfAbookCost = null;
		if(PRICER_TYPE.NORMAL.getName().equalsIgnoreCase(pricerType)) {
			for(PricerUploadTemplateBean bean : beans.getSelectedNormals()){
				if(PricerConstant.A_COST_INDICATOR.equalsIgnoreCase(bean.getCostIndicator())) {
					errorMsgOfAbookCost = ResourceMB.getText("wq.message.bookcost");
				}
			}
		}
		
		if(PRICER_TYPE.CONTRACT.getName().equalsIgnoreCase(pricerType)) {
			for(PricerUploadTemplateBean bean : beans.getSelectedContracts()){
				if(PricerConstant.A_COST_INDICATOR.equalsIgnoreCase(bean.getCostIndicator())) {
					errorMsgOfAbookCost = ResourceMB.getText("wq.message.bookcost");
				}
			}
		}
		
		if(PRICER_TYPE.PROGRAM.getName().equalsIgnoreCase(pricerType)) {
			for(PricerUploadTemplateBean bean : beans.getSelectedPrograms()){
				if(PricerConstant.A_COST_INDICATOR.equalsIgnoreCase(bean.getCostIndicator())) {
					errorMsgOfAbookCost = ResourceMB.getText("wq.message.bookcost");
				}
			}
		}
		if(!QuoteUtil.isEmpty(errorMsgOfAbookCost)) {
			FacesContext.getCurrentInstance().addMessage(
					"messages",new FacesMessage(FacesMessage.SEVERITY_ERROR, errorMsgOfAbookCost, ""));
				return;
		}
		
		boolean isSuccess = false;
		
		int[] count = new int[3];
		if(PRICER_TYPE.CONTRACT.getName().equalsIgnoreCase(pricerType)) {
			isSuccess = pricerEnquirySB.removePricer(pricerType,beans.getSelectedContracts(),user,count);
		}else if(PRICER_TYPE.NORMAL.getName().equalsIgnoreCase(pricerType)) {
			isSuccess = pricerEnquirySB.removePricer(pricerType,beans.getSelectedNormals(),user,count);
		}else if(PRICER_TYPE.PROGRAM.getName().equalsIgnoreCase(pricerType)) {
			isSuccess = pricerEnquirySB.removePricer(pricerType,beans.getSelectedPrograms(),user,count);
		}
		
		
		if (! isSuccess){
			FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,  ResourceMB.getText("wq.error.removePrice"), ""));
		}else{
			StringBuffer message = new StringBuffer();
			message.append(ResourceMB.getText("wq.message.selPricerRecordsRemoved"));
			pricerSearch();
			FacesContext.getCurrentInstance().addMessage("removeAllPricerKey", new FacesMessage(FacesMessage.SEVERITY_INFO, message.toString(), ""));
		}
		
		
		
	}
	
	public void validateRemoveSelectedMFRPricer(){
		if(QuoteUtil.isEmpty(pricerType)){
			FacesContext.getCurrentInstance().addMessage(
					"messages",new FacesMessage(FacesMessage.SEVERITY_ERROR, ResourceMB.getText("wq.message.recordsSelected"), ""));
				return;
		}
		if(PRICER_TYPE.NORMAL.getName().equalsIgnoreCase(pricerType)){
			if (beans.getSelectedNormals().size() != 1) {
				 FacesContext.getCurrentInstance().addMessage(
					"messages",new FacesMessage(FacesMessage.SEVERITY_ERROR, ResourceMB.getText("wq.message.recordsSelected") , ""));
				return;
			}
			beans.setSelected(beans.getSelectedNormals().get(0));
			
		}else if(PRICER_TYPE.PROGRAM.getName().equalsIgnoreCase(pricerType)){
			if (beans.getSelectedPrograms().size() != 1) {
				FacesContext.getCurrentInstance().addMessage(
					"messages",new FacesMessage(FacesMessage.SEVERITY_ERROR, ResourceMB.getText("wq.message.recordsSelected"), ""));
				return;
			}
			beans.setSelected(beans.getSelectedPrograms().get(0));
			
		}else if(PRICER_TYPE.CONTRACT.getName().equalsIgnoreCase(pricerType)){
			if (beans.getSelectedContracts().size() != 1) {
				FacesContext.getCurrentInstance().addMessage(
					"messages",new FacesMessage(FacesMessage.SEVERITY_ERROR, ResourceMB.getText("wq.message.recordsSelected"), ""));
				return;
			}
			beans.setSelected(beans.getSelectedContracts().get(0));
			
		}
		
		RequestContext.getCurrentInstance().execute("PF('removeAllPricerForSelectedMfrConfirmationDialog').show()");
		
	}
	
	
	public void removeSelectedMFRPricer(){
		
		boolean isSuccess = false;
		
		int[] count = new int[3];
		
		isSuccess = pricerEnquirySB.removeAllPricerForSelectedMfr(beans.getSelected().getMfr(), user, count);
		
		if (! isSuccess){
			FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,  ResourceMB.getText("wq.error.removePrice"), ""));
		}else{
			StringBuffer message = new StringBuffer();
			String msg=null;
			msg = ResourceMB.getText("wq.label.ALL");
			message.append(msg+"[");
			message.append(beans.getSelected().getMfr());
			msg = ResourceMB.getText("wq.message.Pricer");
			message.append("]"+ msg+ "[");
			message.append(count[0] + count[1] + count[2]);
			msg = ResourceMB.getText("wq.message.recordsRemovedNormalPricer");
			message.append("]"+msg+ "[");
			message.append(count[0]);
			msg = ResourceMB.getText("wq.message.progPricer")+":";
			message.append("]" +msg+ "[");
			message.append(count[1]);
			msg = ResourceMB.getText("wq.message.contractPricer");
			message.append("]" +msg+ "[");
			message.append(count[2]);
			message.append("]");
			pricerSearch();
			FacesContext.getCurrentInstance().addMessage("removeAllPricerKey", new FacesMessage(FacesMessage.SEVERITY_INFO, message.toString(), ""));
		}
		
	}	
	
	public String goToEditPrice(){
		boolean isAllowEdit = true;
		if(PRICER_TYPE.NORMAL.getName().equalsIgnoreCase(pricerType)){
			if (beans.getSelectedNormals().size() == 0) {
				FacesContext.getCurrentInstance().addMessage(
					"messages",new FacesMessage(FacesMessage.SEVERITY_ERROR,ResourceMB.getText("wq.message.noRecordSelected")+" !", ""));
				return null;
			}
			String message = PricerUploadHelper.isHaveSameKey(beans.getSelectedNormals());
			if(PricerUploadHelper.isHaveErrorMsg(message)){
				FacesContext.getCurrentInstance().addMessage(
						"messages",new FacesMessage(FacesMessage.SEVERITY_ERROR,message, ""));
				return null;
			}
			if(beans.getSelectedNormals()!=null&&beans.getSelectedNormals().size()>100){
				isAllowEdit = false;
			}
		}else if(PRICER_TYPE.PROGRAM.getName().equalsIgnoreCase(pricerType)){
			if (beans.getSelectedPrograms().size() == 0) {
				FacesContext.getCurrentInstance().addMessage(
					"messages",new FacesMessage(FacesMessage.SEVERITY_ERROR, ResourceMB.getText("wq.message.noRecordSelected")+" !", ""));
				return null;
			}
			String message = PricerUploadHelper.isHaveSameKey(beans.getSelectedPrograms());
			if(PricerUploadHelper.isHaveErrorMsg(message)){
				FacesContext.getCurrentInstance().addMessage(
						"messages",new FacesMessage(FacesMessage.SEVERITY_ERROR,message, ""));
				return null;
			}
			if(beans.getSelectedPrograms()!=null&&beans.getSelectedPrograms().size()>100){
				isAllowEdit = false;
			}
		}else if(PRICER_TYPE.CONTRACT.getName().equalsIgnoreCase(pricerType)){
			if (beans.getSelectedContracts().size() == 0) {
				FacesContext.getCurrentInstance().addMessage(
					"messages",new FacesMessage(FacesMessage.SEVERITY_ERROR,ResourceMB.getText("wq.message.noRecordSelected")+" !", ""));
				return null;
			}
			String message = PricerUploadHelper.isHaveSameKey(beans.getSelectedContracts());
			if(PricerUploadHelper.isHaveErrorMsg(message)){
				FacesContext.getCurrentInstance().addMessage(
						"messages",new FacesMessage(FacesMessage.SEVERITY_ERROR,message, ""));
				return null;
			}
			if(beans.getSelectedContracts()!=null&&beans.getSelectedContracts().size()>100){
				isAllowEdit = false;
			}
		}
		if(!isAllowEdit){
			FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,  ResourceMB.getText("wq.message.editMax") , ""));
			return null;
		}
		return "/PricerUpload/EditPrice.xhtml?faces-redirect=true";
	}
	
	public String editPrice(){
		boolean isSuccess = false;
		List<PricerUploadTemplateBean> beanList = new ArrayList<>(beans.getCacheSelectedItems());
		if(PRICER_TYPE.NORMAL.getName().equalsIgnoreCase(pricerType)){
			String errorMsg =verifyInSelectList(beans.getSelectedNormals());
			if(!QuoteUtil.isEmpty(errorMsg)){
				FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, errorMsg, ""));
				return null;
			}
			//HashMap<?, ?> hashMapCache = PricerUploadHelper.getPricerCache(user);
			//List<Manufacturer> mfrListCache = (List<Manufacturer>) hashMapCache.get("mfr");
			List<Manufacturer> manufacturers = manufacturerSB.findManufacturerByBizUnit(user.getDefaultBizUnit());
			List<Manufacturer> mfrLst = PricerUtils.getMfrInUploadFile(beanList , manufacturers);
			 errorMsg = pricerUploadVerifySB.batchVerifyEffectiveDateInDB(PRICER_TYPE.NORMAL.getName(),beans.getSelectedNormals(), user,mfrLst);
			if(!QuoteUtil.isEmpty(errorMsg)){
				FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, errorMsg, ""));
				return null;
			}
			isSuccess = pricerEnquirySB.updateNormalPricerMaterialDetail(beans.getSelectedNormals(), user);
		}else if(PRICER_TYPE.PROGRAM.getName().equalsIgnoreCase(pricerType)){
			String errorMsg =verifyInSelectList(beans.getSelectedPrograms());
			if(!QuoteUtil.isEmpty(errorMsg)){
				FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, errorMsg, ""));
				return null;
			}
			//HashMap<?, ?> hashMapCache = PricerUploadHelper.getPricerCache(user);
			//List<Manufacturer> mfrListCache = (List<Manufacturer>) hashMapCache.get("mfr");
			List<Manufacturer> manufacturers = manufacturerSB.findManufacturerByBizUnit(user.getDefaultBizUnit());
			List<Manufacturer> mfrLst = PricerUtils.getMfrInUploadFile(beanList, manufacturers);
			 errorMsg =pricerUploadVerifySB.batchVerifyEffectiveDateInDB(PRICER_TYPE.PROGRAM.getName(),beans.getSelectedPrograms(), user,mfrLst);
			 if(!QuoteUtil.isEmpty(errorMsg)){
					FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, errorMsg, ""));
					return null;
				}
			isSuccess = pricerEnquirySB.updateProgramPricerMaterialDetail(beans.getSelectedPrograms(), user);
		}else if(PRICER_TYPE.CONTRACT.getName().equalsIgnoreCase(pricerType)){
			String errorMsg =verifyInSelectList(beans.getSelectedContracts());
			if(!QuoteUtil.isEmpty(errorMsg)){
				FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, errorMsg, ""));
				return null;
			}
			
			List<Manufacturer> manufacturers = manufacturerSB.findManufacturerByBizUnit(user.getDefaultBizUnit());
			List<Manufacturer> mfrLst = PricerUtils.getMfrInUploadFile(beanList, manufacturers);
			errorMsg = pricerUploadVerifySB.verifyEffectiveDateForContract(beans.getSelectedContracts(), user,mfrLst);
			if(!QuoteUtil.isEmpty(errorMsg)){
				FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, errorMsg, ""));
				return null;
			}
			String language = resourceMB.getDefaultLocaleAsString();
			user.setUserLocale(language);
			errorMsg =  pricerUploadVerifySB.checkCustomerNumber(beans.getSelectedContracts(), new Locale(language));
			if(!QuoteUtil.isEmpty(errorMsg)){
				FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, errorMsg, ""));
				return null;
			}

			isSuccess = pricerEnquirySB.updateContractPricer(beans.getSelectedContracts(), user);
		}
		
		if(!isSuccess){
			 FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,  ResourceMB.getText("wq.error.editPrice"), ""));
			return null;
		}
		FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, ResourceMB.getText("wq.message.editPriceSuccess"), ""));
		return null;
	}
	
	public StreamedContent getDownloadAll() {
		List<PricerUploadTemplateBean> beans = pricerEnquirySB.pricerEnquiry(criteria,true); ;
		if (beans  ==null||beans.size() == 0) {
			FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, ResourceMB.getText("wq.message.noDataDownload"), ""));
			return null;
		}

		downloadAll = downloadSrategy.getDownloadFile(bizUnitName, beans, PricerConstant.PRICER_TEMPLATE_NAME);

		if (downloadAll == null) {
			FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, ResourceMB.getText("wq.message.downloadError")+"!" , ""));
			return null;
		}
		return downloadAll;
	}


	public StreamedContent getDownloadSelected() {
		if(PRICER_TYPE.NORMAL.getName().equalsIgnoreCase(pricerType)){
			if(beans.getSelectedNormals()==null||beans.getSelectedNormals().size() == 0){
				FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,ResourceMB.getText("wq.message.selectOneRecord"), ""));
				return null;
			}
			downloadSelected = downloadSrategy.getDownloadFile(bizUnitName, beans.getSelectedNormals(), PricerConstant.PRICER_TEMPLATE_NAME);

		}else if(PRICER_TYPE.PROGRAM.getName().equalsIgnoreCase(pricerType)){
			if(beans.getSelectedPrograms()==null||beans.getSelectedPrograms().size() == 0){
				FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,ResourceMB.getText("wq.message.selectOneRecord"), ""));
				return null;
			}
			downloadSelected = downloadSrategy.getDownloadFile(bizUnitName, beans.getSelectedPrograms(), PricerConstant.PRICER_TEMPLATE_NAME);

		}else if(PRICER_TYPE.CONTRACT.getName().equalsIgnoreCase(pricerType)){
			if(beans.getSelectedContracts()==null||beans.getSelectedContracts().size() == 0){
				
				FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,ResourceMB.getText("wq.message.selectOneRecord"), ""));
				return null;
			}
			downloadSelected = downloadSrategy.getDownloadFile(bizUnitName, beans.getSelectedContracts(), PricerConstant.PRICER_TEMPLATE_NAME);

		}

		if (downloadSelected == null) {
			FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, ResourceMB.getText("wq.message.downloadError")+"!", ""));
			return null;
		}
		return downloadSelected;
	}


	public void goDownloadOffline() throws NamingException, JMSException, InterruptedException {
		pricerType = criteria.getPricerType();
		User user = UserInfo.getUser();
		criteria.setBizUnit(user.getDefaultBizUnit());
		if (QuoteUtil.isEmpty(criteria.getMfr())) {
			FacesContext.getCurrentInstance().addMessage(
					null,
					new FacesMessage(FacesMessage.SEVERITY_ERROR,ResourceMB.getText("wq.message.mrfField"), ""));
			return;
		}
		
		/*boolean isMinLength = validateCriteriaFieldMinLength(criteria, 5);

		if (isMinLength) {
			FacesMessage msg = new FacesMessage(FacesMessage.SEVERITY_ERROR, "Allowed minimum length of search keyword is 5", "");
			FacesContext.getCurrentInstance().addMessage("msgId", msg);
			return;
		}*/
		
		int minLenSearchKey4Others=5;
		int minLenSearchKey4CustCoder=3;

		boolean isMinLength = validateCriteriaFieldMinLength(criteria, minLenSearchKey4Others,minLenSearchKey4CustCoder); 

		if (isMinLength) {
			Object[] obj = {minLenSearchKey4CustCoder,minLenSearchKey4Others};
			FacesMessage msg = new FacesMessage(FacesMessage.SEVERITY_ERROR, ResourceMB.getParameterizedString("wq.message.minLenghtSearchKey",obj) , "");
			FacesContext.getCurrentInstance().addMessage("msgId", msg);
			return;
		}

		FacesContext.getCurrentInstance().addMessage("msgId", new FacesMessage(FacesMessage.SEVERITY_INFO,ResourceMB.getText("wq.message.pricerDownloadOffline"), ""));

		pricerEnquiryOffline.downLoadOffline(criteria, user, downloadSrategy );
		
	}
	
	public InitialContext getInitialContext() throws NamingException {
		return new InitialContext();
	}

	public void changePricerType() {
//		beans = null;
		//NEC Pagination changes: initialize the Lazy data  model for supporting the pagination lazy loading
		beans= new LazyDataModelForPricerEnquiry();
		recordsExceedMaxAllowed = false;
		if (criteria.getPricerType().equalsIgnoreCase("Normal")) {
			setNormalMaterial(true);
			setProgramMaterial(false);
			setContractPricer(false);
		} else if (criteria.getPricerType().equalsIgnoreCase("Program")) {
			setNormalMaterial(false);
			setProgramMaterial(true);
			setContractPricer(false);
		} else {
			setNormalMaterial(false);
			setProgramMaterial(false);
			setContractPricer(true);
		}
	}

	public List<String> autoCompleteMfr(String key) {
		User user = UserInfo.getUser();
		List<Manufacturer> mfrs = manufacturerSB.mFindManufacturerByName(key, user.getBizUnits());
		List<String> result = new ArrayList<String>();

		for (Manufacturer mfr : mfrs) {
			result.add(mfr.getName());
		}

		return result;
	}

	public void changePullDownMenu(String bu) {
		List<Manufacturer> manufacturers = MfrCacheManager.getMfrListByBizUnit(bu);
		List<String> mfrCodes = new ArrayList<String>();
		if (manufacturers != null) {
			for (Manufacturer manufacturer : manufacturers)
				mfrCodes.add(manufacturer.getName());
		}
		this.mfrSelectList = QuoteUtil.createFilterOptions(mfrCodes.toArray(new String[mfrCodes.size()]), mfrCodes.toArray(new String[mfrCodes.size()]), false, false);

		this.typeSelectList = new SelectItem[3];
		this.typeSelectList[0] = new SelectItem("Normal", "Normal");
		this.typeSelectList[1] = new SelectItem("Program", "Program");
		this.typeSelectList[2] = new SelectItem("Contract", "Contract");
	}

	public SelectItem[] convertCostIndicatorToSelectItem() {
		List<String> costIndicators = CostIndicatorCacheManager.getCostIndicator();
		return QuoteUtil.createFilterOptions(costIndicators.toArray(new String[costIndicators.size()]), costIndicators.toArray(new String[costIndicators.size()]), false, false);
	}

	private boolean validateCriteriaFieldMinLength(PricerUploadTemplateBean bean, int minLenSearchKey4Others,int minLenSearchKey4CustCode) {
		Boolean isMinLength = (bean.getFullMfrPart().length() > 0 && criteria.getFullMfrPart().length() < minLenSearchKey4Others) ||
		/*		(bean.getProductGroup1().length() > 0 && bean.getProductGroup1().length() < minSearchLength) ||
				(bean.getProductGroup2().length() > 0 && bean.getProductGroup2().length() < minSearchLength) || 
				(bean.getProductGroup3().length() > 0 && bean.getProductGroup3().length() < minSearchLength) ||
				(bean.getProductGroup4().length() > 0 && bean.getProductGroup4().length() < minSearchLength) ||*/
				(bean.getTermsAndConditions().length() > 0 && bean.getTermsAndConditions().length() < minLenSearchKey4Others) ||
				(bean.getPriceListRemarks().length() > 0 && bean.getPriceListRemarks().length() < minLenSearchKey4Others)|| 
				(bean.getPriceListRemarks2().length() > 0 && bean.getPriceListRemarks2().length() < minLenSearchKey4Others) ||
				(bean.getPriceListRemarks3().length() > 0 && bean.getPriceListRemarks3().length() < minLenSearchKey4Others) || 
				(bean.getPriceListRemarks4().length() > 0 && bean.getPriceListRemarks4().length() < minLenSearchKey4Others) || 
				(bean.getSoldToCode().length() > 0 && bean.getSoldToCode().length() < minLenSearchKey4CustCode) ||
				(bean.getCustomerName().length() > 0 && bean.getCustomerName().length() < minLenSearchKey4Others) || 
				(bean.getEndCustomerName().length() > 0 && bean.getEndCustomerName().length() < minLenSearchKey4Others) ||
				(bean.getEndCustomerCode().length() > 0 && bean.getEndCustomerCode().length() < minLenSearchKey4CustCode) ||
				(bean.getProgram().length() > 0 && bean.getProgram().length() < minLenSearchKey4Others) ;
		return isMinLength;
	}
	
	

	/**
	 * verify field  , lengthofFiled ,validity
	 * @param beans
	 * @return
	 */
	private String verifyInSelectList(List<PricerUploadTemplateBean> beans){
		StringBuffer sb = new StringBuffer();
		PricerUploadTemplateBean bean = null;

		for (int i=0;i<beans.size();i++) {
			 bean = (PricerUploadTemplateBean) beans.get(i);
			 sb.append(PricerUploadHelper.validateFieldType(bean));
			 sb.append(PricerUploadHelper.validateLengthOfFields(bean));
			 sb.append(PricerUploadHelper.validateValidityForEditPricer(bean));
			 sb.append(PricerUploadHelper.validateMandatoryFields(bean));
			 sb.append(PricerUploadHelper.validateMOQAndMOV(bean));
		}
		return sb.toString();
	}
	
	public boolean isProgramMaterial() {
		return isProgramMaterial;
	}

	public void setProgramMaterial(boolean isProgramMaterial) {
		this.isProgramMaterial = isProgramMaterial;
	}

	public boolean isContractPricer() {
		return isContractPricer;
	}

	public void setContractPricer(boolean isContractPricer) {
		this.isContractPricer = isContractPricer;
	}

	public SelectItem[] getTypeSelectList() {
		return typeSelectList;
	}

	public void setTypeSelectList(SelectItem[] typeSelectList) {
		this.typeSelectList = typeSelectList;
	}

	public PricerUploadTemplateBean getCriteria() {
		return criteria;
	}

	public void setCriteria(PricerUploadTemplateBean criteria) {
		this.criteria = criteria;
	}

	public boolean isNormalMaterial() {
		return isNormalMaterial;
	}

	public void setNormalMaterial(boolean isNormalMaterial) {
		this.isNormalMaterial = isNormalMaterial;
	}

	public SelectItem[] getMfrSelectList() {
		return mfrSelectList;
	}

	public void setMfrSelectList(SelectItem[] mfrSelectList) {
		this.mfrSelectList = mfrSelectList;
	}

	public SelectItem[] getCostIndicatorSelectList() {
		return costIndicatorSelectList;
	}

	public void setCostIndicatorSelectList(SelectItem[] costIndicatorSelectList) {
		this.costIndicatorSelectList = costIndicatorSelectList;
	}

	public boolean isRecordsExceedMaxAllowed() {
		return recordsExceedMaxAllowed;
	}

	public void setRecordsExceedMaxAllowed(boolean recordsExceedMaxAllowed) {
		this.recordsExceedMaxAllowed = recordsExceedMaxAllowed;
	}

	//NEC Pagination changes:  it is getter for data table items
 	public LazyDataModelForPricerEnquiry getBeans() {
		return beans;
	}

	//NEC Pagination changes:  it is setter for data table items
	public void setBeans(LazyDataModelForPricerEnquiry beans) {
		this.beans = beans;
	}

	//NEC Pagination Changes: Inner Class created for implementing Pagination with Lazy Loading
	public class LazyDataModelForPricerEnquiry extends SelectableLazyDataModel<PricerUploadTemplateBean>{
		
		private transient List<PricerUploadTemplateBean> selectedNormals = new ArrayList<>();
		private transient List<PricerUploadTemplateBean> selectedPrograms = new ArrayList<>();
		private transient List<PricerUploadTemplateBean> selectedContracts = new ArrayList<>();
		
		private PricerUploadTemplateBean selected;
		
		public PricerUploadTemplateBean getSelected() {
			return selected;
		}

		public void setSelected(PricerUploadTemplateBean selected) {
			this.selected = selected;
		}

		public List<PricerUploadTemplateBean> getSelectedNormals() {
			return new ArrayList<>(getCacheSelectedItems());
		}

		public void setSelectedNormals(List<PricerUploadTemplateBean> selectedNormals) {
			this.selectedNormals = selectedNormals;
		}

		public List<PricerUploadTemplateBean> getSelectedPrograms() {
			return new ArrayList<>(getCacheSelectedItems());
		}

		public void setSelectedPrograms(List<PricerUploadTemplateBean> selectedPrograms) {
			this.selectedPrograms = selectedPrograms;
		}

		public List<PricerUploadTemplateBean> getSelectedContracts() {
			return new ArrayList<>(getCacheSelectedItems());
		}

		public void setSelectedContracts(List<PricerUploadTemplateBean> selectedContracts) {
			this.selectedContracts = selectedContracts;
		}

		//NEC Pagination Changes: sets maximum no. of pages that can be stored in cache at a time  
		@Override
		public void startPagination(){
			super.startPagination();
			String cachePageSizeVal = sysConfigSB.getProperyValue(SelectableLazyDataModel.CACHE_PAGE_SIZE);
			try{
				setCachePageSize(Integer.parseInt(cachePageSizeVal));
			}catch(Exception e){
				LOG.log(Level.SEVERE,
						"Error occured while setting size of cache, Exception message: "+e.getMessage(),
						e);
			}
			
		}
		
		//NEC Pagination Changes: finds count of records to be fetched
		@Override
		public int findLazyDataCount(String sortField, String sortOrder, Map<String, Object> filters) {
            return pricerEnquirySB.count(criteria, true);
		}
		
		//NEC Pagination Changes: finds data for current page when not present in cache
		@Override
		public List<PricerUploadTemplateBean> findLazyData(int first, int pageSize, String sortField, String sortOrder,
                Map<String, Object> filters) {
			List<PricerUploadTemplateBean> lazyItems = pricerEnquirySB.pricerEnquiry(criteria, true,first, pageSize);
			//NEC Pagination Changes: Sets sequence number of records fetched for current page
			for(int i=1; i<=lazyItems.size(); i++){
				if(null == lazyItems.get(i-1) || lazyItems.get(i-1).equals(""))
					break;
				else
					lazyItems.get(i-1).setLineSeq(first+i);
			}
			return lazyItems;
		}
		
		//NEC Pagination Changes: finds data for previous page through asynchronous call to database
		@Override
		public void findLazyPreviousPageData(int first, int pageSize, int pageNumber, String sortField, String sort, Map<String, Object> filters,
				ConcurrentHashMap<Integer, List<PricerUploadTemplateBean>> map, Queue<Integer> queue, int cachePageSize) {
			pricerEnquirySB.asynchSearch(criteria, true, first, pageSize, pageNumber, map, queue,cachePageSize);
		}
		
		//NEC Pagination Changes: finds data for next page through asynchronous call to database
		@Override
		public void findLazyNextPageData(int first, int pageSize, int pageNumber, String sortField, String sort, Map<String, Object> filters,
				ConcurrentHashMap<Integer, List<PricerUploadTemplateBean>> map, Queue<Integer> queue, int cachePageSize) {
			pricerEnquirySB.asynchSearch(criteria, true, first, pageSize, pageNumber, map, queue,cachePageSize);
		}
		
		@Override
		//NEC Pagination changes:  it is callback method
		public void cellChangeListener(String id) {
			beans.setCacheModifyData(id);
			String tableId = "pcrEnquiryForm:pricr_datatable";
			if (isNormalMaterial()) {
				tableId = "pcrEnquiryForm:pricr_datatable";
			} else if (isProgramMaterial()) {
				tableId = "pcrEnquiryForm:datatable_prg";
			} else if(isContractPricer()){
				tableId = "pcrEnquiryForm:ctrp_table";
			}
			FacesUtil.updateUI(tableId);

		}
		
		@Override
		//NEC Pagination changes: return data for pagination
		protected SelectableLazyDataModel<PricerUploadTemplateBean> getLazyData() {
			return beans;
		}
		
		@Override
		//NEC Pagination changes:  it is called on toggle of check box
		public void onToggleSelect(ToggleSelectEvent event) {
			
			if (isNormalMaterial()) {
				selectionItems = selectedNormals;
			} else if (isProgramMaterial()) {
				selectionItems = selectedPrograms;
			} else if(isContractPricer()){
				selectionItems = selectedContracts;
			}
			
			if (event.isSelected()) {
				this.getCacheSelectedItems().addAll(selectionItems);
			} else {
				this.getCacheSelectedItems().removeAll(getCurrentPageItems());
			}
		}
		
		@Override
		//NEC Pagination changes:  it is called on on row select
		public void onRowSelect(SelectEvent event) {
			this.getCacheSelectedItems().removeAll(getCurrentPageItems());
			
			if (isNormalMaterial()) {
				selectionItems = selectedNormals;
			} else if (isProgramMaterial()) {
				selectionItems = selectedPrograms;
			} else if(isContractPricer()){
				selectionItems = selectedContracts;
			}
			
			this.getCacheSelectedItems().addAll(selectionItems);
			
		}

		@Override
		//NEC Pagination changes:  it is called on on row select check box
		public void onRowSelectCheckbox(SelectEvent event) {
			//super.onRowSelectCheckbox(event);
			PricerUploadTemplateBean obj = (PricerUploadTemplateBean) event.getObject();
			this.getCacheSelectedItems().add(obj);
			onRowSelect(event);
		}

		@Override
		//NEC Pagination changes:  it is called on on row unselect check box
		public void onRowUnselectCheckbox(UnselectEvent event) {
			PricerUploadTemplateBean obj = (PricerUploadTemplateBean) event.getObject();
			this.getCacheSelectedItems().remove(obj);
			
				if (isNormalMaterial()) {
					selectedNormals.remove(event.getObject());
				} else if (isProgramMaterial()) {
					selectedPrograms.remove(event.getObject());
				} else if(isContractPricer()){
					selectedContracts.remove(event.getObject());
				}
		}
		
		//NEC Pagination Changes: Retrieves data of the current row in data table
		@Override
		public PricerUploadTemplateBean getRowData(String rowKey) {
			List<PricerUploadTemplateBean> list = (List<PricerUploadTemplateBean>) getWrappedData();
			if (!list.isEmpty()) {
				for (PricerUploadTemplateBean bean : list) {
						String key =(String.valueOf((bean).getLineSeq()));
						if( rowKey.equals(key))
							return bean;
					
				}
			}

			return null;
		}

	}
}
