package com.avnet.emasia.webquote.commodity.web;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.annotation.PostConstruct;
import javax.annotation.Resource;
import javax.ejb.EJB;
import javax.ejb.TransactionManagement;
import javax.ejb.TransactionManagementType;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.context.FacesContext;
import javax.faces.event.ActionEvent;
import javax.faces.model.SelectItem;
import javax.transaction.HeuristicMixedException;
import javax.transaction.NotSupportedException;
import javax.transaction.RollbackException;
import javax.transaction.SystemException;
import javax.transaction.UserTransaction;

import org.apache.commons.lang.StringUtils;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.hssf.util.HSSFColor;
import org.apache.poi.ss.usermodel.CellStyle;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CellEditEvent;
import org.primefaces.event.FileUploadEvent;
import org.primefaces.model.DefaultStreamedContent;
import org.primefaces.model.StreamedContent;
import org.springframework.security.core.context.SecurityContextHolder;

import com.avnet.emasia.webquote.commodity.ejb.ProgramMaterialSB;
import com.avnet.emasia.webquote.commodity.helper.ProgRfqSubmitHelper;
import com.avnet.emasia.webquote.commodity.helper.SessionHelper;
import com.avnet.emasia.webquote.commodity.helper.ValidateHelper;
import com.avnet.emasia.webquote.commodity.vo.ValidateError;
import com.avnet.emasia.webquote.constants.ActionEnum;
import com.avnet.emasia.webquote.dp.EJBCommonSB;
import com.avnet.emasia.webquote.entity.Attachment;
import com.avnet.emasia.webquote.entity.BizUnit;
import com.avnet.emasia.webquote.entity.City;
import com.avnet.emasia.webquote.entity.Country;
import com.avnet.emasia.webquote.entity.Customer;
import com.avnet.emasia.webquote.entity.CustomerAddress;
import com.avnet.emasia.webquote.entity.CustomerSale;
import com.avnet.emasia.webquote.entity.CustomerSalePK;
import com.avnet.emasia.webquote.entity.ExcCurrencyDefault;
import com.avnet.emasia.webquote.entity.Material;
import com.avnet.emasia.webquote.entity.ProgramPricer;
import com.avnet.emasia.webquote.entity.Quote;
import com.avnet.emasia.webquote.entity.QuoteItem;
import com.avnet.emasia.webquote.entity.Role;
import com.avnet.emasia.webquote.entity.SalesOrg;
import com.avnet.emasia.webquote.entity.Team;
import com.avnet.emasia.webquote.entity.User;
import com.avnet.emasia.webquote.exception.AppException;
import com.avnet.emasia.webquote.exception.WebQuoteException;
import com.avnet.emasia.webquote.masterData.exception.CheckedException;
import com.avnet.emasia.webquote.masterData.util.DateUtils;
import com.avnet.emasia.webquote.quote.ejb.CitySB;
import com.avnet.emasia.webquote.quote.ejb.CustomerSB;
import com.avnet.emasia.webquote.quote.ejb.ExchangeRateSB;
import com.avnet.emasia.webquote.quote.ejb.ManufacturerSB;
import com.avnet.emasia.webquote.quote.ejb.MaterialSB;
import com.avnet.emasia.webquote.quote.ejb.MyQuoteSearchSB;
import com.avnet.emasia.webquote.quote.ejb.QuoteSB;
import com.avnet.emasia.webquote.quote.ejb.SAPWebServiceSB;
import com.avnet.emasia.webquote.quote.ejb.SystemCodeMaintenanceSB;
import com.avnet.emasia.webquote.quote.ejb.constant.QuoteSBConstant;
import com.avnet.emasia.webquote.user.ejb.ApplicationSB;
import com.avnet.emasia.webquote.user.ejb.UserSB;
import com.avnet.emasia.webquote.utilites.resources.ResourceMB;
import com.avnet.emasia.webquote.utilites.web.util.DeploymentConfiguration;
import com.avnet.emasia.webquote.utilites.web.util.DownloadUtil;
import com.avnet.emasia.webquote.utilites.web.util.QuoteUtil;
import com.avnet.emasia.webquote.utilities.MessageFormatorUtil;
import com.avnet.emasia.webquote.utilities.bean.MailInfoBean;
import com.avnet.emasia.webquote.utilities.common.SysConfigSB;
import com.avnet.emasia.webquote.utilities.ejb.MailUtilsSB;
import com.avnet.emasia.webquote.web.quote.cache.AccountGroupCacheManager;
import com.avnet.emasia.webquote.web.quote.cache.CountryCacheManager;
import com.avnet.emasia.webquote.web.quote.cache.SalesOrgCacheManager;
import com.avnet.emasia.webquote.web.quote.constant.QuoteConstant;
import com.avnet.emasia.webquote.web.quote.job.FileUtil;
import com.avnet.emasia.webquote.web.quote.vo.QuotationEmailVO;
import com.avnet.emasia.webquote.web.security.WQUserDetails;
//import com.sap.document.sap.soap.functions.mc_style.ZwqCustomer;
import com.avnet.emasia.webquote.webservice.customer.ZwqCustomer;

@ManagedBean(name = "progRfqSubmitMB")
@SessionScoped
@TransactionManagement(TransactionManagementType.BEAN)
public class ProgRfqSubmitMB extends ProgRfqSubmitHelper implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 4086791792133327708L;
	private static final Logger LOGGER = Logger.getLogger(ProgRfqSubmitMB.class.getName());
	private static final String EDIT_CELL_HEADER_TEXT_REQ_QTY = "Required Qty*";
	private static final String EDIT_CELL_HEADER_TEXT_TARGET_RESALE = "Target Resale";
	private static final String EMPTY_STR = "";
	private Quote quote;
	private QuoteItem selectedQuoteItem;
	// added by June for Project RMB cur 20140704
	private SelectItem[] exCurrencyList;
	private String exCurrency;

	private User user;
	private boolean salesmanListForCsPanelDisplay;
	private boolean salesmanListForQcPanelDisplay;
	private boolean salesmanListForInsideSalesDisplay;
	private boolean rfqOperationPanelDisplay;

	private List<User> salesList;
	private Map<String, User> salesMap;
	private List<Attachment> attachments;
	private long itemNumberForAttachment;

	private Quote submittedQuote;

	private Quote quoteInitialCopy;

	private int seletedDeletedAttachementRowId;

	private int submitType;
	private List<String> tempSTList;

	/*
	 * For customer search and creation
	 */
	private String customerTypeSearch;
	private String customerNameSearch;
	private SelectItem[] customerTypeSearchSelectList;
	private SelectItem[] countrySelectList;
	private SelectItem[] citySelectList;
	private SelectItem[] salesOrgSelectList;
	private List<Customer> searchCustomers;
	private List<Customer> selectedSearchCustomers;
	private Customer selectedSearchCustomer;
	private boolean deleteCustomer = false;

	// New prospective part
	private String newProspectiveCustomerName1;
	private String newProspectiveCustomerName2;
	private String newProspectiveCustomerCountry;
	private String newProspectiveCustomerCity;
	private String newProspectiveCustomerAddress3;
	private String newProspectiveCustomerAddress4;
	private String newProspectiveCustomerSalesOrg;

	private boolean newProspectiveCustomerDuplicated;

	private String duplicatedCustomerCode;
	private String duplicatedCustomerName;
	private String duplicatedCustomerType;
	private String duplicatedCountry;
	private String duplicatedCity;
	private String duplicatedSalesOrg;

	private int searchCustomersCount = 0;

	private BizUnit bizUnit;
	private BizUnit salesBizUnit;

	// for result page.
	private Quote resultQuote;
	private List<String> standTermsAndCons;
	private List<String> specTermsAndCons;

	private transient StreamedContent file;
	private transient StreamedContent downloadAttachment;

	private boolean createProspectiveCustomerButtonDisplay = true;

	public ProgRfqSubmitMB() {
		// TODO Auto-generated constructor stub
	}

	@EJB
	private UserSB userSB;
	@EJB
	private QuoteSB quoteSB;
	@EJB
	private CustomerSB customerSB;
	@EJB
	private ApplicationSB applicationSB;
	@EJB
	private SAPWebServiceSB sapWebServiceSB;
	@EJB
	private MailUtilsSB mailUtilsSB;

	@EJB
	private ExchangeRateSB exChangeRateSB;

	@EJB
	private CitySB citySB;
	@EJB
	private ManufacturerSB manufacturerSB;
	@EJB
	private SysConfigSB sysConfigSB;
	@EJB
	private ProgramMaterialSB programMaterialSB;
	@EJB
	private MyQuoteSearchSB myQuoteSearchSB;

	@EJB
	transient SystemCodeMaintenanceSB sysMaintSB;

	@Resource
	private transient UserTransaction ut;

	@EJB
	private MaterialSB materialSB;
	
	@EJB
	protected EJBCommonSB ejbCommonSB;

	@PostConstruct
	public void initialize() {
		LOGGER.fine("call ProgRfqSumbitMB initialize");

		if (null == user) {
			user = ((WQUserDetails) SecurityContextHolder.getContext().getAuthentication().getPrincipal()).getUser();
			bizUnit = user.getDefaultBizUnit();
			salesBizUnit = user.getDefaultBizUnit();
			salesmanListForCsPanelDisplay = applicationSB.isActionAccessibleByUser(user,
					"ProgRfqSubmit.salesmanPanel.panel");
			salesmanListForQcPanelDisplay = applicationSB.isActionAccessibleByUser(user,
					"ProgRfqSubmit.salesmanPanelForQCO.panel");
			salesmanListForInsideSalesDisplay = applicationSB.isActionAccessibleByUser(user,
					"ProgRfqSubmit.salesmanPanelForInsideSales.panel");
			rfqOperationPanelDisplay = applicationSB.isActionAccessibleByUser(user,
					"CommodityMgt.RfqOperationPanel.buttons");

			quote = initialQuote();

			// Loading initial data.

			if (salesmanListForCsPanelDisplay) {
				salesList = userSB.findAllSalesForCs(user);
				salesMap = new HashMap<String, User>();
				if (salesList != null && salesList.size() > 0) {
					for (User tempUser : salesList) {
						salesMap.put(tempUser.getName(), tempUser);
					}
				}
			} else if (salesmanListForQcPanelDisplay) {
				// salesList=
				// userSB.findAllSalesByBizUnit(QuoteSBConstant.ROLE_SALES,
				// bizUnit);
				salesList = userSB.wFindAllSalesByBizUnit(null, null,
						new String[] { QuoteSBConstant.ROLE_SALES, QuoteSBConstant.ROLE_INSIDE_SALES,
								QuoteSBConstant.ROLE_SALES_MANAGER, QuoteSBConstant.ROLE_SALES_DIRECTOR,
								QuoteSBConstant.ROLE_SALES_GM },
						bizUnit);

				salesMap = new HashMap<String, User>();
				if (salesList != null && salesList.size() > 0) {
					for (User tempUser : salesList) {
						salesMap.put(tempUser.getName(), tempUser);
					}
				}
			} else if (salesmanListForInsideSalesDisplay) {
				LOGGER.fine("call ProgRfqSumbitMB initialize | it is inside sales");
				salesList = userSB.wFindAllSalesForCsForInsideSales(null, null, user);
				salesMap = new HashMap<String, User>();
				if (salesList != null && salesList.size() > 0) {
					for (User tempUser : salesList) {
						salesMap.put(tempUser.getName(), tempUser);
					}
				}
			}

			customerTypeSearchSelectList = QuoteUtil.createFilterOptions(QuoteConstant.CUSTOMER_TYPE, false, true);

			List<String> countryCodes = new ArrayList<String>();
			List<String> countryNames = new ArrayList<String>();
			List<Country> countries = CountryCacheManager.getCountries();
			if (countries != null) {
				for (Country country : countries) {
					countryCodes.add(country.getId());
					countryNames.add(country.getName());
				}
			}
			countrySelectList = QuoteUtil.createFilterOptions(countryNames.toArray(new String[countryNames.size()]),
					countryCodes.toArray(new String[countryCodes.size()]), false, false);

			List<String> cityCodes = new ArrayList<String>();
			List<String> cityNames = new ArrayList<String>();
			citySelectList = QuoteUtil.createFilterOptions(cityCodes.toArray(new String[cityCodes.size()]),
					cityNames.toArray(new String[cityNames.size()]), false, false);

			List<String> salesOrgCodes = SalesOrgCacheManager.getSalesOrgCodesByBizUnit(salesBizUnit.getName());
			salesOrgSelectList = QuoteUtil.createFilterOptions(salesOrgCodes.toArray(new String[salesOrgCodes.size()]),
					salesOrgCodes.toArray(new String[salesOrgCodes.size()]), false, false);

			// webquote japan not need to show create prospective customer
			// button. added by Lenon.Yang(043044) 2016/07/16
			this.createProspectiveCustomerButtonDisplay = applicationSB.isActionAccessibleByUser(user,
					QuoteConstant.WEBPROMO_ALLOW_CREATE_PROSPECTIVE_CUSTOMER);

		}
	}

	public Quote initialQuote() {
		Quote returnQuote = new Quote();
		returnQuote.setQuoteItems(new ArrayList<QuoteItem>());
		returnQuote.setAttachments(new ArrayList<Attachment>());
		Customer cust = new Customer();
		cust.setCustomerNumber(EMPTY_STR);
		cust.setCustomerName1(EMPTY_STR);
		returnQuote.setSoldToCustomer(cust);
		if (salesmanListForCsPanelDisplay || salesmanListForQcPanelDisplay || salesmanListForInsideSalesDisplay) {
			User u = new User();
			u.setEmployeeId(EMPTY_STR);
			u.setName(EMPTY_STR);
			// WebQuote 2.2 enhancement. 6.1.1 part 2.
			Team tempTeam = new Team();
			tempTeam.setName(EMPTY_STR);
			u.setTeam(tempTeam);
			returnQuote.setSales(new User());
		}
		else
		{
			returnQuote.setSales(user);
			// WebQuote 2.2 enhancement. 6.1.1 part 2.
			returnQuote.setTeam(user.getTeam());
		}
		returnQuote.setBizUnit(bizUnit);
		return returnQuote;
	}

	public List<Attachment> getAttachments() {
		return attachments;
	}

	public void setAttachments(List<Attachment> attachments) {
		this.attachments = attachments;
	}

	public List<User> getSalesList() {
		return salesList;
	}

	public void setSalesList(List<User> salesList) {
		this.salesList = salesList;
	}

	public Quote getResultQuote() {
		return resultQuote;
	}

	public void setResultQuote(Quote resultQuote) {
		this.resultQuote = resultQuote;
	}

	public boolean isSalesmanListForCsPanelDisplay() {
		return salesmanListForCsPanelDisplay;
	}

	public void setSalesmanListForCsPanelDisplay(boolean salesmanListForCsPanelDisplay) {
		this.salesmanListForCsPanelDisplay = salesmanListForCsPanelDisplay;
	}

	public boolean isSalesmanListForQcPanelDisplay() {
		return salesmanListForQcPanelDisplay;
	}

	public void setSalesmanListForQcPanelDisplay(
			boolean salesmanListForQcPanelDisplay) {
		this.salesmanListForQcPanelDisplay = salesmanListForQcPanelDisplay;
	}

	public Quote getQuote() {
		return quote;
	}

	public void setQuote(Quote quote) {
		this.quote = quote;
	}

	public QuoteItem getSelectedQuoteItem() {
		return selectedQuoteItem;
	}

	public void setSelectedQuoteItem(QuoteItem selectedQuoteItem) {
		this.selectedQuoteItem = selectedQuoteItem;
	}

	public StreamedContent getDownloadAttachment() {
		return downloadAttachment;
	}

	public void setDownloadAttachment(StreamedContent downloadAttachment) {
		this.downloadAttachment = downloadAttachment;
	}

	public long getItemNumberForAttachment() {
		return itemNumberForAttachment;
	}

	public void setItemNumberForAttachment(long itemNumberForAttachment) {
		this.itemNumberForAttachment = itemNumberForAttachment;
	}

	public String getCustomerTypeSearch() {
		return customerTypeSearch;
	}

	public void setCustomerTypeSearch(String customerTypeSearch) {
		this.customerTypeSearch = customerTypeSearch;
	}

	public SelectItem[] getCustomerTypeSearchSelectList() {
		return customerTypeSearchSelectList;
	}

	public int getSeletedDeletedAttachementRowId() {
		return seletedDeletedAttachementRowId;
	}

	public void setSeletedDeletedAttachementRowId(int seletedDeletedAttachementRowId) {
		this.seletedDeletedAttachementRowId = seletedDeletedAttachementRowId;
	}

	public Quote getSubmittedQuote() {
		return submittedQuote;
	}

	public void setSubmittedQuote(Quote submittedQuote) {
		this.submittedQuote = submittedQuote;
	}

	public void setCustomerTypeSearchSelectList(
			SelectItem[] customerTypeSearchSelectList) {
		this.customerTypeSearchSelectList = customerTypeSearchSelectList;
	}

	public String getNewProspectiveCustomerName1() {
		return newProspectiveCustomerName1;
	}

	public void setNewProspectiveCustomerName1(String newProspectiveCustomerName1) {
		this.newProspectiveCustomerName1 = newProspectiveCustomerName1;
	}

	public String getNewProspectiveCustomerName2() {
		return newProspectiveCustomerName2;
	}

	public void setNewProspectiveCustomerName2(String newProspectiveCustomerName2) {
		this.newProspectiveCustomerName2 = newProspectiveCustomerName2;
	}

	public String getNewProspectiveCustomerCountry() {
		return newProspectiveCustomerCountry;
	}

	public void setNewProspectiveCustomerCountry(
			String newProspectiveCustomerCountry) {
		this.newProspectiveCustomerCountry = newProspectiveCustomerCountry;
	}

	public String getNewProspectiveCustomerCity() {
		return newProspectiveCustomerCity;
	}

	public void setNewProspectiveCustomerCity(String newProspectiveCustomerCity) {
		this.newProspectiveCustomerCity = newProspectiveCustomerCity;
	}

	public String getNewProspectiveCustomerAddress3() {
		return newProspectiveCustomerAddress3;
	}

	public void setNewProspectiveCustomerAddress3(
			String newProspectiveCustomerAddress3) {
		this.newProspectiveCustomerAddress3 = newProspectiveCustomerAddress3;
	}

	public String getNewProspectiveCustomerAddress4() {
		return newProspectiveCustomerAddress4;
	}

	public void setNewProspectiveCustomerAddress4(
			String newProspectiveCustomerAddress4) {
		this.newProspectiveCustomerAddress4 = newProspectiveCustomerAddress4;
	}

	public String getNewProspectiveCustomerSalesOrg() {
		return newProspectiveCustomerSalesOrg;
	}

	public void setNewProspectiveCustomerSalesOrg(
			String newProspectiveCustomerSalesOrg) {
		this.newProspectiveCustomerSalesOrg = newProspectiveCustomerSalesOrg;
	}

	public String getCustomerNameSearch() {
		return customerNameSearch;
	}

	public void setCustomerNameSearch(String customerNameSearch) {
		this.customerNameSearch = customerNameSearch;
	}

	public SelectItem[] getCountrySelectList() {
		return countrySelectList;
	}

	public void setCountrySelectList(SelectItem[] countrySelectList) {
		this.countrySelectList = countrySelectList;
	}

	public SelectItem[] getCitySelectList() {
		return citySelectList;
	}

	public void setCitySelectList(SelectItem[] citySelectList) {
		this.citySelectList = citySelectList;
	}

	public SelectItem[] getSalesOrgSelectList() {
		return salesOrgSelectList;
	}

	public void setSalesOrgSelectList(SelectItem[] salesOrgSelectList) {
		this.salesOrgSelectList = salesOrgSelectList;
	}

	public int getSearchCustomersCount() {
		return searchCustomersCount;
	}

	public void setSearchCustomersCount(int searchCustomersCount) {
		this.searchCustomersCount = searchCustomersCount;
	}

	public List<Customer> getSearchCustomers() {
		return searchCustomers;
	}

	public void setSearchCustomers(List<Customer> searchCustomers) {
		this.searchCustomers = searchCustomers;
	}

	public List<Customer> getSelectedSearchCustomers() {
		return selectedSearchCustomers;
	}

	public void setSelectedSearchCustomers(List<Customer> selectedSearchCustomers) {
		this.selectedSearchCustomers = selectedSearchCustomers;
	}

	public Customer getSelectedSearchCustomer() {
		return selectedSearchCustomer;
	}

	public void setSelectedSearchCustomer(Customer selectedSearchCustomer) {
		this.selectedSearchCustomer = selectedSearchCustomer;
	}

	public List<String> getStandTermsAndCons() {
		return standTermsAndCons;
	}

	public void setStandTermsAndCons(List<String> standTermsAndCons) {
		this.standTermsAndCons = standTermsAndCons;
	}

	public List<String> getSpecTermsAndCons() {
		return specTermsAndCons;
	}

	public void setSpecTermsAndCons(List<String> specTermsAndCons) {
		this.specTermsAndCons = specTermsAndCons;
	}

	public boolean isDeleteCustomer() {
		return deleteCustomer;
	}

	public void setDeleteCustomer(boolean deleteCustomer) {
		this.deleteCustomer = deleteCustomer;
	}

	public boolean isNewProspectiveCustomerDuplicated() {
		return newProspectiveCustomerDuplicated;
	}

	public void setNewProspectiveCustomerDuplicated(
			boolean newProspectiveCustomerDuplicated) {
		this.newProspectiveCustomerDuplicated = newProspectiveCustomerDuplicated;
	}

	public String getDuplicatedCustomerCode() {
		return duplicatedCustomerCode;
	}

	public void setDuplicatedCustomerCode(String duplicatedCustomerCode) {
		this.duplicatedCustomerCode = duplicatedCustomerCode;
	}

	public String getDuplicatedCustomerName() {
		return duplicatedCustomerName;
	}

	public void setDuplicatedCustomerName(String duplicatedCustomerName) {
		this.duplicatedCustomerName = duplicatedCustomerName;
	}

	public String getDuplicatedCustomerType() {
		return duplicatedCustomerType;
	}

	public void setDuplicatedCustomerType(String duplicatedCustomerType) {
		this.duplicatedCustomerType = duplicatedCustomerType;
	}

	public String getDuplicatedCountry() {
		return duplicatedCountry;
	}

	public void setDuplicatedCountry(String duplicatedCountry) {
		this.duplicatedCountry = duplicatedCountry;
	}

	public String getDuplicatedCity() {
		return duplicatedCity;
	}

	public void setDuplicatedCity(String duplicatedCity) {
		this.duplicatedCity = duplicatedCity;
	}

	public String getDuplicatedSalesOrg() {
		return duplicatedSalesOrg;
	}

	public void setDuplicatedSalesOrg(String duplicatedSalesOrg) {
		this.duplicatedSalesOrg = duplicatedSalesOrg;
	}

	/*
	 * when edit request qty, target resales , and item remarks will trigger it.
	 * 
	 * @Param: event, the cellEditEvent .
	 */
	public void onCellEdit(CellEditEvent event) {
		LOGGER.fine("call | ProgRfqSubmitMB |  onCellEdit row index : "+event.getRowIndex() + " quote.getQuoteItems() size : "+ quote.getQuoteItems().size() );
		RequestContext requestContext = RequestContext.getCurrentInstance();
		Object newValue = event.getNewValue();
		Object oldValue = event.getOldValue();
		QuoteItem tempQ = quote.getQuoteItems().get(event.getRowIndex());
		String message = null;
        if(newValue != null && !newValue.equals(oldValue)) 
	{
			String columnName = event.getColumn().getHeaderText();
			LOGGER.fine("call | ProgRfqSubmitMB columnName |" + columnName);
			if (EDIT_CELL_HEADER_TEXT_REQ_QTY.equalsIgnoreCase(columnName)) {

				Integer tempInt = tempQ.getRequestedQty();
				if (tempInt != null && tempInt > 0) {
					if (tempInt % tempQ.getMpq() != 0) {
						message = ResourceMB.getText("wq.message.reqQtyError");
						FacesMessage msg = new FacesMessage(FacesMessage.SEVERITY_ERROR, EMPTY_STR, message);
						FacesContext.getCurrentInstance().addMessage("growl_submit_target", msg);
						requestContext.update("growl_submit");
					}
				} else {
					message = ResourceMB.getText("wq.message.reqQtyNumrcError");
					FacesMessage msg = new FacesMessage(FacesMessage.SEVERITY_ERROR, EMPTY_STR, message);
					FacesContext.getCurrentInstance().addMessage("growl_submit_target", msg);
					requestContext.update("growl_submit");
				}
				// }
				// else
				// {
				// if(!StringUtils.isNumeric((String)newValue))
				// {
				// FacesMessage msg = new
				// FacesMessage(FacesMessage.SEVERITY_ERROR, "", "Requested Qty
				// is required to be numeric!");
				// FacesContext.getCurrentInstance().addMessage("growl_submit_target",
				// msg);
				// requestContext.update("growl_submit");
				// }
				// else
				// {
				// Integer tempInt = (Integer)newValue;
				// if(tempInt%tempQ.getMpq()!=0)
				// {
				// FacesMessage msg = new
				// FacesMessage(FacesMessage.SEVERITY_ERROR, "", "Requested Qty
				// must meet MPQ!");
				// FacesContext.getCurrentInstance().addMessage("requiredQtyInput",
				// msg);
				// requestContext.update("form_submit:requiredQtyInputMsg");
				// }
				// }
				//
				//
				//
				// }
			} else if (EDIT_CELL_HEADER_TEXT_TARGET_RESALE.equalsIgnoreCase(columnName)) {
				if (!(newValue instanceof Double)) {
					message = ResourceMB.getText("wq.message.reqQtyNumrcError");
					FacesMessage msg = new FacesMessage(FacesMessage.SEVERITY_ERROR, EMPTY_STR, message);
					FacesContext.getCurrentInstance().addMessage("growl_submit_target", msg);
					requestContext.update("growl_submit");
				}
			}

		}
	}

	/*
	 * Get the draft quote object . which will be stored into db.
	 */
	public Quote getProgDraftRfqFromCurretnPage() 
	{

		LOGGER.fine("call | getProgDraftRfqFromCurretnPage");

		Quote draftQuote = null;
		try {
			draftQuote = new Quote();
			// Mandatory fields
			draftQuote.setStage(QuoteSBConstant.QUOTE_STATE_PROG_DRAFT);
			draftQuote.setFormNumber("FM_" + user.getEmployeeId());
			// WebQuote 2.2 enhancement : fields changes.
			// draftQuote.setBomFlag(false);
			draftQuote.setBizUnit(bizUnit);
			// Material restructure and quote_item delinkage. changed on 10 Apr
			// 2014.
			draftQuote.setCreatedBy(user.getEmployeeId());
			draftQuote.setCreatedName(user.getName());
			draftQuote.setCreatedOn(DateUtils.getCurrentAsiaDateObj());
			draftQuote.setLastUpdatedOn(DateUtils.getCurrentAsiaDateObj());
			draftQuote.setRemarksToCustomer(quote.getRemarksToCustomer());
			// Material restructure and quote_item delinkage. changed on 10 Apr
			// 2014.
			draftQuote.setLastUpdatedBy(user.getEmployeeId());
			draftQuote.setLastUpdatedName(user.getName());
			if (quote.getSoldToCustomer() != null) {
				Customer customerT = customerSB.findByPK(quote.getSoldToCustomer().getCustomerNumber());
				if (customerT == null) {
					Customer cust = new Customer();
					cust.setCustomerNumber(EMPTY_STR);
					cust.setCustomerName1(EMPTY_STR);
					draftQuote.setSoldToCustomer(cust);
				} else {
					draftQuote.setSoldToCustomer(customerT);
				}

			}
			if (quote.getSales() != null) {
				User userT = userSB.findByEmployeeIdLazily(quote.getSales().getEmployeeId());
				if (userT != null) {
					draftQuote.setSales(userT);
					draftQuote.setTeam(userT.getTeam());
				} else {
					User u = new User();
					u.setEmployeeId(EMPTY_STR);
					u.setName(EMPTY_STR);
					draftQuote.setSales(u);
					// WebQuote 2.2 enhancement. 6.1.1 part 2.
					Team tempTeam = new Team();
					tempTeam.setName(EMPTY_STR);
					draftQuote.setTeam(tempTeam);
				}

			}
			draftQuote.setQuoteItems(new ArrayList<QuoteItem>());
			if (quote.getQuoteItems() != null && quote.getQuoteItems().size() > 0)
				for (int i = 0; i < quote.getQuoteItems().size(); i++) {
					QuoteItem item = quote.getQuoteItems().get(i);
					QuoteItem newItem = new QuoteItem();

					// Delinkage change on Oct 29 , 2013 by Tonmy
					// newItem.setRequestedMaterial(item.getRequestedMaterial());
					newItem.setRequestedMfr(item.getRequestedMfr());
					newItem.setRequestedPartNumber(item.getRequestedPartNumber());
					newItem.setRequestedMaterialForProgram(item.getRequestedMaterialForProgram());
					newItem.setQuotedMfr(item.getRequestedMfr());
					newItem.setQuotedPartNumber(item.getRequestedPartNumber());
					newItem.setQuotedMaterial(item.getRequestedMaterialForProgram());
					// PROGRM PRICER ENHANCEMENT
					newItem.setCostIndicator(item.getCostIndicator());
					if (item.getRequestedProgramMaterialForProgram() != null
							&& item.getRequestedProgramMaterialForProgram().getCostIndicator() != null)
						newItem.setCostIndicator(
								item.getRequestedProgramMaterialForProgram().getCostIndicator().getName());

					newItem.setMpq(item.getMpq());
					newItem.setMoq(item.getMoq());
					newItem.setRequestedQty(item.getRequestedQty());
					newItem.setTargetResale(item.getTargetResale());
					newItem.setRemarks(item.getRemarks());
					newItem.setAttachments(item.getAttachments());
					newItem.setQuote(draftQuote);
					if (newItem.getAttachments() == null)
						item.setAttachments(new ArrayList<Attachment>());
					draftQuote.getQuoteItems().add(newItem);
				}
		}

		catch(Exception e)
        {
			LOGGER.log(Level.SEVERE, "Exception in Quote : "+draftQuote.getId()+" , Exception Message : "+e.getMessage(), e);
        }
		return draftQuote;
	}

	/*
	 * Compare the data
	 */
	public boolean compareCurrentPageAndDraft() {
		LOGGER.fine("call | compareCurrentPageAndDraft");
		Quote quo = getProgDraftRfqFromCurretnPage();
		Quote draftQuote = getSelectedRfqDraftQuote();
		if (quo.equals(draftQuote)) {
			return true;
		}
		return false;
	}

	public List<Material> getSelectedRfqDraft() {
		LOGGER.fine("call | getSelectedRfqDraft");
		List<Material> draftMList = new ArrayList<Material>();

		Quote tempQuote = getSelectedRfqDraftQuote();

		if (tempQuote != null && tempQuote.getQuoteItems() != null && tempQuote.getQuoteItems().size() > 0) {
			List<QuoteItem> progDraftList = tempQuote.getQuoteItems();
			if (null != progDraftList) {
				// transfer quote item to program materials
				for (QuoteItem item : progDraftList) {
					// Delinkage change on Oct 29 , 2013 by Tonmy
					// draftMList.add(item.getRequestedMaterial());
					draftMList.add(programMaterialSB.findExactMaterialByQuoteItem(item, bizUnit));
				}
			}
		}
		return draftMList;
	}

	public Quote getSelectedRfqDraftQuote() {
		LOGGER.fine("call getSelectedRfqDraftQuote");
		Quote tempQuote = quoteSB.getProgDraftRfq(user, bizUnit);
		// Delinkage change on Oct 30 , 2013 by Tonmy
		if (tempQuote != null && tempQuote.getQuoteItems() != null && tempQuote.getQuoteItems().size() > 0) {
			List<QuoteItem> tempQuoteItem = new ArrayList<QuoteItem>();
			for (QuoteItem qi : tempQuote.getQuoteItems()) {
				qi.setRequestedMaterialForProgram(getMaterial(qi));
				ProgramPricer pm = getProgramMaterialByCostIndicatorAndBizUnit(qi.getRequestedMaterialForProgram(),
						qi);
				if (pm != null) {
					qi.setRequestedProgramMaterialForProgram(pm);
					tempQuoteItem.add(qi);
				}
			}
			tempQuote.setQuoteItems(tempQuoteItem);
		}
		if (tempQuote != null) {
			if (tempQuote.getSoldToCustomer() == null) {
				Customer cust = new Customer();
				cust.setCustomerNumber(EMPTY_STR);
				cust.setCustomerName1(EMPTY_STR);
				tempQuote.setSoldToCustomer(cust);
			}
			if (tempQuote.getSales() == null) {
				User u = new User();
				u.setEmployeeId(EMPTY_STR);
				u.setName(EMPTY_STR);
				tempQuote.setSales(u);
				// WebQuote 2.2 enhancement. 6.1.1 part 2.
				Team tempTeam = new Team();
				tempTeam.setName(EMPTY_STR);
				tempQuote.setTeam(tempTeam);
			}

		}

		return tempQuote;
	}

	/*
	 * remove program rfq draft
	 */
	public void removeProgRfqDraft() {
		quoteSB.removeProgDraftRfq(user, bizUnit);
	}

	protected void copyQuote() {

		quoteInitialCopy = new Quote();
		// Mandatory fields
		if (quote.getSoldToCustomer() != null) {
			quoteInitialCopy.setSoldToCustomer(quote.getSoldToCustomer());
			Customer customerT = customerSB.findByPK(quote.getSoldToCustomer().getCustomerNumber());
			if (customerT == null) {
				Customer cust = new Customer();
				cust.setCustomerNumber(EMPTY_STR);
				cust.setCustomerName1(EMPTY_STR);
				quoteInitialCopy.setSoldToCustomer(cust);
			} else {
				quoteInitialCopy.setSoldToCustomer(customerT);
			}
		}

		if (quote.getSales() != null) {
			quoteInitialCopy.setSales(quote.getSales());
			// WebQuote 2.2 enhancement. 6.1.1 part 2.
			quoteInitialCopy.setTeam(quote.getTeam());
		}

		if (quote.getRemarksToCustomer() != null)
			quoteInitialCopy.setRemarksToCustomer(quote.getRemarksToCustomer());
		quoteInitialCopy.setQuoteItems(new ArrayList<QuoteItem>());
		if (quote.getQuoteItems() != null && quote.getQuoteItems().size() > 0)
			for (int i = 0; i < quote.getQuoteItems().size(); i++) {
				QuoteItem item = quote.getQuoteItems().get(i);
				QuoteItem newItem = new QuoteItem();

				// Delinkage change on Oct 29 , 2013 by Tonmy
				// newItem.setRequestedMaterial(item.getRequestedMaterial());
				newItem.setRequestedMfr(item.getRequestedMfr());
				newItem.setRequestedPartNumber(item.getRequestedPartNumber());
				newItem.setRequestedMaterialForProgram(item.getRequestedMaterialForProgram());
				// PROGRM PRICER ENHANCEMENT
				newItem.setRequestedProgramMaterialForProgram(item.getRequestedProgramMaterialForProgram());
				newItem.setQuotedMfr(item.getRequestedMfr());
				newItem.setQuotedPartNumber(item.getRequestedPartNumber());
				newItem.setQuotedMaterial(item.getRequestedMaterialForProgram());

				newItem.setMpq(item.getMpq());
				newItem.setMoq(item.getMoq());
				newItem.setRequestedQty(item.getRequestedQty());
				newItem.setTargetResale(item.getTargetResale());
				newItem.setRemarks(item.getRemarks());
				newItem.setAttachments(item.getAttachments());
				newItem.setQuote(quoteInitialCopy);
				if (newItem.getAttachments() == null)
					item.setAttachments(new ArrayList<Attachment>());
				quoteInitialCopy.getQuoteItems().add(newItem);
			}
	}

	protected void restoredQuote() {

		quote = new Quote();
		// Mandatory fields
		if (quoteInitialCopy.getSoldToCustomer() != null) {
			quote.setSoldToCustomer(quoteInitialCopy.getSoldToCustomer());
			Customer customerT = customerSB.findByPK(quoteInitialCopy.getSoldToCustomer().getCustomerNumber());
			if (customerT == null) {
				Customer cust = new Customer();
				cust.setCustomerNumber(EMPTY_STR);
				cust.setCustomerName1(EMPTY_STR);
				quote.setSoldToCustomer(cust);
			} else {
				quote.setSoldToCustomer(customerT);
			}
		}

		if (quoteInitialCopy.getSales() != null) {
			quote.setSales(quoteInitialCopy.getSales());
			// WebQuote 2.2 enhancement. 6.1.1 part 2.
			quote.setTeam(quoteInitialCopy.getTeam());
		}
		if (quoteInitialCopy.getRemarksToCustomer() != null)
			quote.setRemarksToCustomer(quoteInitialCopy.getRemarksToCustomer());
		quote.setQuoteItems(new ArrayList<QuoteItem>());
		if (quoteInitialCopy.getQuoteItems() != null && quoteInitialCopy.getQuoteItems().size() > 0)
			for (int i = 0; i < quoteInitialCopy.getQuoteItems().size(); i++) {
				QuoteItem item = quoteInitialCopy.getQuoteItems().get(i);
				QuoteItem newItem = new QuoteItem();

				// Delinkage change on Oct 29 , 2013 by Tonmy
				// newItem.setRequestedMaterial(item.getRequestedMaterial());
				newItem.setRequestedMfr(item.getRequestedMfr());
				newItem.setRequestedPartNumber(item.getRequestedPartNumber());
				newItem.setRequestedMaterialForProgram(item.getRequestedMaterialForProgram());
				newItem.setQuotedMfr(item.getRequestedMfr());
				newItem.setQuotedPartNumber(item.getRequestedPartNumber());
				newItem.setQuotedMaterial(item.getRequestedMaterialForProgram());

				newItem.setMpq(item.getMpq());
				newItem.setMoq(item.getMoq());
				newItem.setRequestedQty(item.getRequestedQty());
				newItem.setTargetResale(item.getTargetResale());
				newItem.setRemarks(item.getRemarks());
				newItem.setAttachments(item.getAttachments());
				newItem.setQuote(quote);
				if (newItem.getAttachments() == null)
					item.setAttachments(new ArrayList<Attachment>());
				quote.getQuoteItems().add(newItem);
			}

	}

	/*******************************************************
	 * 
	 * Below are actions , which will be call by UI directly .
	 * 
	 * *****************************************************
	 */

	/*
	 * Quote the selected item.
	 */
	public void quoteNowAction(ActionEvent event) {
		LOGGER.fine("call |  quoteNowAction");
		ProgramPricer selectedProgramMaterial = (ProgramPricer) event.getComponent().getAttributes()
				.get("selectedProgramMaterial");
		QuoteItem qi = new QuoteItem();
		qi.setMpq(selectedProgramMaterial.getMpq());
		qi.setMoq(selectedProgramMaterial.getMoq());
		// Delinkage change on Oct 29 , 2013 by Tonmy
		// qi.setRequestedMaterial(selectedProgramMaterial.getMaterial());
		qi.setRequestedMfr(selectedProgramMaterial.getMaterial().getManufacturer());
		qi.setRequestedPartNumber(selectedProgramMaterial.getMaterial().getFullMfrPartNumber());
		qi.setRequestedMaterialForProgram(getMaterial(qi));
		qi.setRequestedProgramMaterialForProgram(selectedProgramMaterial);
		qi.setQuotedMfr(selectedProgramMaterial.getMaterial().getManufacturer());
		qi.setQuotedPartNumber(selectedProgramMaterial.getMaterial().getFullMfrPartNumber());
		qi.setQuotedMaterial(getMaterial(qi));

		quote = initialQuote();
		qi.setQuote(quote);
		quote.getQuoteItems().add(qi);

		copyQuote();

		submitType = 1;
		geneExChangeCurrencyLst(); // added by June for RMB project 20140707
		RequestContext.getCurrentInstance().execute("PF('submitRfqDialog').show()");

	}

	private void geneExChangeCurrencyLst() {
		// added by June for project RMB cur to initilise exchange currency pull
		// downmenu
		List<String> currencyLst = exChangeRateSB.findAllExCurrencyByBu(this.bizUnit.getName());
		exCurrencyList = QuoteUtil.createFilterOptions(currencyLst.toArray(new String[currencyLst.size()]),
				currencyLst.toArray(new String[currencyLst.size()]), false, false);

		ExcCurrencyDefault defaultCurrency = exChangeRateSB.findDefaultCurrencyByBu(bizUnit.getName());
		if (null != defaultCurrency)
			exCurrency = defaultCurrency.getCurrency();

	}

	/*
	 * this method will be called by CommodityMB. go to commodity submission
	 * page.
	 */
	public void submitAllRfqAction(ProgramPricer[] selectedProgramMaterials) {
		LOGGER.fine("call | ProgRfqSubmitMB |  submitAllRfqAction");
		// Get program material from target list;
		HashMap<Long, ProgramPricer> targetList = SessionHelper.getSelectedRfqMap();
		// Get program rfq draft
		Quote quoteDraft = getSelectedRfqDraftQuote();

		Quote tempQuote = joinTargetListAndDraft(selectedProgramMaterials, targetList, quoteDraft);
		quote = tempQuote;

		copyQuote();

		submitType = 2;
		RequestContext.getCurrentInstance().execute("PF('submitRfqDialog').show()");

	}

	/*
	 * When user click on the delete button on the rfq item . it will trigger
	 * this method.
	 * 
	 * @param: itemNumber. it is program material id.
	 */
	public void removeRfqItemAction() {
		LOGGER.fine("call | removeRfqItem itemNumber");
		List<QuoteItem> quoteItems = quote.getQuoteItems();
		List<QuoteItem> removeList = new ArrayList<QuoteItem>();
		removeList.add(selectedQuoteItem);
		quoteItems.removeAll(removeList);
		quote.setQuoteItems(quoteItems);
	}

	public void updateAttachmentAction(ActionEvent event) {
		LOGGER.fine("call | updateAttachment");
		ProgramPricer selectedProgramMaterial = (ProgramPricer) event.getComponent().getAttributes()
				.get("selectedPm");
		itemNumberForAttachment = selectedProgramMaterial.getId();
		List<QuoteItem> quoteItems = quote.getQuoteItems();
		for (QuoteItem item : quoteItems) {
			// Delinkage change on Oct 29 , 2013 by Tonmy
			// if(item.getRequestedMaterial().getProgramMaterial().getId()==selectedProgramMaterial.getId())
			// {
			// attachments = item.getAttachments();
			// break;
			// }
			// PROGRM PRICER ENHANCEMENT
			// if(item.getRequestedMaterialForProgram().getProgramMaterial().getId()==selectedProgramMaterial.getId())
			if (item.getRequestedProgramMaterialForProgram().getId() == selectedProgramMaterial.getId()) {
				attachments = item.getAttachments();
				break;
			}
		}
	}

	public void updateDownloadAttachment(int rowIndex) throws WebQuoteException {
		Attachment attachment = attachments.get(rowIndex);
		InputStream stream = null;
		byte[] bytes = attachment.getFileImage();
		if (bytes == null || !(bytes.length > 0)) {
			// modified by Yang,Lenon for read attachments from host
			// server(2015.12.31)
			String fileRootPath = sysConfigSB.getProperyValue(QuoteSBConstant.ATTACHMENT_ROOT_PATH);
			String realFilePath = fileRootPath + File.separator + attachment.getFilePath() + File.separator
					+ attachment.getFileNameActual();
			bytes = FileUtil.file2Byte(realFilePath);
		}
		// stream = new ByteArrayInputStream(bytes);
		String mimeType = DownloadUtil.getMimeType(attachment.getFileName());
		downloadAttachment = new DefaultStreamedContent(new ByteArrayInputStream(bytes), mimeType,
				attachment.getFileName());
	}

	/*
	 * update attachments
	 */
	public void uploadAttachmentAction(FileUploadEvent event) {
		LOGGER.fine("call | uploadAttachment");
		String message = null;
		try {
			// Check file size. Can't excess 2 M
			long fileSize = event.getFile().getSize();
			if (fileSize > 5 * 1024 * 1024) {
				message = ResourceMB.getText("wq.message.uplodAttchmntError");
				FacesMessage msg = new FacesMessage(FacesMessage.SEVERITY_ERROR, EMPTY_STR, message);
				FacesContext.getCurrentInstance().addMessage("messages_att", msg);
			} else {
				Attachment attachment = new Attachment();
				String fullFileName = event.getFile().getFileName();
				String fileName = fullFileName.substring(fullFileName.lastIndexOf("\\") + 1, fullFileName.length());
				attachment.setFileName(fileName);
				attachment.setFileImage(QuoteUtil.getUploadFileContent(event.getFile()));
				attachment.setType("RFQ Item Attachment");
				List<QuoteItem> quoteItems = quote.getQuoteItems();
				for (QuoteItem item : quoteItems) {
					// Delinkage change on Oct 29 , 2013 by Tonmy
					// if(item.getRequestedMaterial().getProgramMaterial().getId()==itemNumberForAttachment)
					// PROGRM PRICER ENHANCEMENT
					// if(item.getRequestedMaterialForProgram().getProgramMaterial().getId()==itemNumberForAttachment)
					if (item.getRequestedProgramMaterialForProgram().getId() == itemNumberForAttachment) {
						List<Attachment> attachmentsa = item.getAttachments();
						if (attachmentsa == null)
							attachmentsa = new ArrayList<Attachment>();
						attachmentsa.add(attachment);
						attachment.setQuoteItem(item);
						item.setAttachments(attachmentsa);
						quote.setQuoteItems(quoteItems);
						break;
					}
				}

				for (QuoteItem item : quoteItems) {
					// Delinkage change on Oct 29 , 2013 by Tonmy
					// PROGRM PRICER ENHANCEMENT
					// if(item.getRequestedMaterialForProgram().getProgramMaterial().getId()==itemNumberForAttachment)
					if (item.getRequestedProgramMaterialForProgram().getId() == itemNumberForAttachment) {
						break;
					}
				}
				message = ResourceMB.getText("wq.message.uploadMsg");
				FacesMessage msg = new FacesMessage(FacesMessage.SEVERITY_INFO, EMPTY_STR,
						event.getFile().getFileName() + message);
				FacesContext.getCurrentInstance().addMessage("growl_submit_target", msg);
			}

		} catch (Exception e) {
			LOGGER.log(Level.SEVERE, "Error occured while uploading attcahment with file name: "+event.getFile().getFileName()+", Reason for failure: "+MessageFormatorUtil.getParameterizedStringFromException(e), e);
			message = ResourceMB.getText("wq.exception.uploadAttchFail");
			FacesMessage msg = new FacesMessage(FacesMessage.SEVERITY_ERROR, EMPTY_STR, message);
			FacesContext.getCurrentInstance().addMessage("growl_submit_target", msg);
		}
	}

	public void resetAction() {
		LOGGER.fine("call | resetAction");
		restoredQuote();
		final String message = ResourceMB.getText("wq.message.resetSuccess");
		FacesMessage msg = new FacesMessage(FacesMessage.SEVERITY_INFO, EMPTY_STR, message);
		FacesContext.getCurrentInstance().addMessage("growl_submit_target", msg);
	}

	public void closeAction() {
		LOGGER.fine("call |  closeAction");
		RequestContext requestContext = RequestContext.getCurrentInstance();
		FacesMessage msg = null;
		// check whether have draft
		Quote draftQuote = getSelectedRfqDraftQuote();
		if (draftQuote == null) {
			requestContext.execute("PF('closeConfirmation').show()");
		} else {
			if (compareCurrentPageAndDraft()) {
				requestContext.execute("PF('submitRfqDialog').hide()");
				FacesContext ctx = FacesContext.getCurrentInstance();
				Object value = ctx.getApplication().getELResolver().getValue(ctx.getELContext(), null, "commodityMB");
				CommodityMB tempObj = ((CommodityMB) value);
				tempObj.updateSystemInfo();
			} else {
				requestContext.execute("PF('closeConfirmation').show()");
			}
		}

	}

	public void saveAsDraftAction() {
		LOGGER.fine("call | saveAsDraftAction");
		if (quote != null) {
			String message = null;
			List<QuoteItem> tempQis = quote.getQuoteItems();
			for (int i = 0; i < tempQis.size(); i++) {
				quote.getQuoteItems().get(i).setError(false);
			}

			SessionHelper.removeSelectedRfqMap();
			try {
				Quote quo = getProgDraftRfqFromCurretnPage();
				List<QuoteItem> tempItems = quo.getQuoteItems();
				for (QuoteItem item : tempItems) {
					// add action to quoteItem by damon@20160805
					item.setAction(ActionEnum.PROGRAM_RFQ_SUBMISSION_SAVE.name());
					item.setStage(QuoteSBConstant.QUOTE_STATE_PROG_DRAFT);
					if (item.getAttachments() != null && item.getAttachments().size() == 0) {
						item.setAttachments(null);
					}
				}
				if (EMPTY_STR.equalsIgnoreCase(quo.getSales().getEmployeeId())) {
					quo.setSales(null);
				}

				// WebQuote 2.2 enhancement. 6.1.1 part 2.
				if (EMPTY_STR.equalsIgnoreCase(quo.getTeam().getName())) {
					quo.setTeam(null);
				}

				if (EMPTY_STR.equalsIgnoreCase(quo.getSoldToCustomer().getCustomerNumber())) {
					quo.setSoldToCustomer(null);
				}
				quoteSB.saveProgDraftQuote(quo, user, bizUnit);

				message = ResourceMB.getText("wq.message.savedDraftSuccess");
				FacesMessage msg = new FacesMessage(FacesMessage.SEVERITY_INFO, EMPTY_STR, message);
				FacesContext.getCurrentInstance().addMessage("growl_submit_target", msg);

			} catch (Exception e) {
				LOGGER.log(Level.SEVERE, "Error occured while saving as draft, Reason for failure: "+MessageFormatorUtil.getParameterizedStringFromException(e), e);
				message = ResourceMB.getText("wq.message.errorSaveDraft");
				handleErrorMsg(message);
			}
		}
		}
    
    


	public void saveAsDraftActionForClose() {

		RequestContext requestContext = RequestContext.getCurrentInstance();
		saveAsDraftAction();
		requestContext.execute("PF('submitRfqDialog').hide()");
		FacesContext ctx = FacesContext.getCurrentInstance();
		Object value = ctx.getApplication().getELResolver().getValue(ctx.getELContext(), null, "commodityMB");
		CommodityMB tempObj = ((CommodityMB) value);
		tempObj.updateSystemInfo();

	}

	/*
	 * Program submit page. submit button will trigger this method.
	 */
	/*
	 * Submit the program rfq .
	 * 
	 * @param: int type : there are three types for program submit: 1> quote
	 * now. 2> submit rfq
	 */
	public void submitAction() {

		LOGGER.fine("call | submitAction quote: ");
		// INC0018723
		// Enhancement . trim the customer number before submission
		if (quote.getSoldToCustomer() != null) {
			if (quote.getSoldToCustomer().getCustomerNumber() != null) {
				quote.getSoldToCustomer().setCustomerNumber(quote.getSoldToCustomer().getCustomerNumber().trim());
			}
		}
		RequestContext requestContext = RequestContext.getCurrentInstance();
		boolean isCheckedSale = false;
		boolean isContinue = true;
		if (salesmanListForCsPanelDisplay == true || salesmanListForQcPanelDisplay == true
				|| salesmanListForInsideSalesDisplay == true) {
			isCheckedSale = true;
		}
		ValidateError error = ValidateHelper.validate(quote, isCheckedSale);
		if (error.isHasError()) {
			Map<Long, Integer> issueRows = error.getIssueRows();
			List<QuoteItem> tempQis = quote.getQuoteItems();
			for (int i = 0; i < tempQis.size(); i++) {
				QuoteItem tempQi = tempQis.get(i);
				// Delinkage change on Oct 29 , 2013 by Tonmy
				// if(issueRows.get(new
				// Long(tempQi.getRequestedMaterial().getProgramMaterial().getId()))!=null)
				// PROGRM PRICER ENHANCEMENT
				// if(issueRows.get(new
				// Long(tempQi.getRequestedMaterialForProgram().getProgramMaterial().getId()))!=null)
				if (issueRows.get(new Long(tempQi.getRequestedProgramMaterialForProgram().getId())) != null) {
					quote.getQuoteItems().get(i).setError(true);
				} else {
					quote.getQuoteItems().get(i).setError(false);
				}

			}
			FacesMessage msg = new FacesMessage(FacesMessage.SEVERITY_ERROR, EMPTY_STR, error.getErroeMsg());
			FacesContext.getCurrentInstance().addMessage("messages_submit_target", msg);
					} 
					else 
					{
        		    if(isCheckedSale)
        		    {
	        		    	
	    						User userTemp = userSB.findByEmployeeIdLazily(quote.getSales().getEmployeeId());
	    						if (userTemp == null)
	    						{
	    							isContinue = false;
					FacesMessage msg = new FacesMessage(FacesMessage.SEVERITY_ERROR, ResourceMB.getText("wq.message.invalidSalesmanError"),
							ResourceMB.getText("wq.message.invalidSalesNumError") + quote.getSales().getEmployeeId());
					FacesContext.getCurrentInstance().addMessage("messages_submit_target", msg);
	    						}
	    						else if (!QuoteUtil.isEmpty(quote.getSales().getName())
	    								&& !quote.getSales().getName().equals(
	    										userTemp.getName()))
	    						{
	    						isContinue = false;
					FacesMessage msg = new FacesMessage(FacesMessage.SEVERITY_ERROR, ResourceMB.getText("wq.message.invalidSalesmanError"),
							ResourceMB.getText("wq.message.salesmanNumbrError") + quote.getSales().getName() + ResourceMB.getText("wq.message.salesmanNotMatchError"));
					FacesContext.getCurrentInstance().addMessage("messages_submit_target", msg);
	    						}
        		    }
        		    
        		    if(isContinue)
        		    {
        		    	
        		    
		    		    	List<Long> idList = programMaterialSB.searchExistPM(quote.getQuoteItems(),bizUnit);
		         		    ValidateError error2 = ValidateHelper.validateExistPI(quote,idList);
		         		    if(error2.isHasError())
		                 	{
		         	        		Map<Long,Integer> issueRows = error2.getIssueRows();
		         	        		List<QuoteItem> tempQis = quote.getQuoteItems();
		         	        		for(int i =0 ; i <tempQis.size() ; i ++)
		         	        		{
		         	        			QuoteItem tempQi = tempQis.get(i);
		         	        			// Delinkage change on Oct 29 , 2013 by Tonmy
		         	        			//if(issueRows.get(new Long(tempQi.getRequestedMaterial().getProgramMaterial().getId()))!=null)
		         	        			//PROGRM PRICER ENHANCEMENT
		         	        			//if(issueRows.get(new Long(tempQi.getRequestedMaterialForProgram().getProgramMaterial().getId()))!=null)
		         	        			if(issueRows.get(new Long(tempQi.getRequestedProgramMaterialForProgram().getId()))!=null)
		         	        			{
		         	        				quote.getQuoteItems().get(i).setError(true);
		                     			}
		                     			else
		                     			{
		                     				quote.getQuoteItems().get(i).setError(false);
		                     			}
		         	        			
		         	        		}	
		             	    		FacesMessage msg = new FacesMessage(FacesMessage.SEVERITY_ERROR, EMPTY_STR, error2.getErroeMsg());   
		             	            FacesContext.getCurrentInstance().addMessage("messages_submit_target", msg);   
		                 	}
		         		    else
		         		    {
		         		    	
		         		    
		         		    
		 		        		    List<QuoteItem> tempQis = quote.getQuoteItems();
		 			        		for(int i =0 ; i <tempQis.size() ; i ++)
		 			        		{
		 			        			quote.getQuoteItems().get(i).setError(false);
		 			        		}
		 			        		Quote submitedQuote = null;
									final String errorMsgSubmit=ResourceMB.getText("wq.message.errorMsgSubmit");
		 		    				try
		 		    				{
		 			    					
		 		    					    ut.begin();
		 		    					    submitedQuote = quote;
		 		    	    				
		 		    	    				// it is CS. will fill up the copyToCS.
		 		    	    				if(salesmanListForCsPanelDisplay)
		 		    	    				{
		 		    	    					//Material restructure and quote_item delinkage. changed on 18 Apr 2014.
		 		    	    					submitedQuote.setCopyToCS(user.getEmployeeId()+";");
		 		    	    					submitedQuote.setCopyToCsName(user.getName()+";");
		 		    	    				}
		 		    	    				if(!salesmanListForQcPanelDisplay && !salesmanListForCsPanelDisplay && !salesmanListForInsideSalesDisplay)
		 		    	    				{
		 		    	    					//No qc role
		 		    	    					submitedQuote.setSales(user);
		 		    	    				}
		 		    	    				//Default value
		 		    	    				submitedQuote.setBizUnit(bizUnit);
		 		    	    				//WebQuote 2.2 enhancement :  fields changes.
		 		    	    				//submitedQuote.setBomFlag(false);
		 		    	    				//Material restructure and quote_item delinkage. changed on 10 Apr 2014.
		 		    	    				submitedQuote.setCreatedBy(user.getEmployeeId());
		 		    	    				submitedQuote.setCreatedName(user.getName());
		 		    	    				submitedQuote.setCreatedOn(DateUtils.getCurrentAsiaDateObj());
		 		    	    				//Fixed the issue 1543 and 1548 on Feb 24, 2014
		 		    	    				//submitedQuote.setUploadTime(DateUtils.getCurrentAsiaDateObj());
		 		    	    				submitedQuote.setSubmissionDate(DateUtils.getCurrentAsiaDateObj());
		 		    	    				
		 		    	    				submitedQuote.setLastUpdatedOn(DateUtils.getCurrentAsiaDateObj());
		 		    	    				//Material restructure and quote_item delinkage. changed on 10 Apr 2014.
		 		    	    				submitedQuote.setLastUpdatedBy(user.getEmployeeId());
		 		    	    				submitedQuote.setLastUpdatedName(user.getName());
		
		 		    	    				//INC0018065, INC0018819
		 		    	    				if(submitedQuote.getSoldToCustomer()!=null)
		 		    	    				{
		 		    	    					submitedQuote.setSoldToCustomerName(getCustomerFullName(submitedQuote.getSoldToCustomer()));
		 		    	    					submitedQuote.setSoldToCustomerNameChinese(retrieveCustomerChineseName(submitedQuote.getSoldToCustomer()));
		 		    	    				}
		 		    	    				
		 		    	    				for(QuoteItem item : submitedQuote.getQuoteItems() )
		 		    	    				{
		 		    	    				    //added by June 20140707 for RMB cur Project
		 		    	    					item.setCurrFrom("USD"); 
		 		    	    					item.setCurrTo(exCurrency);
		 		    	    					//add action to quoteItem by damon@20160805
		 		    	    					item.setAction(ActionEnum.PROGRAM_RFQ_SUBMISSION_SUBMIT.name()); 
		 		    	    					// Delinkage change on Oct 29 , 2013 by Tonmy
		 		    	    					item.setRequestedMaterialForProgram(getMaterial(item));
		 		    	    					
		 		    	    					if(salesmanListForCsPanelDisplay || salesmanListForQcPanelDisplay || salesmanListForInsideSalesDisplay)
		 			    						{
		 			    						    item = ProgRfqSubmitHelper.setDefaultValue(submitedQuote, quote.getSales(), item);
		 				    	    				//added 20130628
		 			    						    if(quote.getSales()!=null && quote.getSales().getTeam()!=null)
		 			    						    {
		 				    	    					submitedQuote.setTeam(quote.getSales().getTeam());
		 			    						    }
		 			    						}
		 			    						else
		 			    						{
		 			    							item = ProgRfqSubmitHelper.setDefaultValue(submitedQuote, user, item);
		 			    							if(user.getTeam()!=null)
		 			    							{
		 			    								submitedQuote.setTeam(user.getTeam());
		 			    							}
		 			    							
		 			    						}
		 		    	    					if(ProgRfqSubmitHelper.checkAutoQuoteForItem(item))
		 		    	    					{
		 		    	    						item = ProgRfqSubmitHelper.processAutoQuoteItem(item);
		 		    	    					}
		 		    	    					else
		 		    	    					{
		 		    	    						//fixed issue 1580 . fill in some default values.
		 		    	    						item = setDefaultValueForNoAutoQuoteItem(item);
		 		    	    						
		 		    	    					}
		 		    	    					item = ProgRfqSubmitHelper.calculateMargin(item);
		 		    	    				}
		 		    	    				
		 		    	    				//Fixed issue 1570. if it is AQ update reference margin
		 		    	    				List<QuoteItem> tempQL = submitedQuote.getQuoteItems();
		 		    	    				tempQL = myQuoteSearchSB.updateReferenceMarginForSubmission(tempQL);
		 		    	    				submitedQuote.setQuoteItems(tempQL);
		 		    	    				
		 		    	    				
		 		    	    				//added by June for Project RMB cur 20140704
		 		    	    				quoteSB.updateRateForQuoteItems(submitedQuote.getQuoteItems(), true);
		 		    	    				
		 		    	    				quoteSB.submitProgramRfq(submitedQuote);
		 		     	    				//hidden the quote number for Sales and CS
		 			   	    				for(QuoteItem item : submitedQuote.getQuoteItems())
		 			   	    				{
		 			   	    					if(QuoteSBConstant.QUOTE_STAGE_PENDING.equalsIgnoreCase(item.getStage()))
		 			   	    					{
		 			   	    						if(rfqOperationPanelDisplay && !salesmanListForQcPanelDisplay)
		 			   	    						{
		 			   	    							item.setHiddenWR(true);
		 			   	    						}
		 			   	    					}
		 			   	    				}
		 		    	    				// clear the session or draft data.
		 		    	    				switch(submitType)
		 		    	    				{
		 		    	    					case 1: 	
		 		    	    					    // Quote now . nothing to do.
		 		    	    					    break;
		 		    	    					case 2:
		 		    	    						// submit rfq , clear target list, clear draft;
		 		    	    						SessionHelper.removeSelectedRfqMap();
		  		    	    						break;
		 		    	    				} 
		 		    	    				
		 		    	    				
		 		    	    				
		 			   	    				standTermsAndCons= ProgRfqSubmitHelper.standardTermsCondition;
		 			   	    				specTermsAndCons = ProgRfqSubmitHelper.getSpecialTermsAndConditions(submitedQuote.getQuoteItems());
		 			   	    				tempSTList = ProgRfqSubmitHelper.copyList(specTermsAndCons);
		 			   	    				
		 			   	    				
		 			   	    				for (QuoteItem item : submitedQuote.getQuoteItems()) 
		 			    					{
		 			   	    					if(StringUtils.isEmpty(item.getTermsAndConditions()))
		 			    						{
		 			    							continue;
		 			    						}
		 			   	    					
		 			   	    					if(specTermsAndCons!=null && specTermsAndCons.size()>0)
		 			   	    					{
		 			   	    						for(int i = 1 ; i < specTermsAndCons.size(); i++)
		 				    						{
		 				    							String temp = specTermsAndCons.get(i);
		 				    							String conditionStr = temp.substring(2,temp.length());
		 				    							String termsStr = temp.substring(0,1);
		 				    							if(item.getTermsAndConditions().equals(conditionStr))
		 				    							{
		 				    								item.setTermsAndConditions("Please refer to Special T&C "+ termsStr);
		 				    							}
		 				    						}
		 			   	    					}
		 			    						
		 			    					 }
		 		   	    				 
		 			   	    				//specTermsAndCons = ProgRfqSubmitHelper.getFormatSpecialTermsAndConditions(specTermsAndCons);
		 			   	    			
		 		
		 			   	    				
		 		    	    				// Send auto quote.
		 		    	    				if(ProgRfqSubmitHelper.isAutoQuote(submitedQuote))
		 		    	    				{
		 		    	    		    	    processAutoQuote(submitedQuote);
		 		    	    				}
		 		    	    				submittedQuote = submitedQuote;
		 		
		 		    	    				
		 		    	    				//Close submit page. display result page.
		 		    	    				 requestContext.execute("PF('submitRfqDialog').hide()");
		 		    	    				
		 		    	    					
		 			    					 resultQuote = submitedQuote;
		 		    	    		         requestContext.update("form_result:resultHeaderPanel");
		 		    	    		         requestContext.update("form_result:resultTable"); 
		 		    	    		         requestContext.update("form_result:standardTermsAndConsTable"); 
		 		    	    		         requestContext.update("form_result:specialTermsAndConsTable"); 
		 		    	    		         requestContext.execute("PF('submitRfqResultDialog').show()");
		 		    	    		         
		 		    	    		         ut.commit();
		 		    				}
		 		    				catch(IllegalArgumentException|ParseException|IOException|ClassNotFoundException|NotSupportedException|SystemException|SecurityException|IllegalStateException|RollbackException|HeuristicMixedException e20)
		 		    				{
		 		    				

		 		    					LOGGER.log(Level.SEVERE, "Exception in quote : "+quote.getId()+" , Exception Message"+e20.getMessage(), e20);
		 								try
		 		    		        	{
		 		    					    ut.rollback();
		 		    		        	}
		 		    		        	catch(Exception e1)
		 		    		        	{
		 		    		        		LOGGER.log(Level.SEVERE, "Exception in quote : "+quote.getId()+" , Exception Message"+e1.getMessage(), e1);
		 		    		        	}
		 								handleErrorMsg(e20.getMessage());
		 		    				}
		 		    				catch (Exception e9) {
		 		    					LOGGER.log(Level.SEVERE, "Exception in quote : "+quote.getId()+" , Exception Message"+e9.getMessage(), e9);
		 								try
		 		    		        	{
		 		    					    ut.rollback();
		 		    		        	}
		 		    		        	catch(Exception e1)
		 		    		        	{
		 		    		        		LOGGER.log(Level.SEVERE, "Exception in quote : "+quote.getId()+" , Exception Message"+MessageFormatorUtil.getParameterizedStringFromException(e1), e1);
		 		    		        	}
		 								handleErrorMsg(errorMsgSubmit);
		 							}
		 		    				finally
		 		    				{
		
		 	    	    				//Create SAP quote.
		 		    					try
		 		    					{
		 		    						createQuoteToSoForAQ(submitedQuote.getQuoteItems(), bizUnit);
		 		    					}
		 	    	    				catch(Exception e)
		 	    	    				{
		 	    	    					LOGGER.log(Level.SEVERE, "Exception in quote : "+quote.getId()+" , Exception Message"+MessageFormatorUtil.getParameterizedStringFromException(e), e);
		 	    	    				}
		 		    				}
		 		    				
		         		    }
         		    }
        	
        		   
        	}
    		

				}
    /*
     * Result page. download the quotation.
     */
    public StreamedContent getFile() throws WebQuoteException 
    {
    	    LOGGER.fine("call | DownloadAction");   
    	 
    	    StreamedContent file = null;
    	    File xlsFile = null;
    	    FileOutputStream fileOut = null;
    	    FileInputStream fileIn = null;
	    	try
	    	{
	    		HSSFWorkbook hw = getQuoteTemplateBySoldTo(submittedQuote, tempSTList);
	    		String tempPath = sysConfigSB.getProperyValue(QuoteConstant.TEMP_DIR);
	    		String fileName = tempPath + "Quotation.xls";
	    		xlsFile = new File(fileName);
	    		fileOut = new FileOutputStream(xlsFile);
	    		hw.write(fileOut);
	    		fileIn =  new FileInputStream(xlsFile);
	    		file = new DefaultStreamedContent(fileIn,  "application/vnd.ms-excel" , fileName);
	    				
		    }    
			catch (IOException ex)
			{
				FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,
						 ResourceMB.getText("wq.message.downloadfail")+".", ""));
		    	throw new WebQuoteException(ex);

			}
		    
		    finally
			{
	
		    	if(fileOut!=null)
			    	fileOut=null;
		    	if(fileIn!=null)
		    		fileIn=null;
		    	if(xlsFile!=null)
		    	{
		    		if(xlsFile.exists())
		    			xlsFile.delete();
		    	}
			}
		

		return file;
	}

	/*
	 * For Cusotmer part
	 */

	public void createProspectiveCustomerWithForcing() {
		try {
			createProspectiveCustomer("Y");
		} catch (CheckedException e) {
			LOGGER.log(Level.WARNING,MessageFormatorUtil.getParameterizedStringFromException(e));
			handleErrorMsg(e.getMessage());
		}
	}

	public void createProspectiveCustomerWithoutForcing() {
		try {

			boolean isAllowInput = true;
			String allowFieldName = "";

			if (!QuoteUtil.isEmpty(this.newProspectiveCustomerAddress3)) {
				char[] dataArray = this.newProspectiveCustomerAddress3.toCharArray();
				for (char ss : dataArray) {
					if (!QuoteConstant.ALLOW_CHARACTER.contains(String.valueOf(ss))) {
						isAllowInput = false;
						allowFieldName = ResourceMB.getText("wq.label.address");
						break;
					}
				}
			}

			if (!QuoteUtil.isEmpty(this.newProspectiveCustomerCity)) {
				char[] dataArray = this.newProspectiveCustomerCity.toCharArray();
				for (char ss : dataArray) {
					if (!QuoteConstant.ALLOW_CHARACTER.contains(String.valueOf(ss))) {
						isAllowInput = false;
						allowFieldName = ResourceMB.getText("wq.label.city");
						break;
					}
				}
			}

			if (!QuoteUtil.isEmpty(this.newProspectiveCustomerName1)) {
				char[] dataArray = this.newProspectiveCustomerName1.toCharArray();
				for (char ss : dataArray) {
					if (!QuoteConstant.ALLOW_CHARACTER.contains(String.valueOf(ss))) {
						isAllowInput = false;
						break;
					}
				}
			}
			String message = null;
			if (isAllowInput) {

				String errorMsg = "";
				
				errorMsg = ejbCommonSB.validationMessage(message, errorMsg, newProspectiveCustomerName1,
						newProspectiveCustomerCountry, newProspectiveCustomerCity, newProspectiveCustomerSalesOrg);
				
				LOGGER.log(Level.INFO, "this.newProspectiveCustomerName1 = " + this.newProspectiveCustomerName1);
				LOGGER.log(Level.INFO, "this.newProspectiveCustomerCountry = " + this.newProspectiveCustomerCountry);
				LOGGER.log(Level.INFO, "this.newProspectiveCustomerCity = " + this.newProspectiveCustomerCity);
				LOGGER.log(Level.INFO, "this.newProspectiveCustomerSalesOrg = " + this.newProspectiveCustomerSalesOrg);
				LOGGER.log(Level.INFO, "errorMsg = " + errorMsg);

				if (this.newProspectiveCustomerAddress3 != null && this.newProspectiveCustomerAddress3.length() > 35) {
					message =ResourceMB.getText("wq.message.addrLenError");
					FacesMessage msg = new FacesMessage(FacesMessage.SEVERITY_ERROR, "",
							message);
					FacesContext.getCurrentInstance().addMessage("newProspectiveCustomerGrowl", msg);
				} else {
					if(errorMsg.length() > 0)
					{
						message =ResourceMB.getText("wq.message.mandFieldError");
			            FacesMessage msg = new FacesMessage(FacesMessage.SEVERITY_ERROR, message, errorMsg);
			            FacesContext.getCurrentInstance().addMessage("newProspectiveCustomerGrowl", msg);			
					} else {				
						newProspectiveCustomerDuplicated = false;
						createProspectiveCustomer(null);
						RequestContext requestContext = RequestContext.getCurrentInstance();
						requestContext.execute("PF('customer_confirmation_dialog').show()");
					}
				
				}
			}
			else
			{    
				message =ResourceMB.getParameterizedString("wq.message.fieldValidtnError",allowFieldName);
				FacesMessage msg = new FacesMessage(FacesMessage.SEVERITY_ERROR,"", 
						message);
					FacesContext.getCurrentInstance().addMessage("newProspectiveCustomerGrowl",
							msg);
			}
    	}
    	catch(CheckedException e)
    	{
    		LOGGER.log(Level.SEVERE, "Error occured while creating new customer with name: "+this.newProspectiveCustomerName1+", "
    				+ "city: "+this.newProspectiveCustomerCity+", country: "+this.newProspectiveCustomerCountry+", "
    						+ "Sales org: "+this.newProspectiveCustomerSalesOrg+", Reason for failure: "+MessageFormatorUtil.getParameterizedStringFromException(e), e);
    		handleErrorMsg(e.getMessage());
    	}	
	}	
	public void changeCityByCountry(){
		Country country = CountryCacheManager.getCountry(newProspectiveCustomerCountry);
		List<String> cityCodes = new ArrayList<String>();
		List<String> cityNames = new ArrayList<String>();
		if (country != null) {
			List<City> cities = citySB.findByCountry(country); // CityCacheManager.getCitiesByCountry(newProspectiveCustomerCountry);
			if (cities != null) {
				for (City city : cities) {
					cityCodes.add(city.getName());
					cityNames.add(city.getId());
				}
			}
		}
		citySelectList = QuoteUtil.createFilterOptions(cityCodes.toArray(new String[cityCodes.size()]),
				cityNames.toArray(new String[cityNames.size()]), false, false, true);
	}

	public void updateSoldToCustomerNumber() {
		quote.getSoldToCustomer().setCustomerNumber(
				extractCustomerNumberFromCustomerNameLabel(quote.getSoldToCustomer().getCustomerName1()));
		quote.getSoldToCustomer().setCustomerName1(
				extractCustomerNameFromCustomerNameLabel(quote.getSoldToCustomer().getCustomerName1()));
		Customer customerT = customerSB.findByPK(quote.getSoldToCustomer().getCustomerNumber());
		quote.setSoldToCustomer(customerT);

		if (customerT.getDeleteFlag().booleanValue())
			deleteCustomer = true;
		else
			deleteCustomer = false;

	}

	public String extractCustomerNameFromCustomerNumberLabel(String label) {
		String[] labels = label.split(QuoteConstant.AUTOCOMPLETE_SEPARATOR);
		if (labels.length == 1)
			return null;
		return labels[1].trim();
	}

	public String extractCustomerNumberFromCustomerNumberLabel(String label) {
		String[] labels = label.split(QuoteConstant.AUTOCOMPLETE_SEPARATOR);
		return labels[0].trim();
	}

	public String extractCustomerNumberFromCustomerNameLabel(String label) {
		String[] labels = label.split(QuoteConstant.AUTOCOMPLETE_SEPARATOR);
		if (labels.length == 1)
			return null;
		return labels[1].trim();
	}

	public String extractCustomerNameFromCustomerNameLabel(String label) {
		String[] labels = label.split(QuoteConstant.AUTOCOMPLETE_SEPARATOR);
		return labels[0].trim();
	}

	public void updateSoldToCustomerName() {
		// quote.getSoldToCustomer().setCustomerName1(extractCustomerNameFromCustomerNumberLabel(quote.getSoldToCustomer().getCustomerNumber()));
		if (!StringUtils.isEmpty(quote.getSoldToCustomer().getCustomerNumber())) {
			quote.getSoldToCustomer().setCustomerNumber(
					extractCustomerNumberFromCustomerNumberLabel(quote.getSoldToCustomer().getCustomerNumber()));
			Customer customerT = customerSB.findByPK(quote.getSoldToCustomer().getCustomerNumber());
			if (customerT != null) {
				quote.setSoldToCustomer(customerT);
				if (customerT.getDeleteFlag() != null && customerT.getDeleteFlag().booleanValue())
					deleteCustomer = true;
				else
					deleteCustomer = false;
			} else {
				Customer newCu = new Customer();
				newCu.setCustomerNumber(quote.getSoldToCustomer().getCustomerNumber());
				newCu.setCustomerName1("");
				quote.setSoldToCustomer(newCu);
			}
		} else {
			Customer newCu = new Customer();
			newCu.setCustomerNumber(quote.getSoldToCustomer().getCustomerNumber());
			newCu.setCustomerName1("");
			quote.setSoldToCustomer(newCu);
		}

	}

	public void validateSoldToCustomerName() {
		List<String> accountGroup = new ArrayList<String>();
		accountGroup.add(QuoteSBConstant.ACCOUNT_GROUP_SOLDTO);
		List<Customer> customers = customerSB.findCustomerByCustomerName(quote.getSoldToCustomer().getCustomerName1(),
				null, accountGroup, salesBizUnit);
		if (QuoteUtil.isEmptyCustomerList(customers)) {
			quote.getSoldToCustomer().setCustomerName1(null);
		}
	}

	public void searchCustomersAction() {
		searchCustomers = findCustomers(customerTypeSearch, customerNameSearch);
		if (searchCustomers != null) {
			List<String> customerNumbers = new ArrayList<String>();
			for (Iterator<Customer> itr = searchCustomers.iterator(); itr.hasNext();) {
				Customer customer = itr.next();
				if (customerNumbers.contains(customer.getCustomerNumber())) {
					itr.remove();
				} else {
					customerNumbers.add(customer.getCustomerNumber());
				}
			}
			searchCustomersCount = searchCustomers.size();
		}
	}

	/*
	 * CUSTOMER SOURCE CODE
	 */
	// =================================================================================================
	public void createProspectiveCustomer(String duplicate) throws CheckedException {
		javax.xml.ws.Holder<ZwqCustomer> eCustdtl = new javax.xml.ws.Holder<ZwqCustomer>();
		javax.xml.ws.Holder<java.lang.String> eKunnr = new javax.xml.ws.Holder<java.lang.String>();
		try {

			String address = "";
			if (newProspectiveCustomerAddress3 != null)
				address += newProspectiveCustomerAddress3;

			newProspectiveCustomerName2 = "";
			if (newProspectiveCustomerName1 != null
					&& newProspectiveCustomerName1.length() > QuoteConstant.CUSTOMER_NAME_LENGTH) {
				newProspectiveCustomerName2 = newProspectiveCustomerName1.substring(QuoteConstant.CUSTOMER_NAME_LENGTH);
				newProspectiveCustomerName1 = newProspectiveCustomerName1.substring(0,
						QuoteConstant.CUSTOMER_NAME_LENGTH);
			}

			sapWebServiceSB.createProspectiveCustomer(QuoteSBConstant.CREATE_CUSTOMER_TYPE_CUSTOMER,
					newProspectiveCustomerCity, duplicate, newProspectiveCustomerCountry, newProspectiveCustomerName1,
					newProspectiveCustomerName2, // name2
					"", // Postal code
					"", // Region
					"", // Search term
					"", // Division
					address, // Street
					"", // Sales office
					newProspectiveCustomerSalesOrg, // Sales Org
					"", "USD", // currency
					eCustdtl, eKunnr);
			if (eKunnr.value.equals("")) {
				newProspectiveCustomerDuplicated = true;
				ZwqCustomer existingCustomer = eCustdtl.value;
				
				duplicatedCustomerCode = existingCustomer.getKunnr();
				duplicatedCustomerName = existingCustomer.getName();
				duplicatedCustomerType = ejbCommonSB.existingCustomer(duplicatedCustomerCode, duplicatedCustomerName, duplicatedCustomerType,
						existingCustomer);
				
				duplicatedSalesOrg = existingCustomer.getVkorg();
				duplicatedCountry = existingCustomer.getLand();
				if (duplicatedCountry != null && !"".equalsIgnoreCase(duplicatedCountry)) {
					Country tempC = CountryCacheManager.getCountry(duplicatedCountry);
					if (tempC != null)
						duplicatedCountry = tempC.getName();
				}
				duplicatedCity = existingCustomer.getCity();
				if (!QuoteUtil.isEmpty(duplicatedCity)) {
					String[] cities = duplicatedCity.split(",");
					duplicatedCity = "";
					for (String city : cities) {
						City cityObj = citySB.findByPK(city.trim());
						if (cityObj != null) {
							duplicatedCity += cityObj.getName() + ",";
						} else {
							duplicatedCity += city.trim() + ",";
						}
					}
					if (duplicatedCity.length() > 0)
						duplicatedCity = duplicatedCity.substring(0, duplicatedCity.length() - 1);
				}
			} else {
				newProspectiveCustomerDuplicated = false;
				duplicatedCustomerCode = eKunnr.value.replaceFirst("^0+(?!$)", "");
				Customer customerTemp = new Customer();
				customerTemp.setCustomerNumber(duplicatedCustomerCode);
				customerTemp.setNewCustomerFlag(true);
				customerTemp.setCreatedOn(QuoteUtil.getCurrentTime());
				customerTemp.setAccountGroup(QuoteSBConstant.ACCOUNT_GROUP_PROSPECTIVE_CUSTOMER);
				customerTemp.setDeleteFlag(false);
				String customerName = "";
				if (newProspectiveCustomerName1 != null) {
					customerName += newProspectiveCustomerName1;
					customerTemp.setCustomerName1(newProspectiveCustomerName1);
				}
				if (newProspectiveCustomerName2 != null) {
					customerName += newProspectiveCustomerName2;
					customerTemp.setCustomerName2(newProspectiveCustomerName2);
				}

				CustomerSale customerSale = new CustomerSale();
				List<SalesOrg> salesOrgs = SalesOrgCacheManager.getSalesOrgByBizUnit(salesBizUnit.getName());
				for (SalesOrg salesOrg : salesOrgs) {
					if (salesOrg.getName().equals(newProspectiveCustomerSalesOrg))
						customerSale.setSalesOrgBean(salesOrg);
				}
				customerSale.setCreatedOn(QuoteUtil.getCurrentTime());
				customerSale.setLastUpdatedOn(QuoteUtil.getCurrentTime());

				CustomerSalePK customerSalePK = new CustomerSalePK();
				customerSalePK.setCustomerNumber(duplicatedCustomerCode);
				customerSalePK.setDistributionChannel(QuoteSBConstant.DEFAULT_DISTRIBUTION_CHANNEL);
				customerSalePK.setDivision(QuoteSBConstant.DEFAULT_DIVISION);
				customerSalePK.setSalesOrg(newProspectiveCustomerSalesOrg);
				customerSale.setId(customerSalePK);

				List<CustomerSale> customerSales = new ArrayList<CustomerSale>();
				customerSales.add(customerSale);

				customerTemp.setCustomerSales(customerSales);
				for (int m = 0; m < customerSales.size(); m++) {
					customerSales.get(m).setCustomer(customerTemp);
				}

				customerSB.createCustomer(customerTemp);
		    }			
		} 
	    catch (AppException e) 
		{
			throw new CheckedException(ResourceMB.getText("wq.exception.createNewCutmrFail"));

		}
	}

	public void updateCustomer() {
    {
		LOGGER.fine("call | updateCustomer");
    	if(this.selectedSearchCustomer != null)
    	{
    		quote.setSoldToCustomer(selectedSearchCustomer);
    		//not sure this, so note by damon@20160607
    		/*String customerName = this.selectedSearchCustomer.getCustomerName1();
    		if(this.selectedSearchCustomer.getCustomerName2()!=null)
    		{
    			customerName = customerName+this.selectedSearchCustomer.getCustomerName2();
    		}*/
    		//String customerName = this.selectedSearchCustomer.getCustomerFullName();
    		//quote.getSoldToCustomer().setCustomerName1(customerName);
    	}
    	resetCustomerSearch();  
    }
    }
    
    public void resetCustomerSearch(){
    	searchCustomersCount = 0;
    	searchCustomers = null;
    	customerTypeSearch = QuoteSBConstant.ALL;
    	customerNameSearch = null;
    }
    
	public String convertCustomerSalesToSalesOrg(List<CustomerSale> customerSales){
		String salesOrg = "";
		if (customerSales != null) {
			for (CustomerSale customerSale : customerSales) {
				if (salesOrg.length() > 0)
					salesOrg += QuoteConstant.SALES_ORG_SEPARATER;
				salesOrg += customerSale.getSalesOrgBean().getName();
			}
		}
		return salesOrg;
	}

	public String convertAccountGroupToName(String accountGroup) {
		return AccountGroupCacheManager.getAccountGroup(accountGroup);
	}

	public List<String> autoCompleteCustomerNameLabelList(List<Customer> customers) {
		List<String> list = null;
		if (customers != null) {
			list = new ArrayList<String>();
			List<String> dupList = new ArrayList<String>();
			for (Customer customer : customers) {
				if (customer != null) {
					if (!QuoteUtil.isEmpty(customer.getCustomerName1())
							&& !QuoteUtil.isEmpty(customer.getCustomerNumber())) {
						String customerName = getCustomerFullName(customer);
						String customerNumber = customer.getCustomerNumber();
						String salesOrg = convertCustomerSalesToSalesOrg(customer.getCustomerSales());
						String label = customerName + QuoteConstant.AUTOCOMPLETE_SEPARATOR + customerNumber
								+ QuoteConstant.AUTOCOMPLETE_SEPARATOR + salesOrg;

						if (!dupList.contains(label)) {
							list.add(label);
							dupList.add(label);
						}
					}
				}
			}
		}
		return list;
	}

	public List<String> autoCompleteCustomerNumberLabelList(String key) {
		List<String> accountGroup = new ArrayList<String>();
		accountGroup.add(QuoteSBConstant.ACCOUNT_GROUP_SOLDTO);
		List<Customer> customers = customerSB.findCustomerByCustomerNumberContain(key, null, accountGroup, salesBizUnit,
				QuoteConstant.DEFAULT_AUTOCOMPLETE_FIRST_RESULT, QuoteConstant.DEFAULT_AUTOCOMPLETE_MAX_RESULTS);
		List<String> list = new ArrayList<String>();
		List<String> dupList = new ArrayList<String>();
		for (Customer customer : customers) {
			String label = "";
			label += customer.getCustomerNumber();
			label += QuoteConstant.AUTOCOMPLETE_SEPARATOR;
			label += getCustomerFullName(customer);
			label += QuoteConstant.AUTOCOMPLETE_SEPARATOR;
			label += convertCustomerSalesToSalesOrg(customer.getCustomerSales());
			;
			if (!dupList.contains(label)) {
				list.add(label);
				dupList.add(label);
			}
		}
		return list;
	}

	public List<String> autoCompleteSoldToCustomerNameLabelList(String key) {
		List<String> accountGroup = new ArrayList<String>();
		accountGroup.add(QuoteSBConstant.ACCOUNT_GROUP_SOLDTO);
		List<Customer> customers = customerSB.findCustomerByCustomerNameContain(key, null, accountGroup, salesBizUnit,
				QuoteConstant.DEFAULT_AUTOCOMPLETE_FIRST_RESULT, QuoteConstant.DEFAULT_AUTOCOMPLETE_MAX_RESULTS);
		return autoCompleteCustomerNameLabelList(customers);
	}

	public List<Customer> findCustomers(String customerType, String customerName) {
		String message=null;

		if (customerName != null && !customerName.isEmpty() && customerName.length() < 3) {
			message =ResourceMB.getText("wq.message.cutmrLenError");
			FacesMessage msg = new FacesMessage(FacesMessage.SEVERITY_ERROR,
					message, "");
			FacesContext.getCurrentInstance().addMessage("message_customer_search_mandatory_is_empty", msg);
			return null;
		}

		if (QuoteUtil.isEmpty(customerName)) {
			String errorMessage = "";
			if (QuoteUtil.isEmpty(customerName))
				message =ResourceMB.getText("wq.message.cutmrLenError");
				errorMessage += message+", ";
				message =ResourceMB.getText("wq.message.mandFieldError");
			errorMessage = errorMessage.substring(0, errorMessage.length() - 2);
			FacesMessage msg = new FacesMessage(FacesMessage.SEVERITY_ERROR, message,
					errorMessage);
			FacesContext.getCurrentInstance().addMessage("message_customer_search_mandatory_is_empty", msg);
			return null;
		}

		List<String> accountGroup = new ArrayList<String>();
		accountGroup.add(QuoteSBConstant.ACCOUNT_GROUP_SOLDTO);
		accountGroup.add(QuoteSBConstant.ACCOUNT_GROUP_PROSPECTIVE_CUSTOMER);

		if (customerName.startsWith("*"))
			return customerSB.findCustomerByCustomerNameEndWith(customerName.replaceAll("\\*", ""), QuoteSBConstant.ALL,
					accountGroup, salesBizUnit);
		else if (customerName.endsWith("*"))
			return customerSB.findCustomerByCustomerNameStartWith(customerName.replaceAll("\\*", ""),
					QuoteSBConstant.ALL, accountGroup, salesBizUnit);
		else
			return customerSB.findCustomerByCustomerNameContain(customerName.replaceAll("\\*", ""), QuoteSBConstant.ALL,
					accountGroup, salesBizUnit);
	}

	public Quote joinTargetListAndDraft(ProgramPricer[] selectedProgramMaterials,
			HashMap<Long, ProgramPricer> targetList, Quote draftQuote) {

		LOGGER.fine("call joinTargetListAndDraft");
		Quote returnQuote = initialQuote();
		Set<Long> tempSet = new HashSet<Long>();

		if (draftQuote != null) {
			returnQuote = getProgramDraftQuoteCopy(draftQuote);

			List<QuoteItem> tempQuoteItemList = returnQuote.getQuoteItems();
			if (null != tempQuoteItemList && tempQuoteItemList.size() > 0) {
				for (QuoteItem item : tempQuoteItemList) {
					// Delinkage change on Oct 29 , 2013 by Tonmy
					// tempSet.add(new
					// Long(item.getRequestedMaterial().getProgramMaterial().getId()));
					// tempSet.add(new
					// Long(item.getRequestedMaterialForProgram().getProgramMaterial().getId()));
					// PROGRM PRICER ENHANCEMENT
					tempSet.add(new Long(item.getRequestedProgramMaterialForProgram().getId()));
				}
			}
		}

		if (selectedProgramMaterials.length > 0) {

			if (targetList == null) {
				targetList = new HashMap<Long, ProgramPricer>();
			}
			for (int i = 0; i < selectedProgramMaterials.length; i++) {
				ProgramPricer item = selectedProgramMaterials[i];
				ProgramPricer obj = (ProgramPricer) targetList.get(new Long(item.getId()));
				if (obj == null) {
					targetList.put(new Long(item.getId()), item);
				}

			}

		}

		if (targetList != null && targetList.size() > 0) {
			for (Long key : targetList.keySet()) {
				if (tempSet.size() > 0) {
					if (!tempSet.contains(new Long(targetList.get(key).getId()))) {
						returnQuote =commonJoinDraftList(returnQuote, targetList, key);
					}
				} else {
					returnQuote = commonJoinDraftList(returnQuote, targetList, key);	
				}
			}
		}

		return returnQuote;
	}

	private Quote commonJoinDraftList(Quote returnQuote,HashMap<Long, ProgramPricer> targetList ,Long key){
		ProgramPricer tempPm = targetList.get(key);
		QuoteItem newQ = new QuoteItem();
		// Delinkage change on Oct 29 , 2013 by Tonmy
		// newQ.setRequestedMaterial(tempPm.getMaterial());
		newQ.setRequestedMfr(tempPm.getMaterial().getManufacturer());
		newQ.setRequestedPartNumber(tempPm.getMaterial().getFullMfrPartNumber());
		newQ.setRequestedMaterialForProgram(getMaterial(newQ));
		// PROGRM PRICER ENHANCEMENT
		newQ.setRequestedProgramMaterialForProgram(tempPm);
		if (tempPm.getCostIndicator() != null) {
			newQ.setCostIndicator(tempPm.getCostIndicator().getName());
		}

		newQ.setQuotedMfr(tempPm.getMaterial().getManufacturer());
		newQ.setQuotedPartNumber(tempPm.getMaterial().getFullMfrPartNumber());
		newQ.setQuotedMaterial(getMaterial(newQ));

		newQ.setMoq(tempPm.getMoq());
		newQ.setMpq(tempPm.getMpq());
		newQ.setQuote(returnQuote);
		returnQuote.getQuoteItems().add(newQ);
		return returnQuote;
	}
	
	public void updateSalesman() {
		LOGGER.info("call updateSalesman");
		User user1 = null;
		String salesName = quote.getSales().getName();
		if (!EMPTY_STR.equalsIgnoreCase(salesName) && salesMap.get(salesName) != null) {
			user1 = salesMap.get(salesName);
		}

		if (user1 != null) {
			quote.setSales(user1);
			// WebQuote 2.2 enhancement. 6.1.1 part 2.
			quote.setTeam(user1.getTeam());
		} else {
			User u = new User();
			u.setEmployeeId(EMPTY_STR);
			u.setName(EMPTY_STR);
			quote.setSales(u);
			// WebQuote 2.2 enhancement. 6.1.1 part 2.
			Team tempTeam = new Team();
			tempTeam.setName(EMPTY_STR);
			quote.setTeam(tempTeam);
		}
	}

	public void resultCloseAction() {
		LOGGER.fine("call resultCancelAction");
		RequestContext requestContext = RequestContext.getCurrentInstance();
		requestContext.execute("PF('submitRfqResultDialog').hide()");
		FacesContext ctx = FacesContext.getCurrentInstance();
		Object value = ctx.getApplication().getELResolver().getValue(ctx.getELContext(), null, "commodityMB");
		CommodityMB tempObj = ((CommodityMB) value);
		tempObj.updateSystemInfo();
	}

	public HSSFWorkbook getQuoteTemplateBySoldTo(Quote quote, List<String> specialList) throws WebQuoteException {

		if (quote == null)
			throw new WebQuoteException(ResourceMB.getText("wq.exception.nullQuote"));
		Customer customerTemp = quote.getSoldToCustomer();
		if (customerTemp == null)
			throw new WebQuoteException(ResourceMB.getText("wq.exception.nullCustomer"));
		Customer customer = customerSB.findByPK(customerTemp.getCustomerNumber());
		if (customer == null)
			throw new WebQuoteException(ResourceMB.getText("wq.exception.customerNotFound"));
		quote.setSoldToCustomer(customer);
		HSSFWorkbook wb = null;
		SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
		if (quote != null) {
			wb = getHSSFWorkbook(quote.getBizUnit().getName());
			if(null==wb){
				throw new WebQuoteException(ResourceMB.getText("wq.message.downloadfail"));
			}
			HSSFSheet sheet = wb.getSheet("Quotation");
			HSSFFont normalStyle = wb.createFont();
			normalStyle.setFontHeightInPoints((short) 8);
			HSSFCellStyle style1 = wb.createCellStyle();
			style1.setWrapText(true);
			style1.setFillForegroundColor(HSSFColor.WHITE.index);
			style1.setFillPattern(CellStyle.SOLID_FOREGROUND);
			style1.setBorderLeft(HSSFCellStyle.BORDER_THIN);
			style1.setBorderRight(HSSFCellStyle.BORDER_THIN);
			style1.setBorderBottom(HSSFCellStyle.BORDER_THIN);
			style1.setBorderTop(HSSFCellStyle.BORDER_THIN);
			style1.setFont(normalStyle);
			style1.setAlignment(HSSFCellStyle.ALIGN_CENTER);

			// set latest exchange rate to excel ,
			// HSSFSheet sheet = wb.getSheet("Quotation");
			fillRateToXLS(quote, sheet); // added by June to get latest exchange
											// rate at

			for (int i = 0; i < 10; i++) {
				for (int j = 0; j <= QuoteConstant.QUOTE_TEMPLATE_HEADER_END; j++) {
					String position = QuoteUtil.convertExcelPositionToString(i, j);
					HSSFRow row = sheet.getRow(j);
					HSSFCell cell = row.getCell(i);
					switch (position) {
					case "E3":
						// Fixed the issue 1543 and 1548 on Feb 24, 2014
						if (quote.getSubmissionDate() != null)
							cell.setCellValue(sdf.format(quote.getSubmissionDate()));
						break;
					case "E5":
						cell.setCellValue(sdf.format(QuoteUtil.getCurrentTime()));
						break;
					case "F7":
						cell.setCellValue(quote.getFormNumber());
						break;
					case "H7":
						cell.setCellValue(quote.getYourReference());
						break;
					case "F8":
						cell.setCellValue(quote.getSales() == null ? null : quote.getSales().getName());
						break;
					case "H8":
						if (quote.getSales() != null && quote.getSales().getTeam() != null) {
							cell.setCellValue(quote.getSales().getTeam().getName());
						}
						break;
					case "J8":
						if (quote.getSales() != null) {
							cell.setCellValue(quote.getSales().getEmployeeId());
						}
						break;
					case "F9":
						if (quote.getSoldToCustomer() != null) {
							String customerName = quote.getSoldToCustomer().getCustomerFullName();
							/*
							 * if(quote.getSoldToCustomer().getCustomerName2()
							 * != null) customerName +=
							 * quote.getSoldToCustomer().getCustomerName2();
							 */
							cell.setCellValue(
									customerName + " (" + quote.getSoldToCustomer().getCustomerNumber() + ")");
						}
						break;
					case "F10":
						// cell.setCellValue();
						break;
					case "F11":
						// cell.setCellValue();
						break;
					case "F12":
						cell.setCellValue(quote.getSoldToCustomer().getCustomerType());
						break;
					case "H12":
						// cell.setCellValue();
						break;
					case "F13":
						// cell.setCellValue();
						break;
					case "H13":
						// cell.setCellValue();
						break;
					case "F14":
						// cell.setCellValue();
						break;
					case "F15":
						// cell.setCellValue();
						break;
					case "H15":
						// cell.setCellValue();
						break;
					case "F16":
						// cell.setCellValue();
						break;
					case "H16":
						// cell.setCellValue();
						break;
					case "F17":
						// cell.setCellValue();
						break;
					case "H17":
						// cell.setCellValue();
						break;
					case "F18":
						// cell.setCellValue();
						break;
					case "H18":
						// cell.setCellValue();
						break;
					case "F19":
						// cell.setCellValue();
						break;
					case "H19":
						// cell.setCellValue();
						break;
					case "I19":
						// cell.setCellValue();
						break;
					case "J19":
						// cell.setCellValue();
						break;
					case "F20":
						cell.setCellValue(quote.getRemarks());
						break;
					case "G20":
						// cell.setCellValue();
						break;
					case "F21":
						cell.setCellValue(quote.getRemarksToCustomer());
						break;
					case "G21":
						// cell.setCellValue();
						break;
					}
				}
			}
			List<QuoteItem> quoteItems = quote.getQuoteItems();
			if (quoteItems.size() > 1) {
				for (int i = 1; i < quoteItems.size(); i++) {
					QuoteUtil.copyRow(sheet, QuoteConstant.QUOTE_ITEM_ROW_START,
							QuoteConstant.QUOTE_ITEM_ROW_START + i);
				}
			}
			for (int i = 0; i < quoteItems.size(); i++) {
				QuoteItem quoteItem = quoteItems.get(i);
				HSSFRow row = sheet.getRow(QuoteConstant.QUOTE_ITEM_ROW_START + i);
				HSSFCell cellSequence = row.getCell(2);
				cellSequence.setCellValue("No." + (i + 1));

				HSSFCell cellQuoteNumber = row.getCell(3);
				HSSFCell cellFirstRfqCode = row.getCell(4);
				HSSFCell cellQuotedPartNumber = row.getCell(8);

				if (QuoteSBConstant.QUOTE_STAGE_PENDING.equalsIgnoreCase(quoteItem.getStage())) {
					cellQuoteNumber.setCellValue(EMPTY_STR);
					cellFirstRfqCode.setCellValue(EMPTY_STR);
					cellQuotedPartNumber.setCellValue(EMPTY_STR);
				} else {
					cellQuoteNumber.setCellValue(quoteItem.getQuoteNumber());
					cellFirstRfqCode.setCellValue(quoteItem.getFirstRfqCode());
					if (quoteItem.getQuotedMaterial() != null)
						cellQuotedPartNumber.setCellValue(quoteItem.getQuotedMaterial().getFullMfrPartNumber());
				}

				HSSFCell cellMfr = row.getCell(5);
				HSSFCell cellMfrName = row.getCell(6);
				// Delinkage change on Oct 29 , 2013 by Tonmy
				// if(quoteItem.getRequestedMaterial() != null){
				// cell_mfr.setCellValue(quoteItem.getRequestedMaterial().getManufacturer().getName());
				// }
				// HSSFCell cell_requestedPartNumber = row.getCell(6);
				// if(quoteItem.getRequestedMaterial() != null){
				// cell_requestedPartNumber.setCellValue(quoteItem.getRequestedMaterial().getFullMfrPartNumber());
				// }

				if (quoteItem.getRequestedMfr() != null) {
					cellMfr.setCellValue(quoteItem.getRequestedMfr().getName());
					String mfrDescription = quoteItem.getRequestedMfr().getDescription();
					if (mfrDescription != null) {
						String sub = quoteItem.getRequestedMfr().getName() + " ";
						if (mfrDescription.startsWith(sub)) {
							cellMfrName
									.setCellValue(quoteItem.getRequestedMfr().getDescription().substring(sub.length()));
						}
					}
				}

				// if(quoteItem.getRequestedMfr() != null){
				// cell_mfr.setCellValue(quoteItem.getRequestedMfr().getName());
				// }
				HSSFCell cellRequestedPartNumber = row.getCell(7);
				if (quoteItem.getRequestedPartNumber() != null) {
					cellRequestedPartNumber.setCellValue(quoteItem.getRequestedPartNumber());
				}

				HSSFCell cellAqcc = row.getCell(9);
				cellAqcc.setCellStyle(style1);
				if (quoteItem.getQcComment() != null && quoteItem.getQcComment().contains("<br/>")) {
					quoteItem.setQcComment(quoteItem.getQcComment().replaceAll("<br/>", "\r\n"));
				}
				cellAqcc.setCellValue(quoteItem.getQcComment());

				HSSFCell cellRequiredQty = row.getCell(10);
				cellRequiredQty.setCellValue(quoteItem.getRequestedQty());

				HSSFCell cellEau = row.getCell(11);
				String eau = "";
				if (quoteItem.getEau() != null)
					eau = quoteItem.getEau().toString();
				else
					eau = "";
				cellEau.setCellValue(eau);

				HSSFCell cellTargetPrice = row.getCell(12);
				if (quoteItem.getTargetResale() != null)
					cellTargetPrice.setCellValue(quoteItem.getTargetResale());

				HSSFCell cellQuotedPrice = row.getCell(13);
				if (QuoteSBConstant.RFQ_STATUS_AQ.equalsIgnoreCase(quoteItem.getStatus())) {
					if (quoteItem.getQuotedPrice() != null)
						cellQuotedPrice.setCellValue(quoteItem.getQuotedPrice());
				} else {
					cellQuotedPrice.setCellValue("In Progress");
				}

				HSSFCell cellPmoq = row.getCell(14);
				if (quoteItem.getPmoq() != null)
					cellPmoq.setCellValue(quoteItem.getPmoq());
				HSSFCell cellMpq = row.getCell(15);
				if (quoteItem.getMpq() != null)
					cellMpq.setCellValue(quoteItem.getMpq());
				HSSFCell cellMoq = row.getCell(16);
				if (quoteItem.getMoq() != null)
					cellMoq.setCellValue(quoteItem.getMoq());
				HSSFCell cellLeadTime = row.getCell(17);
				if (QuoteSBConstant.RFQ_STATUS_AQ.equalsIgnoreCase(quoteItem.getStatus())) {
					if (quoteItem.getLeadTime() != null)
						cellLeadTime.setCellValue(quoteItem.getLeadTime());
				} else {
					cellLeadTime.setCellValue(EMPTY_STR);
				}
				// New field "Quotation effective date"
				HSSFCell cellQuotationEffective = row.getCell(18);
				if (quoteItem.getQuotationEffectiveDate() != null) {
					cellQuotationEffective.setCellValue(DateUtils.formatDate(quoteItem.getQuotationEffectiveDate()));
				}

				HSSFCell cellPriceValidity = row.getCell(19);
				if (QuoteSBConstant.RFQ_STATUS_AQ.equalsIgnoreCase(quoteItem.getStatus())) {
					if (quoteItem.getPriceValidity() != null)
						cellPriceValidity.setCellValue(quoteItem.getPriceValidity());
				} else {
					cellPriceValidity.setCellValue(EMPTY_STR);
				}

				HSSFCell cellShipmentValidity = row.getCell(20);
				if (QuoteSBConstant.RFQ_STATUS_AQ.equalsIgnoreCase(quoteItem.getStatus())) {
					if (quoteItem.getShipmentValidity() != null) {
						cellShipmentValidity.setCellValue(DateUtils.formatDate(quoteItem.getShipmentValidity()));
					}

				} else {
					cellShipmentValidity.setCellValue(EMPTY_STR);
				}

				HSSFCell cellTermsAndConditions = row.getCell(21);
				cellTermsAndConditions.setCellStyle(style1);
				if (quoteItem.getTermsAndConditions() != null)
					cellTermsAndConditions.setCellValue(quoteItem.getTermsAndConditions());
				HSSFCell cellAllocationFlag = row.getCell(22);
				if (quoteItem.getAllocationFlag() != null)
					cellAllocationFlag.setCellValue(quoteItem.getAllocationFlag().booleanValue()
							? QuoteConstant.OPTION_YES : QuoteConstant.OPTION_NO);
				HSSFCell cellRescheduleWindow = row.getCell(23);
				if (quoteItem.getRescheduleWindow() != null)
					cellRescheduleWindow.setCellValue(quoteItem.getRescheduleWindow());
				HSSFCell cellCancellationWindow = row.getCell(24);
				if (quoteItem.getCancellationWindow() != null)
					cellCancellationWindow.setCellValue(quoteItem.getCancellationWindow());
				HSSFCell cellSoldTo = row.getCell(25);
				if (quoteItem.getSoldToCustomer() != null) {
					String customerName = quoteItem.getSoldToCustomer().getCustomerFullName();
					/*
					 * if(customerName != null &&
					 * quoteItem.getSoldToCustomer().getCustomerName2() != null)
					 * customerName +=
					 * quoteItem.getSoldToCustomer().getCustomerName2();
					 */
					if (customerName != null)
						cellSoldTo.setCellValue(
								customerName + " (" + quote.getSoldToCustomer().getCustomerNumber() + ")");
				}
				HSSFCell cellShipTo = row.getCell(26);
				if (quoteItem.getShipToCustomer() != null) {
					String customerName = quoteItem.getShipToCustomer().getCustomerFullName();
					/*
					 * if(customerName != null &&
					 * quoteItem.getShipToCustomer().getCustomerName2() != null)
					 * customerName +=
					 * quoteItem.getShipToCustomer().getCustomerName2();
					 */
					if (customerName != null)
						cellShipTo.setCellValue(customerName);
				}
				HSSFCell cellEndCustomer = row.getCell(27);
				if (quoteItem.getEndCustomer() != null) {
					String customerName = quoteItem.getEndCustomer().getCustomerFullName();
					/*
					 * if(customerName != null &&
					 * quoteItem.getEndCustomer().getCustomerName2() != null)
					 * customerName +=
					 * quoteItem.getEndCustomer().getCustomerName2();
					 */
					if (customerName != null)
						cellEndCustomer.setCellValue(customerName);
				}
				HSSFCell cellItemRemarks = row.getCell(28);
				if (quoteItem.getRemarks() != null)
					cellItemRemarks.setCellValue(quoteItem.getRemarks());

			}
			if (specialList != null && specialList.size() > 0) {
				StringBuffer speStrSb = new StringBuffer();
				for (int i = 0; i < specialList.size(); i++) {
					if (i != 0) {
						speStrSb.append(specialList.get(i)).append("\r\n");
					}
				}

				if (speStrSb != null && speStrSb.toString().length() > 0) {
					HSSFRow row = sheet.getRow(QuoteConstant.QUOTE_ITEM_ROW_START + quoteItems.size() + 2);
					HSSFCell cellSpeic = row.getCell(8);
					cellSpeic.setCellValue(speStrSb.toString());
				}

			}
		}
		return wb;
	}

	public HSSFWorkbook getHSSFWorkbook(String bizUnitName) {
		FileInputStream fileIn;
		HSSFWorkbook wb = null;
		String templateName=null;
		String filePath = null;
		try {
			templateName = sysMaintSB.getQuotationTemplate(bizUnitName);
			filePath = DeploymentConfiguration.configPath+File.separator+templateName;
			fileIn = new FileInputStream(filePath);
			wb = new HSSFWorkbook(fileIn);
		} catch (IOException e) {
			 FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,
					 ResourceMB.getText("wq.message.downloadfail")+".", ""));
			LOGGER.log(Level.SEVERE, "Exception in getting file : "+templateName+", Biz Unit name: "+bizUnitName+" , Exception message : "+e.getMessage(), e);
			return null;
		}
		return wb;
	}

	public void processAutoQuote(Quote submitedQuote) throws FileNotFoundException, IOException, Exception {
		QuotationEmailVO vo = new QuotationEmailVO();
		vo.setFormNumber(submitedQuote.getFormNumber());
		vo.setLink(getUrl() + "/RFQ/MyQuoteListForSales.jsf?quoteid=" + submitedQuote.getId());
		vo.setRecipient(quote.getSales().getName());
		vo.setSender(getSender(submitedQuote));
		vo.setSubject(getQuotationSubject(submitedQuote));
		vo.setFromEmail(getFromEmail(submitedQuote.getBizUnit().getName()));
		vo.setToEmails(generateEmailToList(submitedQuote));

		File xlsFile = null;

    	FileOutputStream fileOut =null;
    	try
        {
        	MailInfoBean mailInfoBean = new MailInfoBean();
    		mailInfoBean.setMailSubject(vo.getSubject());
    		mailInfoBean.setMailFrom(vo.getFromEmail());
    		mailInfoBean.setMailTo(vo.getToEmails());
    		String content = "Dear " + vo.getRecipient() + ",<br/><br/>";
    		content += "Quotation is attached. Good Selling!<br/><br/>";
    		content += "RFQ Form: " + vo.getFormNumber()+"<br/>";
    		content += "<a href=\""+vo.getLink()+"\">"+vo.getLink()+"</a><br/>";
    		content += "Best Regards," + "<br/>";
    		content += vo.getSender()+"<br/>";
    		mailInfoBean.setMailContent(content);
    		
  
    		HSSFWorkbook hw = getQuoteTemplateBySoldTo(submitedQuote,tempSTList);
    		String tempPath = sysConfigSB.getProperyValue(QuoteConstant.TEMP_DIR);
    		String fileName = tempPath + ProgRfqSubmitHelper.getQuotationFileName(submitedQuote);
    		xlsFile = new File(fileName+".xls");
    		fileOut = new FileOutputStream(xlsFile);
    		hw.write(fileOut);
    		mailInfoBean.setZipFile(xlsFile);
    		mailUtilsSB.sendAttachedMail(mailInfoBean);    
        }    
    	catch (FileNotFoundException ex)
		{
    		throw ex;
		}
	    catch (IOException ex1)
		{
	    	throw ex1;
		}
    	catch(Exception ex2)
    	{
    		throw ex2;
    	}
        finally
 		{

 	    	if(fileOut!=null)
 		    	fileOut=null;
	    	if(xlsFile!=null)
	    	{
	    		if(xlsFile.exists())
	    			xlsFile.delete();
	    	}
 		}
	}
	
	
	
	public void handleErrorMsg(String msg)
	{
		FacesMessage msgTemp = new FacesMessage(FacesMessage.SEVERITY_ERROR, EMPTY_STR, msg);   
        FacesContext.getCurrentInstance().addMessage("growl_submit_target", msgTemp); 
	}

	public void removeAttachment() {
		attachments.remove(seletedDeletedAttachementRowId);
		List<QuoteItem> quoteItems = quote.getQuoteItems();
		for (QuoteItem item : quoteItems) {
			// Delinkage change on Oct 29 , 2013 by Tonmy
			// if(item.getRequestedMaterial().getProgramMaterial().getId()==itemNumberForAttachment)
			// PROGRM PRICER ENHANCEMENT
			// if(item.getRequestedMaterialForProgram().getProgramMaterial().getId()==itemNumberForAttachment)
			if (item.getRequestedProgramMaterialForProgram().getId() == itemNumberForAttachment) {
				item.setAttachments(attachments);
			}
		}
	}

	public void updateNewProspectiveCustomer() {
		newProspectiveCustomerName1 = quote.getSoldToCustomer().getCustomerName1();
		newProspectiveCustomerCountry = " ";
		newProspectiveCustomerCity = "";
		newProspectiveCustomerSalesOrg = " ";
	}

	public void updateNewSoldToCode() {

		// logger.log(Level.INFO, "PERFORMANCE START - updateNewSoldToCode()");
		Customer customertt = customerSB.findByPK(duplicatedCustomerCode);
		quote.setSoldToCustomer(customertt);
		// logger.log(Level.INFO, "PERFORMANCE END - updateNewSoldToCode()");
	}

	public BizUnit getBizUnit() {
		return bizUnit;
	}

	public void setBizUnit(BizUnit bizUnit) {
		this.bizUnit = bizUnit;
	}

	public void switchBizUnit(BizUnit bizUnit) {
		this.bizUnit = bizUnit;
	}

	public void deleteAllAction() {
		LOGGER.fine("call | deleteAllAction");
		List<QuoteItem> quoteItems = quote.getQuoteItems();
		quoteItems.clear();
		quote.setQuoteItems(quoteItems);
	}

	public BizUnit getSalesBizUnit() {
		return salesBizUnit;
	}

	public void setSalesBizUnit(BizUnit salesBizUnit) {
		this.salesBizUnit = salesBizUnit;
	}

	// Delinkage change on Oct 29 , 2013 by Tonmy
	public Material getMaterial(QuoteItem item) {
		Material tempM = (Material) programMaterialSB.findExactMaterialByQuoteItem(item, bizUnit);
		if (tempM == null)
			return null;
		return tempM;
	}

	public ProgramPricer getProgramMaterialByCostIndicatorAndBizUnit(Material tempM, QuoteItem item) {
		// PROGRM PRICER ENHANCEMENT
		ProgramPricer tempPM = materialSB.getSpecifiedValidProgMatByBizUintAndCostIndicator(tempM, bizUnit.getName(),
				item.getCostIndicator());
		// ProgramMaterial tempPM =
		// tempM.getSpecifiedValidProgMatByBizUintAndCostIndicator(bizUnit.getName(),
		// item.getCostIndicator());
		if (tempPM == null) {
			return null;
		}
		return tempPM;
	}

	// Delinkage change on Oct 29 , 2013 by Tonmy
	// public ProgramMaterial getProgramMaterial(QuoteItem item)
	// {
	// Material tempM =
	// (Material)programMaterialSB.findExactMaterialByQuoteItem(item, bizUnit);
	// if(tempM== null)
	// return null;
	// return tempM.getProgramMaterial();
	// }

	// Delinkage change on Oct 29 , 2013 by Tonmy
	// public long getProgramMaterialId(QuoteItem item)
	// {
	// Material tempM =
	// (Material)programMaterialSB.findExactMaterialByQuoteItem(item, bizUnit);
	// if(tempM== null)
	// return 0;
	// return tempM.getProgramMaterial().getId();
	// }

	// Delinkage change on Oct 29 , 2013 by Tonmy
	public Quote getProgramDraftQuoteCopy(Quote quote) {
		Quote returnQ = new Quote();
		if (quote.getSales() != null) {
			returnQ.setSales(quote.getSales());
		}
		if (quote.getSoldToCustomer() != null) {
			returnQ.setSoldToCustomer(quote.getSoldToCustomer());
		}
		if (quote.getRemarksToCustomer() != null) {
			returnQ.setRemarksToCustomer(quote.getRemarksToCustomer());
		}

		List<QuoteItem> newQuoteItemList = new ArrayList<QuoteItem>();
		List<QuoteItem> quoteItemList = quote.getQuoteItems();
		if (quoteItemList != null && quoteItemList.size() > 0) {
			for (QuoteItem item : quoteItemList) {
				QuoteItem newQ = new QuoteItem();
				// Delinkage change on Oct 29 , 2013 by Tonmy
				// PROGRM PRICER ENHANCEMENT
				// ProgramMaterial tempPm =
				// item.getRequestedMaterialForProgram().getProgramMaterial();
				ProgramPricer tempPm = item.getRequestedProgramMaterialForProgram();
				// PROGRM PRICER ENHANCEMENT
				newQ.setRequestedProgramMaterialForProgram(tempPm);
				newQ.setRequestedMfr(item.getRequestedMfr());
				newQ.setRequestedPartNumber(item.getRequestedPartNumber());
				newQ.setRequestedMaterialForProgram(item.getRequestedMaterialForProgram());
				newQ.setQuotedMfr(item.getRequestedMfr());
				newQ.setQuotedPartNumber(item.getRequestedPartNumber());
				newQ.setQuotedMaterial(item.getRequestedMaterialForProgram());
				newQ.setMoq(tempPm.getMoq());
				newQ.setMpq(tempPm.getMpq());
				if (item.getRequestedQty() != null) {
					newQ.setRequestedQty(item.getRequestedQty());
				}
				if (item.getTargetResale() != null) {
					newQ.setTargetResale(item.getTargetResale());
				}
				newQ.setRemarks(item.getRemarks());
				newQ.setQuote(returnQ);
				// if(item.getAttachments()!=null &
				// item.getAttachments().size()>0)
				// {
				// for(Attachment att: item.getAttachments())
				// {
				// Attachment newAtt = new Attachment();
				// newAtt.setFileImage(att.getFileImage());
				// newAtt.getFileName(att.getFileName());
				// newAtt.getQuote();
				// }
				// }
				newQuoteItemList.add(newQ);
			}
		}
		returnQ.setQuoteItems(newQuoteItemList);
		return returnQ;

	}

	// Delinkage change on Oct 29 , 2013 by Tonmy
	public boolean quoteEquals(Object obj1, Object obj2) {
		if (obj1 == obj2)
			return true;
		if (obj2 == null)
			return false;
		if (obj1.getClass() != obj2.getClass())
			return false;

		Quote origial = (Quote) obj1;
		Quote other = (Quote) obj2;
		if (origial.getBizUnit() == null) {
			if (other.getBizUnit() != null) {
				return false;
			}

		} else if (!origial.getBizUnit().equals(other.getBizUnit())) {
			return false;
		}

		if (origial.getQuoteItems() == null) {
			if (other.getQuoteItems() != null && other.getQuoteItems().size() != 0) {
				return false;
			}
		} else {
			if (other.getQuoteItems() == null && origial.getQuoteItems().size() != 0)
				return false;

			if (origial.getQuoteItems().size() != other.getQuoteItems().size())
				return false;

			for (int i = 0; i < origial.getQuoteItems().size(); i++) {

				origial.setQuoteItems(sortedQuoteItem(origial.getQuoteItems()));
				other.setQuoteItems(sortedQuoteItem(other.getQuoteItems()));
				if (!quoteItemEquals(origial.getQuoteItems().get(i), other.getQuoteItems().get(i))) {
					return false;
				}
			}
		}

		if (StringUtils.isEmpty(origial.getRemarksToCustomer())) {
			if (!StringUtils.isEmpty(other.getRemarksToCustomer()))
				return false;
		} else if (!origial.getRemarksToCustomer().equals(other.getRemarksToCustomer()))
			return false;

		if (origial.getSoldToCustomer() == null) {
			if (other.getSoldToCustomer() != null)
				return false;
		} else if (!customerEquals(origial.getSoldToCustomer(), other.getSoldToCustomer())) {
			return false;
		}

		if (origial.getSales() == null) {
			if (other.getSales() != null)
				return false;
		} else if (!origial.getSales().equals(other.getSales())) {
			return false;
		}

		return true;
	}

	// Delinkage change on Oct 29 , 2013 by Tonmy
	public List<QuoteItem> sortedQuoteItem(List<QuoteItem> qiList) {
		List<QuoteItem> sorted = new ArrayList<QuoteItem>(qiList);
		Collections.sort(sorted, new Comparator() {
			@Override
			public int compare(Object o1, Object o2) {
				// long fisrtOne =
				// ((QuoteItem)o1).getRequestedMaterial().getProgramMaterial().getId();
				// long secondOne =
				// ((QuoteItem)o2).getRequestedMaterial().getProgramMaterial().getId();
				// PROGRM PRICER ENHANCEMENT
				// long fisrtOne =
				// ((QuoteItem)o1).getRequestedMaterialForProgram().getProgramMaterial().getId();
				// long secondOne =
				// ((QuoteItem)o2).getRequestedMaterialForProgram().getProgramMaterial().getId();
				long fisrtOne = ((QuoteItem) o1).getRequestedProgramMaterialForProgram().getId();
				long secondOne = ((QuoteItem) o2).getRequestedProgramMaterialForProgram().getId();
				int sortByAgeFlag = Long.valueOf(fisrtOne).compareTo(Long.valueOf(secondOne));
				return sortByAgeFlag;
			}
		});
		return sorted;
	}

	// Delinkage change on Oct 29 , 2013 by Tonmy
	public boolean quoteItemEquals(QuoteItem q1, QuoteItem q2) {
		if (q1 == q2)
			return true;
		if (q1.getClass() != q2.getClass())
			return false;

		// if (attachments == null || other.attachments.size()==0) {
		// if (other.attachments != null && other.attachments.size()>0)
		// return false;
		// }
		// else
		// {
		// if (attachments.size()!=other.attachments.size())
		// return false;
		// }

		if (q1.getMoq() == null) {
			if (q2.getMoq() != null)
				return false;
		} else if (Integer.compare(q1.getMoq(), q2.getMoq()) != 0) {
			return false;
		}

		if (q1.getMpq() == null) {
			if (q2.getMpq() != null)
				return false;
		} else if (Integer.compare(q1.getMpq(), q2.getMpq()) != 0) {
			return false;
		}

		// Delinkage change on Oct 29 , 2013 by Tonmy
		if (q1.getRequestedMfr() == null) {
			if (q2.getRequestedMfr() != null)
				return false;
		} else if (q1.getRequestedMfr().getId() != q2.getRequestedMfr().getId()) {
			return false;
		}
		if (q1.getRequestedPartNumber() == null) {
			if (q2.getRequestedPartNumber() != null)
				return false;
		} else if (!q1.getRequestedPartNumber().equalsIgnoreCase(q2.getRequestedPartNumber())) {
			return false;
		}

		if (q1.getRequestedQty() == null) {
			if (q2.getRequestedQty() != null)
				return false;
		} else if (Integer.compare(q1.getRequestedQty(), q2.getRequestedQty()) != 0) {
			return false;
		}

		if (q1.getTargetResale() == null) {
			if (q2.getTargetResale() != null)
				return false;
		} else if (Double.compare(q1.getTargetResale(), q2.getTargetResale()) != 0) {
			return false;
		}

		if (StringUtils.isEmpty(q1.getRemarks())) {
			if (!StringUtils.isEmpty(q2.getRemarks()))
				return false;
		} else if (!q1.getRemarks().equals(q2.getRemarks())) {
			return false;
		}

		return true;
	}

	public boolean customerEquals(Customer c1, Customer c2) {

		if (c1.getClass() != c2.getClass())
			return false;

		if (StringUtils.isEmpty(c1.getCustomerName1())) {
			if (!StringUtils.isEmpty(c2.getCustomerName1()))
				return false;
		} else if (!c1.getCustomerName1().equalsIgnoreCase(c2.getCustomerName1())) {
			return false;
		}

		if (StringUtils.isEmpty(c1.getCustomerNumber())) {
			if (!StringUtils.isEmpty(c2.getCustomerNumber()))
				return false;
		} else if (!c1.getCustomerNumber().equalsIgnoreCase(c2.getCustomerNumber())) {
			return false;
		}

		return true;
	}

	public List<String> autoCompleteSalesNumber(String key) {

		// logger.log(Level.INFO,
		// "PERFORMANCE START - autoCompleteSalesNumber()");
		if (key != null && !key.isEmpty())
			key = key.trim();

		List<User> users = null;
		if (user != null && user.getRoles() != null) {
			for (Role r : user.getRoles()) {
				if (r.getName().equals(QuoteSBConstant.ROLE_CS)
						|| QuoteSBConstant.ROLE_CS_MANAGER.equals(r.getName())) {// modified
																					// by
																					// Lenon.Yang(043044)
																					// 2016-07-12
																					// webquote
																					// japan
					// fixed issue 1300
					users = userSB.wFindAllSalesForCs(null, key, user, false);
					if (user != null && users.size() > 0) {
						return formatAutoCompleteUserCode(users);
					}
				} else if (r.getName().equals(QuoteSBConstant.ROLE_INSIDE_SALES)) {
					// issue 1192
					users = userSB.wFindAllSalesForCsForInsideSales(null, key, user);
					if (user != null && users.size() > 0) {
						return formatAutoCompleteUserCode(users);
					}
				} else if (r.getName().equals(QuoteSBConstant.ROLE_QC_OPERATION)) {
					users = userSB.wFindAllSalesByBizUnit(null, key,
							new String[] { QuoteSBConstant.ROLE_SALES, QuoteSBConstant.ROLE_INSIDE_SALES,
									QuoteSBConstant.ROLE_SALES_MANAGER, QuoteSBConstant.ROLE_SALES_DIRECTOR,
									QuoteSBConstant.ROLE_SALES_GM },
							bizUnit);
					if (user != null && users.size() > 0) {
						return formatAutoCompleteUserCode(users);
					}
				}
			}
		}

		return Collections.emptyList();
	}

	public List<String> autoCompleteSalesName(String key) {

		// logger.log(Level.INFO,
		// "PERFORMANCE START - autoCompleteSalesName()");
		if (key != null && !key.isEmpty())
			key = key.trim();

		return ejbCommonSB.updateFormatAutoCompleteUserName(key, this.bizUnit,this.userSB);
	}

	public void updateSalesName() {

		quote.getSales().setName(extractSalesNameFromSalesNumberLabel(quote.getSales().getEmployeeId()));
		quote.getSales().setEmployeeId(extractSalesNumberFromSalesNumberLabel(quote.getSales().getEmployeeId()));
		// User user =
		// userSB.findByEmployeeIdWithAllRelation(quote.getSales().getEmployeeId());
		// if (user != null && user.getTeam() != null)
		// {
		// rfqHeader.setTeam(user.getTeam().getName());
		// }
		updateSalesman();

	}

	public void updateSalesNumber() {
		// logger.log(Level.INFO, "PERFORMANCE START - updateSalesNumber()");
		quote.getSales().setEmployeeId(extractSalesNumberFromSalesNameLabel(quote.getSales().getName()));
		quote.getSales().setName(extractSalesNameFromSalesNameLabel(quote.getSales().getName()));
		// User user =
		// userSB.findByEmployeeIdWithAllRelation(quote.getSales().getName());
		// if (user != null && user.getTeam() != null)
		// {
		// rfqHeader.setTeam(user.getTeam().getName());
		// }
		// logger.log(Level.INFO, "PERFORMANCE END - updateSalesNumber()");
		updateSalesman();
	}

	public List<String> formatAutoCompleteUserCode(List<User> users) {
		List<String> list = new ArrayList<String>();
		for (User user : users) {
			String label = "";
			label += user.getEmployeeId();
			label += QuoteConstant.AUTOCOMPLETE_SEPARATOR;
			label += user.getName();
			list.add(label);
		}
		return list;
	}

	public List<String> formatAutoCompleteUserName(List<User> users) {
		List<String> list = new ArrayList<String>();
		for (User user : users) {
			String label = "";
			label += user.getName();
			label += QuoteConstant.AUTOCOMPLETE_SEPARATOR;
			label += user.getEmployeeId();
			list.add(label);
		}
		return list;
	}

	public String extractSalesNumberFromSalesNumberLabel(String label) {
		String[] labels = label.split(QuoteConstant.AUTOCOMPLETE_SEPARATOR);
		return labels[0].trim();
	}

	public String extractSalesNameFromSalesNumberLabel(String label) {
		String[] labels = label.split(QuoteConstant.AUTOCOMPLETE_SEPARATOR);
		if (labels.length == 3)
			return labels[1].trim() + ", " + labels[2].trim();
		return labels[1].trim();
	}

	public String extractSalesNumberFromSalesNameLabel(String label) {
		String[] labels = label.split(QuoteConstant.AUTOCOMPLETE_SEPARATOR);
		if (labels.length == 3)
			return labels[2].trim();
		return labels[1].trim();
	}

	public String extractSalesNameFromSalesNameLabel(String label) {
		String[] labels = label.split(QuoteConstant.AUTOCOMPLETE_SEPARATOR);
		if (labels.length == 3)
			return labels[0].trim() + ", " + labels[1].trim();
		return labels[0].trim();
	}

	public boolean isSalesmanListForInsideSalesDisplay() {
		return salesmanListForInsideSalesDisplay;
	}

	public void setSalesmanListForInsideSalesDisplay(boolean salesmanListForInsideSalesDisplay) {
		this.salesmanListForInsideSalesDisplay = salesmanListForInsideSalesDisplay;
	}

	public String retrieveCustomerChineseName(Customer customer) {

		List<CustomerAddress> customerAddresses = customer.getCustomerAddresss();
		for (CustomerAddress customerAddress : customerAddresses) {
			if (customerAddress.getCountry() != null && customerAddress.getId().getLanguageCode() != null
					&& (customerAddress.getId().getLanguageCode().equals(QuoteSBConstant.LANGUAGE_CODE_CHINESE_C)
							|| customerAddress.getId().getLanguageCode().equals(QuoteSBConstant.LANGUAGE_CODE_CHINESE_M)
							|| customerAddress.getId().getLanguageCode()
									.equals(QuoteSBConstant.LANGUAGE_CODE_CHINESE_1))) {
				return getCustomerFullName(customerAddress);
			}
		}
		return null;
	}

	public SelectItem[] getExCurrencyList() {
		return exCurrencyList;
	}

	public void setExCurrencyList(SelectItem[] exCurrencyList) {
		this.exCurrencyList = exCurrencyList;
	}

	public String getExCurrency() {
		return exCurrency;
	}

	public void setExCurrency(String exCurrency) {
		this.exCurrency = exCurrency;
	}

	public boolean isCreateProspectiveCustomerButtonDisplay() {
		return createProspectiveCustomerButtonDisplay;
	}

	public void setCreateProspectiveCustomerButtonDisplay(boolean createProspectiveCustomerButtonDisplay) {
		this.createProspectiveCustomerButtonDisplay = createProspectiveCustomerButtonDisplay;
	}

	/**
	 * @param newQ
	 * @param tempPm
	 */
	private void progRFQQuote(QuoteItem newQ,ProgramPricer tempPm){
		// Delinkage change on Oct 29 , 2013 by Tonmy
		// newQ.setRequestedMaterial(tempPm.getMaterial());
		newQ.setRequestedMfr(tempPm.getMaterial().getManufacturer());
		newQ.setRequestedPartNumber(tempPm.getMaterial().getFullMfrPartNumber());
		newQ.setRequestedMaterialForProgram(getMaterial(newQ));
		// PROGRM PRICER ENHANCEMENT
		newQ.setRequestedProgramMaterialForProgram(tempPm);
		if (tempPm.getCostIndicator() != null) {
			newQ.setCostIndicator(tempPm.getCostIndicator().getName());
		}

		newQ.setQuotedMfr(tempPm.getMaterial().getManufacturer());
		newQ.setQuotedPartNumber(tempPm.getMaterial().getFullMfrPartNumber());
		newQ.setQuotedMaterial(getMaterial(newQ));

		newQ.setMoq(tempPm.getMoq());
		newQ.setMpq(tempPm.getMpq());
	}
	

}
