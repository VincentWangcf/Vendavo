package com.avnet.emasia.webquote.cluster.dispatcher;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;

import org.wildfly.clustering.dispatcher.Command;
import org.wildfly.clustering.group.Node;

import com.avnet.emasia.webquote.cache.ActionIndicator;
import com.avnet.emasia.webquote.cache.Constants;
import com.avnet.emasia.webquote.cache.ICacheUtil;
import com.avnet.emasia.webquote.utilites.web.common.CacheUtil;
 
public class CacheSynchronizationCommand implements Command<String, Node> {
	/**
	 * 
	 */
	private static final long serialVersionUID = -7181690731370726551L;
	private ActionIndicator actionIndicator;
	private static ICacheUtil cacheUtilEntity;
	private static CacheUtil cacheUtilWQ;
	static final Logger logger = Logger.getLogger(CacheSynchronizationCommand.class.getName());
	static {
		try {
			Context context = new InitialContext();
			cacheUtilEntity = ((ICacheUtil) context.lookup("java:app/WQ_JPA_Entity/CacheUtil!com.avnet.emasia.webquote.cache.ICacheUtil"));
			cacheUtilWQ = ((CacheUtil) context.lookup("java:app/WQ_Web/CacheUtil!com.avnet.emasia.webquote.utilites.web.common.CacheUtil"));
		} catch (NamingException e) {
			logger.log(Level.SEVERE, "This shoud not happen" , e);
		}			
	}
	
	public CacheSynchronizationCommand(ActionIndicator actionIndicator) {
		this.actionIndicator = actionIndicator;
	}
    @Override
    public String execute(Node node) {
    	cacheUtilEntity.clear(actionIndicator);
    	cacheUtilWQ.clear(actionIndicator);
        //do it here 
       //System.gc();
    	//cacheUtil.refreshExRates();
    	logger.info(node.getName() + " done.");
    	return node.getName();
    }
    
    /*private void clearExRates() {
    	logger.info("Clear ExRates Begin.");
    	cacheUtilEntity.clear(this.actionIndicator);
    	
    	logger.info("Clear ExRates end.");
    	logger.info("Clear ExRates Begin.2");
    	//cacheUtilEntity.getCacheMap().remove(Constants.EXCHANGE_RATE);
    	//cacheUtilEntity.getCacheMap().remove(Constants.EXCHANGE_RATE);
    	logger.info("Clear ExRates end.2");
    }
    
    private void clearAll() {
    	logger.info("Clear all Begin.");
    	cacheUtilEntity.g.clear();
		cacheUtilWQ.getCacheMap().clear();
		logger.info("Clear all end.");
    }*/
}

