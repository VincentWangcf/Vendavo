package com.avnet.emasia.webquote.entity;

import org.apache.commons.lang.StringUtils;

import com.avnet.emasia.webquote.vo.PricerInfo;
import com.avnet.emasia.webquote.vo.RfqItemVO;

public class QtyCal {
	
	private Integer requiredQty;
	private Integer mpq, moq, mov;
	private Double cost;
	private String qtyIndicator;
	
	public QtyCal(){
	}
	
	public QtyCal(RfqItemVO rfqItem) {
		requiredQty =  rfqItem.getRequiredQtyAsInt();
		mpq =  rfqItem.getMpq();
		moq =  rfqItem.getMoq();
		mov =  rfqItem.getMov();
		cost =  rfqItem.getCost();
		qtyIndicator =  rfqItem.getQtyIndicator();
	}
	
	public QtyCal(PricerInfo pricerInfo) {
		requiredQty =  pricerInfo.getRequestedQty();
		mpq = pricerInfo.getMpq();
		moq = pricerInfo.getMoq();
		mov = pricerInfo.getMov();
		cost = pricerInfo.getCost();
		qtyIndicator = pricerInfo.getQtyIndicator();
	}
	
	public QtyCal(Integer requiredQty, Integer mpq, Integer moq, Integer mov, Double cost, String qtyIndicator) {
		this.requiredQty = requiredQty;
		this.mpq = mpq;
		this.moq = moq;
		this.mov = mov;
		this.cost = cost;
		this.qtyIndicator = qtyIndicator;
	}
	
	public Integer getRequiredQty() {
		return requiredQty;
	}

	public void setRequiredQty(Integer requiredQty) {
		this.requiredQty = requiredQty;
	}

	public Integer getMpq() {
		return mpq;
	}

	public void setMpq(Integer mpq) {
		this.mpq = mpq;
	}

	public Integer getMoq() {
		return moq;
	}

	public void setMoq(Integer moq) {
		this.moq = moq;
	}

	public Integer getMov() {
		return mov;
	}

	public void setMov(Integer mov) {
		this.mov = mov;
	}

	public Double getCost() {
		return cost;
	}

	public void setCost(Double cost) {
		this.cost = cost;
	}

	public String getQtyIndicator() {
		return qtyIndicator;
	}

	public void setQtyIndicator(String qtyIndicator) {
		this.qtyIndicator = qtyIndicator;
	}

	public String calQtyIndicator() {
		if ( ! StringUtils.isEmpty(qtyIndicator)) {
			return qtyIndicator;
		}
		if(mov != null && cost != null && cost != 0 && moq != null){
			if (mov/cost > moq) {
				return "MOV";
			} else {
				return "MOQ";
			}
		} else if ((mov == null || cost == null || cost == 0) && moq != null) {
			return "MOQ";
		} else if (mov != null && cost != null && cost != 0 && moq == null){
			return "MOV";
		} else {
			return null;
		}
	}	
	
	
	public Integer calMoq() {
		if (calQtyIndicator() == null) {
			return null;
		}
		
		if (calQtyIndicator().equalsIgnoreCase("MOQ")) {
			return moq;
		} else if (calQtyIndicator().equalsIgnoreCase("MOV")) {
			return roundUp((int)Math.ceil(mov / cost));
		}
		return null;
	}	
	
	public Integer calQuotedQty() {
		
		if (requiredQty == null || calQtyIndicator() == null) {
			return null;
		}
		
		if (calQtyIndicator().equalsIgnoreCase("MOQ")) {
			if (getMoq() != null) {
				return calQuotedQty(requiredQty, getMoq(), null, null);
			} else if (getMov() != null && getCost() != null && getMpq() != null) {
				return calQuotedQty(requiredQty, null, getMov(), getCost());
			}
			
		} else if (calQtyIndicator().equalsIgnoreCase("MOV")) {
			if (getMov() != null && getCost() != null && getMpq() != null) {
				return calQuotedQty(requiredQty, null, getMov(), getCost());
			}
			
		} else if (calQtyIndicator().equalsIgnoreCase("EXACT")) {
			return requiredQty;
			
		} else if (calQtyIndicator().equalsIgnoreCase("LIMIT")) {
			return roundUp(requiredQty);

		} else if (calQtyIndicator().contains("%") || calQtyIndicator().equalsIgnoreCase("MPQ")) {
			return  calQuotedQty(requiredQty, getMoq(), getMov(), getCost());
			
		}
		return null;
	}
	
	private Integer calQuotedQty(Integer requiredQty, Integer moq, Integer mov, Double cost) {
		if (mov == null || cost == null || cost==0d) {
			if (moq == null) {
				return null;
			} else if (moq > requiredQty) {
				return moq;
			} else {
				return roundUp(requiredQty);
			}
		} else {
			if (moq == null) {
				if (mov/cost > requiredQty) {
					return roundUp((int)Math.ceil(getMov()/getCost()));
				} else {
					return roundUp(requiredQty);
				}
			} else {
				if (moq >= mov/cost && moq >= requiredQty) {
					return moq;
				} else if (mov/cost >= moq && mov/cost >= requiredQty) {
					return roundUp((int)Math.ceil(getMov()/getCost()));
				} else if (requiredQty >= moq && requiredQty >= mov/cost) {
					return roundUp(requiredQty);
				}
			}
			
		}
		return null;
	}
	
	
	Integer roundUp(Integer qty){
		if(qty == null || mpq == null || mpq == 0) {
			return null;
		}
		return ((int)Math.ceil(qty * 1.0d / mpq)) * mpq;
	}

	Integer roundDown(Integer qty){
		if(qty == null || mpq == null || mpq == 0) {
			return null;
		}
		if (qty % mpq == 0) {
			return (qty - mpq) < 0 ? 0 : (qty - mpq);
		} else {
			return ((int)Math.floor(qty * 1.0d / mpq) * mpq);
		}
	}

}