package com.avnet.emasia.webquote.entity;

import java.io.Serializable;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;

import com.avnet.emasia.webquote.vo.PricerInfo;
import com.avnet.emasia.webquote.vo.RfqItemVO;

@Entity
public class SalesCostPricer extends QtyBreakPricer implements Serializable {
	
	private static final long serialVersionUID = 1L;

	
	@Column(name="SALES_COST_TYPE")
	@Enumerated(EnumType.STRING)
	private SalesCostType salesCostType;

	@Column(name="QTY_CONTROL")
	private Integer qtyControl;
	
	public SalesCostType getSalesCostType() {
		return salesCostType;
	}

	public void setSalesCostType(SalesCostType salesCostType) {
		this.salesCostType = salesCostType;
	}

	public Integer getQtyControl() {
		return qtyControl;
	}

	public void setQtyControl(Integer qtyControl) {
		this.qtyControl = qtyControl;
	}

	@Override
	public String getCostIndicatorType() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	int getPriority() {
		return 2;
	}


	
	@Override
	boolean isSalesCostTypeMatched() {
		if (this.salesCostType.equals(SalesCostType.ZINM)) {
			return false;
		}
		MaterialRegional materialRegional = getMaterial().getMaterialRegaional(getBizUnitBean().getName());
		if (materialRegional != null) {
			return materialRegional.isSalesCostFlag(); 
		}
		return false;
	}
	
	@Override
	boolean isSalesCostTypeMatched(boolean salesCostType) {
		
		if (this.salesCostType.equals(SalesCostType.ZINM)) {
			return false;
		}
		return salesCostType;
	}


	@Override
	public void fillupPricerInfo(PricerInfo pricerInfo) {
		super.fillupPricerInfo(pricerInfo);
		pricerInfo.setAllocationFlag(allocationFlag);
		pricerInfo.setMinSell(null);
		
		pricerInfo.setProgramType(null);
		if (qtyIndicator != null) {
			pricerInfo.setQtyIndicator(qtyIndicator);
		}
		
		pricerInfo.setContractPricer(false);
		
		pricerInfo.setMaterialTypeId("NORMAL");
		pricerInfo.setProgramType(programType == null ? null : programType.getName());
		pricerInfo.setQtyIndicator(qtyIndicator);
		pricerInfo.setResaleIndicator("00AA");
		
		
		if (pricerInfo.getRequestedQty() == null){
			 return;
		}
		QuantityBreakPrice qtyBreakPrice = getQtyBreakPrice(Integer.valueOf(pricerInfo.getRequestedQty()));
		if (qtyBreakPrice != null) {
			qtyBreakPrice.fillInPricer(pricerInfo);
		}
		pricerInfo.setSalesCostFlag(true);
		pricerInfo.setSalesCostType(salesCostType);
		
		super.applyCostIndicator(pricerInfo);
	}
	
	@Override
	public void fillInPricer(RfqItemVO rfqItem) {
		super.fillInPricer(rfqItem);
		
		rfqItem.setAllocationFlag(allocationFlag);
		rfqItem.setMaterialTypeId("NORMAL");
		rfqItem.setMultiUsage(true);
		if(programType != null) {
			rfqItem.setProgramType(programType.getName());
		}

		QuantityBreakPrice qtyBreakPrice = getQtyBreakPrice(Integer.valueOf(rfqItem.getRequiredQty()));
		if (qtyBreakPrice != null) {
			qtyBreakPrice.fillInPricer(rfqItem);
		}
		rfqItem.setQtyIndicator(qtyIndicator);
		rfqItem.setSalesCostFlag(true);
		rfqItem.setSalesCostType(salesCostType);
		
/*

		
		rfqItem.setQtyIndicator(this.getQtyIndicator());
		rfqItem.setCancellationWindow(this.getCancellationWindow());
		rfqItem.setReschedulingWindow(this.getRescheduledWindow());
		rfqItem.setTermsAndCondition(this.getTermsAndConditions());

		//fixed issue 378
		if(this.getAvnetQcComments()!=null && !this.getAvnetQcComments().isEmpty())
		{
			rfqItem.setQcComment(this.getAvnetQcComments());
		}
		
		
		ManufacturerDetail md = null;
		if (mfr != null && material.getProductGroup2() != null
				&& material.getProductCategory() != null && rfqItem.getRfqHeaderVO().getBizUnit() != null) {
			md = MfrDetailCacheManager.getMfrDetail(mfr.getId(), material.getProductGroup2().getId(),
					material.getProductCategory().getId(), rfqItem.getRfqHeaderVO().getBizUnit());
			if (md != null) {
				md.fillIn(rfqItem);
				if (this.getQtyIndicator() == null) {
					rfqItem.setQtyIndicator(md.getQuantityIndicator());
				}


			}
		}
		rfqItem.setCostIndicatorType(this.getCostIndicatorType());
		// by costindicator
		fillInRfqVOByCostIndicator(rfqItem);*/
	}
	
	

	@Override
	boolean matchAQCondtions(Double targetResale, int requestedQty) {
		if (super.matchAQCondtions(targetResale, requestedQty) == false) {
			return false;
		}
		QuantityBreakPrice qtyBreakPrice = getQtyBreakPrice(requestedQty);
		if (qtyBreakPrice == null) {
			return false;
		}
		if (targetResale != null && targetResale < qtyBreakPrice.getSalesCost().doubleValue()) {
			return false;
		}
		return true;
	}	

}
