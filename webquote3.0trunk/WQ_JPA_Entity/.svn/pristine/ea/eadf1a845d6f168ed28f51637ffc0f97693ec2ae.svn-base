package com.avnet.emasia.webquote.entity;

import java.io.Serializable;
import java.util.Date;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import com.avnet.emasia.webquote.quote.ejb.constant.QuoteSBConstant;
import com.avnet.emasia.webquote.vo.PricerInfo;
import com.avnet.emasia.webquote.vo.RfqItemVO;


/**
 * The persistent class for the MATERIAL_DETAIL database table.
 * 
 */
@Entity
//@DiscriminatorValue("NormalPricer")
public class NormalPricer extends Pricer implements Serializable {
	private static final long serialVersionUID = 1L;


	/*@Column(name="ALLOCATION_FLAG", length=1)
	private Boolean allocationFlag;*/
	/*
	@Column(name="AVNET_QC_COMMENTS", length=255)
	private String avnetQcComments;*/

	@Column(name="CANCELLATION_WINDOW", precision=3)
	private Integer cancellationWindow;

	@Column(name="COMMODITY_CODE", length=2)
	private String commodityCode;

	@Column(name="FULL_MFR_PART_NUMBER", length=40)
	private String fullMfrPartNumber;

	@Column(name="GREEN_PRODUCT_INDICATOR", length=2)
	private String greenProductIndicator;

	@Column(name="BOTTOM_PRICE", precision=10, scale=5)
	private Double bottomPrice;

	@Column(name="NCNR_FLAG", length=1)
	private Boolean ncnrFlag;

	@Temporal(TemporalType.DATE)
	@Column(name="NCNR_VALID_FROM")
	private Date ncnrValidFrom;

	@Column(name="MIN_SELL_PRICE", precision=10, scale=5)
	private Double minSellPrice;

	@Column(name="PRICE_LIST_REMARKS1", length=255)
	private String priceListRemarks1;

	@Column(name="PRICE_LIST_REMARKS2", length=255)
	private String priceListRemarks2;

	@Column(name="PRICE_LIST_REMARKS3", length=255)
	private String priceListRemarks3;

	@Column(name="PRICE_LIST_REMARKS4", length=255)
	private String priceListRemarks4;


	@Column(name="QTY_INDICATOR", length=20)
	private String qtyIndicator;

	@Column(name="RESCHEDULED_WINDOW", precision=3)
	private Integer rescheduledWindow;

	@Column(name="SUPPLIER_NUMBER")
	private String supplierNumber;
	
	@Temporal(TemporalType.DATE)
	@Column(name="LAST_BUY_DATE")
	private Date lastBuyDate;

	@Temporal(TemporalType.DATE)
	@Column(name="LAST_SHIP_DATE")
	private Date lastShipDate;
	
	@Column(name="SHIP_DEBIT", length=3)
	private String shipDebit;
	
	@Temporal(TemporalType.DATE)
	@Column(name="ALLOCATION_VALID_FROM")
	private Date allocationValidFrom;
	
	@Column(length=14)
	private String eccn;
	
	@Column(name = "PART_DESCRIPTION")
	private String partDescription;


	/*@OneToMany(mappedBy="materialDetail")
	private List<QuantityBreakPrice> quantityBreakPrices;*/

	
	//Added by tonmy on 15 Oct 2013
	/*@Column(name="AVAILABLE_TO_SELL_MORE_FLAG", length=1)
	private Boolean availableToSellMoreFlag;*/
	
	public NormalPricer() {
	}



	/*public Boolean getAllocationFlag() {
		return this.allocationFlag;
	}

	public void setAllocationFlag(Boolean allocationFlag) {
		this.allocationFlag = allocationFlag;
	}*/

	/*public String getAvnetQcComments() {
		return this.avnetQcComments;
	}

	public void setAvnetQcComments(String avnetQcComments) {
		this.avnetQcComments = avnetQcComments;
	}*/

	public Integer getCancellationWindow() {
		return this.cancellationWindow;
	}

	public void setCancellationWindow(Integer cancellationWindow) {
		this.cancellationWindow = cancellationWindow;
	}

	public String getCommodityCode() {
		return this.commodityCode;
	}

	public void setCommodityCode(String commodityCode) {
		this.commodityCode = commodityCode;
	}


	public static long getSerialversionuid() {
		return serialVersionUID;
	}

	public String getFullMfrPartNumber() {
		return this.fullMfrPartNumber;
	}

	public void setFullMfrPartNumber(String fullMfrPartNumber) {
		this.fullMfrPartNumber = fullMfrPartNumber;
	}

	public String getGreenProductIndicator() {
		return this.greenProductIndicator;
	}

	public void setGreenProductIndicator(String greenProductIndicator) {
		this.greenProductIndicator = greenProductIndicator;
	}


	public Double getBottomPrice() {
		return this.bottomPrice;
	}

	public void setBottomPrice(Double bottomPrice) {
		this.bottomPrice = bottomPrice;
	}

	public Boolean getNcnrFlag() {
		return this.ncnrFlag;
	}

	public void setNcnrFlag(Boolean ncnrFlag) {
		this.ncnrFlag = ncnrFlag;
	}

	public Date getNcnrValidFrom() {
		return this.ncnrValidFrom;
	}

	public void setNcnrValidFrom(Date ncnrValidFrom) {
		this.ncnrValidFrom = ncnrValidFrom;
	}

	public Double getMinSellPrice() {
		return this.minSellPrice;
	}

	public void setMinSellPrice(Double minSellPrice) {
		this.minSellPrice = minSellPrice;
	}

	public String getPriceListRemarks1() {
		return this.priceListRemarks1;
	}

	public void setPriceListRemarks1(String priceListRemarks1) {
		this.priceListRemarks1 = priceListRemarks1;
	}

	public String getPriceListRemarks2() {
		return this.priceListRemarks2;
	}

	public void setPriceListRemarks2(String priceListRemarks2) {
		this.priceListRemarks2 = priceListRemarks2;
	}

	public String getPriceListRemarks3() {
		return this.priceListRemarks3;
	}

	public void setPriceListRemarks3(String priceListRemarks3) {
		this.priceListRemarks3 = priceListRemarks3;
	}

	public String getPriceListRemarks4() {
		return this.priceListRemarks4;
	}

	public void setPriceListRemarks4(String priceListRemarks4) {
		this.priceListRemarks4 = priceListRemarks4;
	}


	public String getQtyIndicator() {
		return this.qtyIndicator;
	}

	public void setQtyIndicator(String qtyIndicator) {
		this.qtyIndicator = qtyIndicator;
	}

	public Integer getRescheduledWindow() {
		return this.rescheduledWindow;
	}

	public void setRescheduledWindow(Integer rescheduledWindow) {
		this.rescheduledWindow = rescheduledWindow;
	}

	public String getSupplierNumber() {
		return this.supplierNumber;
	}

	public void setSupplierNumber(String supplierNumber) {
		this.supplierNumber = supplierNumber;
	}
	
	public String getPartDescription() {
		return partDescription;
	}


	public void setPartDescription(String partDescription) {
		this.partDescription = partDescription;
	}






	public Date getAllocationValidFrom() {
		return this.allocationValidFrom;
	}

	public void setAllocationValidFrom(Date allocationValidFrom) {
		this.allocationValidFrom = allocationValidFrom;
	}
	
	public String getEccn() {
		return this.eccn;
	}

	public void setEccn(String eccn) {
		this.eccn = eccn;
	}
	
	public Date getLastBuyDate() {
		return this.lastBuyDate;
	}

	public void setLastBuyDate(Date lastBuyDate) {
		this.lastBuyDate = lastBuyDate;
	}

	public Date getLastShipDate() {
		return this.lastShipDate;
	}

	public void setLastShipDate(Date lastShipDate) {
		this.lastShipDate = lastShipDate;
	}
	
	public String getShipDebit() {
		return this.shipDebit;
	}

	public void setShipDebit(String shipDebit) {
		this.shipDebit = shipDebit;
	}

	/*@SuppressWarnings({ "unchecked", "rawtypes" })
	public List<QuantityBreakPrice> getQuantityBreakPrices() {
		List<QuantityBreakPrice> sorted = new ArrayList<QuantityBreakPrice>(quantityBreakPrices);
		Collections.sort(sorted,
				new Comparator(){
					 @Override
					 public int compare(Object o1, Object o2) 
					 {
						 int sortByAgeFlag=((QuantityBreakPrice)o1).getQuantityBreak().compareTo(((QuantityBreakPrice)o2).getQuantityBreak());
						 return sortByAgeFlag;
					 }
				}
	    );
		return sorted;
	}*/

	 
	@Override
	public String toString() {
		return "MaterialDetail [costIndicator=" + getCostIndicator()
				+ ", fullMfrPartNumber=" + fullMfrPartNumber + ", bizUnitBean=" + 
			getBizUnitBean() + ", material=" + getMaterial() + "]";
	}

/*	public Boolean getAvailableToSellMoreFlag()
	{
		return availableToSellMoreFlag;
	}

	public void setAvailableToSellMoreFlag(Boolean availableToSellMoreFlag)
	{
		this.availableToSellMoreFlag = availableToSellMoreFlag;
	}*/
	


/*	public Double getProgramNormalSell()
	{
	      List<QuantityBreakPrice> breakPriceList = getQuantityBreakPrices();
	      if(breakPriceList!=null && breakPriceList.size()>0)
	      {
	    	  QuantityBreakPrice firstQBP = breakPriceList.get(0);
	    	  if(firstQBP!=null && firstQBP.getQuantityBreakPrice()!=null)
	    	  {
	    		  return firstQBP.getQuantityBreakPrice();
	    	  }
	      }
	      return null;
			
	}*/

	@Override
	int getPriority() {
		return 3;
	}

	@Override
	public void fillInPricer(RfqItemVO rfqItem) {
		super.fillInPricer(rfqItem);
		rfqItem.setBottomPrice(bottomPrice);
		
		rfqItem.setMaterialTypeId("NORMAL");
		rfqItem.setMinSellPrice(minSellPrice);
		rfqItem.setPriceListRemarks1(priceListRemarks1);
		rfqItem.setPriceListRemarks2(priceListRemarks2);
		rfqItem.setPriceListRemarks3(priceListRemarks3);
		rfqItem.setPriceListRemarks4(priceListRemarks4);
		
	}
	
 

	public String getCostIndicatorType() {
		return RFQ_COST_INDICATOR_TYPE_N;
	}



	@Override
	boolean allowOverride() {
		return true;
	}


	@Override
	public void fillupPricerInfo(PricerInfo pricerInfo) {
		super.fillupPricerInfo(pricerInfo);
		
		pricerInfo.setAllocationFlag(false);
		pricerInfo.setBottomPrice(bottomPrice);
		pricerInfo.setDescription(partDescription);
		pricerInfo.setMinSell(minSellPrice);
		pricerInfo.setProgramType(null);
		pricerInfo.setContractPricer(false);
		//pricerInfo.setQcComment(avnetQcComments);
		
		pricerInfo.setMaterialTypeId("NORMAL");
		pricerInfo.setProgramType(null);
		
		/*
		pricerInfo.setPriceListRemarks1(priceListRemarks1);
		pricerInfo.setPriceListRemarks2(priceListRemarks2);
		pricerInfo.setPriceListRemarks3(priceListRemarks3);
		pricerInfo.setPriceListRemarks4(priceListRemarks4);
		*/
		
		super.applyCostIndicator(pricerInfo);
	}
	 
	@Override
	boolean isCustomerMatched(Customer soldToCustomer, Customer endCustomer, List<Customer> allowedCustomers) {
		return true;
	}



	@Override
	boolean isSalesCostTypeMatched() {
		MaterialRegional materialRegional = getMaterial().getMaterialRegaional(getBizUnitBean().getName());
		if (materialRegional != null) {
			return ! materialRegional.isSalesCostFlag(); 
		}
		return false;
	}
	
	@Override
	boolean isSalesCostTypeMatched(boolean salesCostType) {
		return ! salesCostType;
	}
	

}