package com.avnet.emasia.webquote.entity;

import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.TimeZone;

import javax.persistence.Column;
import javax.persistence.DiscriminatorColumn;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Inheritance;
import javax.persistence.InheritanceType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Version;

import org.apache.commons.lang.StringUtils;

import com.avnet.emasia.webquote.vo.PricerInfo;
import com.avnet.emasia.webquote.vo.RfqItemVO;

@Entity
@Inheritance(strategy=InheritanceType.SINGLE_TABLE)
@Table(name="PRICER")
@DiscriminatorColumn(name="PRICER_TYPE")
public abstract class Pricer {

	@Id
	@SequenceGenerator(name = "MATERIAL_DETAIL_ID_GENERATOR", sequenceName = "WQ_SEQ", allocationSize = 1)
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "MATERIAL_DETAIL_ID_GENERATOR")
	@Column(unique = true, nullable = false)
	private long id;
	
	@Column(precision = 10, scale = 5)
	private Double cost;
	
	@Column(name="PRICER_TYPE")
	private String pricerType;
	
	@ManyToOne
	@JoinColumn(name = "COST_INDICATOR")
	private CostIndicator costIndicator;
	
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "CREATED_ON", nullable = false)
	private Date createdOn;
	
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "LAST_UPDATED_ON")
	private Date lastUpdatedOn;
	
	@Column(precision = 10, scale = 3)
	private Integer moq;
	
	@Column(precision = 10, scale = 3)
	private Integer mpq;
	
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "SHIPMENT_VALIDITY")
	private Date shipmentValidity;
	
	@Column(name = "TERMS_AND_CONDITIONS", length = 255)
	private String termsAndConditions;
	
	@Column(name = "PRICE_VALIDITY", length = 10)
	private String priceValidity;
	
	@Column(name = "\"VERSION\"")
	@Version
	private Integer version;
	
	@Column(name = "LAST_UPDATED_BY", length = 10)
	private String lastUpdatedBy;
	
	@Column(name = "CREATED_BY", nullable = false, length = 10)
	private String createdBy;
	
	@ManyToOne
	@JoinColumn(name = "BIZ_UNIT", nullable = false)
	private BizUnit bizUnitBean;
	
	@ManyToOne
	@JoinColumn(name = "MATERIAL_ID", nullable = false)
	private Material material;
	
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "QUOTATION_EFFECTIVE_DATE")
	private Date quotationEffectiveDate;
	
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "QUOTATION_EFFECTIVE_TO")
	private Date quotationEffectiveTo;

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "DISPLAY_QUOTE_EFF_DATE", length = 7)
	private Date displayQuoteEffDate;
	
	
	public Pricer() {
	}

	
	public long getId() {
		return this.id;
	}

	public void setId(long id) {
		this.id = id;
	}

	public String getPricerType() {
		return pricerType;
	}


	public void setPricerType(String pricerType) {
		this.pricerType = pricerType;
	}


	public Double getCost() {
		return this.cost;
	}

	public void setCost(Double cost) {
		this.cost = cost;
	}

	public CostIndicator getCostIndicator() {
		return costIndicator;
	}

	public void setCostIndicator(CostIndicator costIndicator) {
		this.costIndicator = costIndicator;
	}

	public Date getCreatedOn() {
		return this.createdOn;
	}

	public void setCreatedOn(Date createdOn) {
		this.createdOn = createdOn;
	}

	public Date getLastUpdatedOn() {
		return this.lastUpdatedOn;
	}

	public void setLastUpdatedOn(Date lastUpdatedOn) {
		this.lastUpdatedOn = lastUpdatedOn;
	}

	public Integer getMoq() {
		return this.moq;
	}

	public void setMoq(Integer moq) {
		this.moq = moq;
	}

	public Integer getMpq() {
		return this.mpq;
	}

	public void setMpq(Integer mpq) {
		this.mpq = mpq;
	}

	public Date getShipmentValidity() {
		return this.shipmentValidity;
	}

	public void setShipmentValidity(Date shipmentValidity) {
		this.shipmentValidity = shipmentValidity;
	}

	public String getPriceValidity() {
		return priceValidity;
	}

	public void setPriceValidity(String priceValidity) {
		this.priceValidity = priceValidity;
	}

	public Integer getVersion() {
		return this.version;
	}

	public void setVersion(Integer version) {
		this.version = version;
	}

	public String getLastUpdatedBy() {
		return lastUpdatedBy;
	}

	public void setLastUpdatedBy(String lastUpdatedBy) {
		this.lastUpdatedBy = lastUpdatedBy;
	}

	public String getCreatedBy() {
		return createdBy;
	}

	public void setCreatedBy(String createdBy) {
		this.createdBy = createdBy;
	}

	public BizUnit getBizUnitBean() {
		return this.bizUnitBean;
	}

	public void setBizUnitBean(BizUnit bizUnitBean) {
		this.bizUnitBean = bizUnitBean;
	}

	public Material getMaterial() {
		return this.material;
	}

	public void setMaterial(Material material) {
		this.material = material;
	}

	public Date getQuotationEffectiveTo() {
		return quotationEffectiveTo;
	}

	public void setQuotationEffectiveTo(Date quotationEffectiveTo) {
		this.quotationEffectiveTo = quotationEffectiveTo;
	}

	public Date getDisplayQuoteEffDate()
	{
		return this.displayQuoteEffDate;
	}

	public void setDisplayQuoteEffDate(Date displayQuoteEffDate)
	{
		this.displayQuoteEffDate = displayQuoteEffDate;
	}

	public String getTermsAndConditions() {
		return termsAndConditions;
	}

	public void setTermsAndConditions(String termsAndConditions) {
		this.termsAndConditions = termsAndConditions;
	}

	public Date getQuotationEffectiveDate() {
		return quotationEffectiveDate;
	}

	public void setQuotationEffectiveDate(Date quotationEffectiveDate) {
		this.quotationEffectiveDate = quotationEffectiveDate;
	}
	
	
	public RfqItemVO fillInPricer(RfqItemVO itemVo){
		itemVo.setCostIndicatorType(getCostIndicatorType());
		itemVo.setMaterial(getMaterial());
		return itemVo;
	}
	
	boolean isEffectivePricer(){
		Date tempDate = getCurrentDateZeroHour();
		return (this.getQuotationEffectiveDate() != null 
				&& !this.getQuotationEffectiveDate().after(tempDate))
				&& (this.getQuotationEffectiveTo() != null 
				&& !this.getQuotationEffectiveTo().before(tempDate));
	}
	

	Date getCurrentDateZeroHour() {
		Calendar cal = Calendar.getInstance();
		cal.setTimeZone(TimeZone.getTimeZone("GMT+8"));
		cal.set(Calendar.HOUR_OF_DAY, 0);
		cal.set(Calendar.MINUTE, 0);
		cal.set(Calendar.SECOND, 0);
		cal.set(Calendar.MILLISECOND, 0);
		return cal.getTime();
	}

	public static final String A_BOOK_COST = "A-Book Cost";

	public boolean isABookCostPricer() {
		return costIndicator != null && StringUtils.equalsIgnoreCase(A_BOOK_COST, costIndicator.getName());
	}
	
	public boolean isAbookPricer(Pricer pricer) {
		return pricer.getCostIndicator() != null 
				&& StringUtils.equalsIgnoreCase(A_BOOK_COST, pricer.getCostIndicator().getName());
	}
	
	public void fillupPricerInfo(PricerInfo pricerInfo) {
		pricerInfo.setPricerId(id);
		pricerInfo.setMpq(mpq);
		pricerInfo.setMoq(moq);
		pricerInfo.setCost(cost);
		pricerInfo.setPriceValidity(priceValidity);
		pricerInfo.setShipmentValidity(shipmentValidity);
		if (costIndicator != null) {
			pricerInfo.setCostIndicator(costIndicator.getName());
		}
		//TO-DO pricerInfo. multiusage
		//TO-DO, check QuoteSB.fillPricingInfo(PricerInfo pricerInfo, Object minCostMaterialDetail, NormalPricer aBookCostMaterialDetail)
//		material.getAbookPricer(bizUnitBean.getName()).fillupPricerInfo(pricerInfo);
		pricerInfo.setTermsAndConditions(termsAndConditions);
		
		pricerInfo.setQuotationEffectiveDate(quotationEffectiveDate);
		pricerInfo.setDisplayQuoteEffDate(displayQuoteEffDate);		
		
	}
	
	public abstract String getCostIndicatorType();
	
	abstract int getPriority();
	
	abstract boolean isValidFor(String region, Customer soldToCustomer, Customer endCustomer, List<Customer> allowedCustomers);
	
	abstract boolean allowOverride();
	
	abstract boolean isCustomerMatched(Customer soldToCustomer, Customer endCustomer, List<Customer> allowedCustomers);
	
	boolean isRegionMatched(String region) {
//		return bizUnitBean.getName().equalsIgnoreCase(region);
		return bizUnitBean.getSelfAndAllSubBizUnits().contains(region);
		
	}
	
	boolean isRegionAndCustomerMatched(String region, Customer soldToCustomer, Customer endCustomer, List<Customer> allowedCustomers) {
		return isRegionMatched(region) && isCustomerMatched(soldToCustomer, endCustomer, allowedCustomers);
	}
	
	boolean isValidPriceValidity(){
		return true;
	}
	
	boolean isValidShipmentValidity(){
		return true;
	}
	
	public static final String RFQ_COST_INDICATOR_TYPE_N = "N";
	public static final String RFQ_COST_INDICATOR_TYPE_C = "C";
	public static final String RFQ_COST_INDICATOR_TYPE_P = "P";



	public static final String EMPTY = "";


	public void fillupPricerWithSalesCostInfo(PricerInfo pricerInfo, String region) {
		
		MaterialRegional materialRegional = getMaterialRegionalByMaterialandRegion(this.getMaterial(),region);
		pricerInfo.setSalesCostPart("No");
	}


	private MaterialRegional getMaterialRegionalByMaterialandRegion(Material material2, String region) {
		// TODO Auto-generated method stub
		return null;
	}
	
	
}