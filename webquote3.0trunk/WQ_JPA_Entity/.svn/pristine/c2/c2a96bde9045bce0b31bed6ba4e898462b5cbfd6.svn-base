package com.avnet.emasia.webquote.entity;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.JoinColumn;
import javax.persistence.MappedSuperclass;
import javax.persistence.OneToMany;

@Entity
public abstract class QtyBreakPricer extends Pricer {

	@JoinColumn(name = "PROGRAM_TYPE_ID")
	protected ProgramType programType;
	
	@Column(name = "DISPLAY_ON_TOP")
	private Integer displayOnTop;
	
	@Column(name = "PROGRAM_SPECIAL_ITEM_FLAG")
	private Integer specialItemFlag;
	
	@Column(name = "PROGRAM_AVAILABLE_TO_SELL_QTY")
	private Integer availableToSellQty;
	
	@Column(name = "QTY_INDICATOR")
	protected String qtyIndicator;
	
	@Column(name = "NEW_PROGRAM_MATERIAL_INDICATOR")
	private Boolean newItemIndicator;
	
	@Column(name = "ALLOCATION_FLAG", length = 1)
	protected Boolean allocationFlag;
	
	@Column(name = "PROGRAM_AQ_FLAG")
	private Boolean aqFlag;
	
	@OneToMany(mappedBy = "materialDetail", cascade = { CascadeType.PERSIST, CascadeType.REMOVE })
	protected List<QuantityBreakPrice> qtyBreakPrices;

	public QtyBreakPricer() {
		super();
	}

	public ProgramType getProgramType() {
		return programType;
	}

	public void setProgramType(ProgramType programType) {
		this.programType = programType;
	}

	public Integer getDisplayOnTop() {
		return displayOnTop;
	}

	public void setDisplayOnTop(Integer displayOnTop) {
		this.displayOnTop = displayOnTop;
	}

	public Integer getSpecialItemFlag() {
		return specialItemFlag;
	}

	public void setSpecialItemFlag(Integer specialItemFlag) {
		this.specialItemFlag = specialItemFlag;
	}

	public Integer getAvailableToSellQty() {
		return availableToSellQty;
	}

	public void setAvailableToSellQty(Integer availableToSellQty) {
		this.availableToSellQty = availableToSellQty;
	}

	public String getQtyIndicator() {
		return qtyIndicator;
	}

	public void setQtyIndicator(String qtyIndicator) {
		this.qtyIndicator = qtyIndicator;
	}

	public Boolean getNewItemIndicator() {
		return newItemIndicator;
	}

	public void setNewItemIndicator(Boolean newItemIndicator) {
		this.newItemIndicator = newItemIndicator;
	}

	public Boolean getAllocationFlag() {
		return allocationFlag;
	}

	public void setAllocationFlag(Boolean allocationFlag) {
		this.allocationFlag = allocationFlag;
	}

	public Boolean getAqFlag() {
		return aqFlag;
	}

	public void setAqFlag(Boolean aqFlag) {
		this.aqFlag = aqFlag;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	public List<QuantityBreakPrice> getQuantityBreakPrices() {
		List<QuantityBreakPrice> sorted = new ArrayList<QuantityBreakPrice>(qtyBreakPrices);
		Collections.sort(sorted,
				new Comparator(){
					 @Override
					 public int compare(Object o1, Object o2) 
					 {
						 int sortByAgeFlag=((QuantityBreakPrice)o1).getQuantityBreak().compareTo(((QuantityBreakPrice)o2).getQuantityBreak());
						 return sortByAgeFlag;
					 }
				}
	    );
		return sorted;
	}

	public void setQuantityBreakPrices(List<QuantityBreakPrice> quantityBreakPrices) {
		this.qtyBreakPrices = quantityBreakPrices;
	}
	
	@Override
	String calQtyIndicator() {
		return qtyIndicator;
	}	

	@Override
	boolean allowOverride() {
		return true;
	}

	@Override
	boolean isCustomerMatched(Customer soldToCustomer, Customer endCustomer, List<Customer> allowedCustomers) {
		return true;
	}

	@Override
	Date calQuoteExpiryDate() {
		if (calPriceValidityDate() == null) {
			return null;
		}
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(calPriceValidityDate());
		calendar.add(Calendar.DATE, -4);
		return calendar.getTime();
	}

	List<QuantityBreakPrice> calQtyBreakRange() {
		List<QuantityBreakPrice> result = new ArrayList<>();
		for (int i = 0 ; i < getQuantityBreakPrices().size() ; i++ ) {
			if (i < (getQuantityBreakPrices().size() - 1)) {
				QuantityBreakPrice qtyBreakPrice = new QuantityBreakPrice(getQuantityBreakPrices().get(i));
				qtyBreakPrice.setRoundedQuantityBreak(roundUp(getQuantityBreakPrices().get(i).getQuantityBreak()));
				qtyBreakPrice.setQuantityBreakTo(getQuantityBreakPrices().get(i+1).getQuantityBreak()-1);
				qtyBreakPrice.setRoundedQuantityBreakTo(roundDown(getQuantityBreakPrices().get(i+1).getQuantityBreak()));
				qtyBreakPrice.setQtyRange(qtyBreakPrice.getRoundedQuantityBreak() + "-" + qtyBreakPrice.getRoundedQuantityBreakTo());
				result.add(qtyBreakPrice);
			} else {
				if (getQuantityBreakPrices().get(i).getQuantityBreakPrice() != null) {
					QuantityBreakPrice qtyBreakPrice = new QuantityBreakPrice(getQuantityBreakPrices().get(i));
					qtyBreakPrice.setRoundedQuantityBreak(roundUp(getQuantityBreakPrices().get(i).getQuantityBreak()));
					qtyBreakPrice.setQuantityBreakTo(Integer.MAX_VALUE);
					qtyBreakPrice.setRoundedQuantityBreakTo(Integer.MAX_VALUE);
					qtyBreakPrice.setQtyRange(qtyBreakPrice.getRoundedQuantityBreak() + "+");
					result.add(qtyBreakPrice);
				}
			}
		}
		return result;
	}


	@Override
	String calPmoq(Integer requiredQty) {
		String qtyIndicator = calQtyIndicator();
		
		if (requiredQty == null || calQtyIndicator() == null) {
			return null;
		}
		
		if (qtyIndicator.equals("MOQ") || qtyIndicator.equals("MOV")){
			if (calQuotedQty(requiredQty) != null ) {
				return String.valueOf(calQuotedQty(requiredQty)) + "+";
			}
			
		} else if (qtyIndicator.equalsIgnoreCase("EXACT")) {
			return String.valueOf(requiredQty);
			
		} else if (qtyIndicator.equalsIgnoreCase("MPQ")) {
			return String.valueOf(super.getMpq()) + "+";
			
		} else if (qtyIndicator.equalsIgnoreCase("LIMIT")) {
			List<QuantityBreakPrice> qtyBreakPrices =  calQtyBreakRange();
			for (QuantityBreakPrice qtyBreakPrice : qtyBreakPrices) {
				if (requiredQty >= qtyBreakPrice.getQuantityBreak() && requiredQty <= qtyBreakPrice.getQuantityBreakTo()) {
					return qtyBreakPrice.getQtyRange();
				}
			}
			return null;

		} else if (qtyIndicator.contains("%")) {
			try {
				Double d = Double.parseDouble(qtyIndicator.substring(0, qtyIndicator.length()-1))/100;
				return ((int)Math.ceil(super.calQuotedQty(requiredQty) * d /100)) * super.getMpq() + "+";
			}catch (NumberFormatException e) {
				//to do
				e.printStackTrace();
				return null;
			}
			
			
		}
		return null;
	}
	
	QuantityBreakPrice getQtyBreakPrice(int qty) {
		List<QuantityBreakPrice> qtyBreakPrices = calQtyBreakRange();
		for (QuantityBreakPrice qtyBreakPrice : qtyBreakPrices) {
			if (qty >=  qtyBreakPrice.getQuantityBreak() && qty < qtyBreakPrice.getQuantityBreakTo()) {
				return qtyBreakPrice;
			}
		}
		return null;
		/*
		for (int i = 0 ; i < qtyBreakPrices.size() ; i++ ) {
			if (i == (qtyBreakPrices.size() - 1)) {
				if (qtyBreakPrices.get(i).getSalesCost() == null) {
					return null;
				} else {
					return qtyBreakPrices.get(i);
				}
			}
			
			if (qty >= qtyBreakPrices.get(i).getQuantityBreak() && qty < qtyBreakPrices.get(i+1).getQuantityBreak()) {
				return qtyBreakPrices.get(i);
			}
		}
		return null;
		*/
	}

	

}