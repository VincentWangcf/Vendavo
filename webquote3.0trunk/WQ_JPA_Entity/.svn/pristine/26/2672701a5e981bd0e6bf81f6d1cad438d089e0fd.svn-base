package com.avnet.emasia.webquote.entity;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.TimeZone;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.persistence.Column;
import javax.persistence.DiscriminatorColumn;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Inheritance;
import javax.persistence.InheritanceType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Version;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.lang.StringUtils;

import com.avnet.emasia.webquote.vo.PricerInfo;
import com.avnet.emasia.webquote.vo.RfqItemVO;

@Entity
@Inheritance(strategy=InheritanceType.SINGLE_TABLE)
@Table(name="PRICER")
@DiscriminatorColumn(name="PRICER_TYPE")
public abstract class Pricer {
	
	@Id
	@SequenceGenerator(name = "MATERIAL_DETAIL_ID_GENERATOR", sequenceName = "WQ_SEQ", allocationSize = 1)
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "MATERIAL_DETAIL_ID_GENERATOR")
	@Column(unique = true, nullable = false)
	private long id;
	
	@Column(name="AVNET_QC_COMMENTS")
	private String avnetQcComments;	

	@Column(precision = 10, scale = 5)
	private Double cost;
	
	@Column(name="PRICER_TYPE")
	private String pricerType;
	
	@ManyToOne
	@JoinColumn(name = "COST_INDICATOR")
	private CostIndicator costIndicator;
	
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "CREATED_ON", nullable = false)
	private Date createdOn;
	
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "LAST_UPDATED_ON")
	private Date lastUpdatedOn;
	
	@Column(name="LEAD_TIME", length=30)
	private String leadTime;

	@Column(precision = 10, scale = 3)
	private Integer moq;
	
	@Column(precision = 10, scale = 3)
	private Integer mpq;

	@Column(precision=11, scale=2)
	private Integer mov;

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "SHIPMENT_VALIDITY")
	private Date shipmentValidity;
	
	@Column(name = "TERMS_AND_CONDITIONS", length = 255)
	private String termsAndConditions;
	
	@Column(name = "PRICE_VALIDITY", length = 10)
	private String priceValidity;
	
	@Column(name = "\"VERSION\"")
	@Version
	private Integer version;
	
	@Column(name = "LAST_UPDATED_BY", length = 10)
	private String lastUpdatedBy;
	
	@Column(name = "CREATED_BY", nullable = false, length = 10)
	private String createdBy;
	
	@ManyToOne
	@JoinColumn(name = "BIZ_UNIT", nullable = false)
	private BizUnit bizUnitBean;
	
	@ManyToOne(fetch=FetchType.LAZY)
	@JoinColumn(name = "MATERIAL_ID", nullable = false)
	private Material material;
	
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "QUOTATION_EFFECTIVE_DATE")
	private Date quotationEffectiveDate;
	
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "QUOTATION_EFFECTIVE_TO")
	private Date quotationEffectiveTo;

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "DISPLAY_QUOTE_EFF_DATE", length = 7)
	private Date displayQuoteEffDate;
	
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "PRE_VALID_TO_DATE")
	private Date preValidToDate;

	@Column(name="BATCH_STATUS")
	private int batchStatus;
	

	public int getBatchStatus() {
		return batchStatus;
	}


	public void setBatchStatus(int batchStatus) {
		this.batchStatus = batchStatus;
	}


	public Pricer() {
	}

	
	public long getId() {
		return this.id;
	}

	public void setId(long id) {
		this.id = id;
	}

	public String getPricerType() {
		return pricerType;
	}


	public void setPricerType(String pricerType) {
		this.pricerType = pricerType;
	}


	public Double getCost() {
		return this.cost;
	}

	public void setCost(Double cost) {
		this.cost = cost;
	}

	public CostIndicator getCostIndicator() {
		return costIndicator;
	}

	public void setCostIndicator(CostIndicator costIndicator) {
		this.costIndicator = costIndicator;
	}

	public Date getCreatedOn() {
		return this.createdOn;
	}

	public void setCreatedOn(Date createdOn) {
		this.createdOn = createdOn;
	}

	public Date getLastUpdatedOn() {
		return this.lastUpdatedOn;
	}

	public void setLastUpdatedOn(Date lastUpdatedOn) {
		this.lastUpdatedOn = lastUpdatedOn;
	}

	public String getLeadTime() {
		return this.leadTime;
	}

	public void setLeadTime(String leadTime) {
		this.leadTime = leadTime;
	}
	
	public Integer getMov() {
		return this.mov;
	}

	public void setMov(Integer mov) {
		this.mov = mov;
	}
	
	public Integer getMoq() {
		return this.moq;
	}

	public void setMoq(Integer moq) {
		this.moq = moq;
	}

	public Integer getMpq() {
		return this.mpq;
	}

	public void setMpq(Integer mpq) {
		this.mpq = mpq;
	}

	public Date getShipmentValidity() {
		return this.shipmentValidity;
	}

	public void setShipmentValidity(Date shipmentValidity) {
		this.shipmentValidity = shipmentValidity;
	}

	public String getPriceValidity() {
		return priceValidity;
	}

	public void setPriceValidity(String priceValidity) {
		this.priceValidity = priceValidity;
	}

	public Integer getVersion() {
		return this.version;
	}

	public void setVersion(Integer version) {
		this.version = version;
	}

	public String getLastUpdatedBy() {
		return lastUpdatedBy;
	}

	public void setLastUpdatedBy(String lastUpdatedBy) {
		this.lastUpdatedBy = lastUpdatedBy;
	}

	public String getCreatedBy() {
		return createdBy;
	}

	public void setCreatedBy(String createdBy) {
		this.createdBy = createdBy;
	}

	public BizUnit getBizUnitBean() {
		return this.bizUnitBean;
	}

	public void setBizUnitBean(BizUnit bizUnitBean) {
		this.bizUnitBean = bizUnitBean;
	}

	public Material getMaterial() {
		return this.material;
	}

	public void setMaterial(Material material) {
		this.material = material;
	}

	public Date getQuotationEffectiveTo() {
		return quotationEffectiveTo;
	}

	public void setQuotationEffectiveTo(Date quotationEffectiveTo) {
		this.quotationEffectiveTo = quotationEffectiveTo;
	}

	public Date getDisplayQuoteEffDate() {
		return this.displayQuoteEffDate;
	}

	public void setDisplayQuoteEffDate(Date displayQuoteEffDate) {
		this.displayQuoteEffDate = displayQuoteEffDate;
	}
	
	public String getTermsAndConditions() {
		return termsAndConditions;
	}

	public void setTermsAndConditions(String termsAndConditions) {
		this.termsAndConditions = termsAndConditions;
	}

	public Date getQuotationEffectiveDate() {
		return quotationEffectiveDate;
	}

	public void setQuotationEffectiveDate(Date quotationEffectiveDate) {
		this.quotationEffectiveDate = quotationEffectiveDate;
	}
	
	public String getAvnetQcComments() {
		return avnetQcComments;
	}

	public void setAvnetQcComments(String avnetQcComments) {
		this.avnetQcComments = avnetQcComments;
	}
	
	public Date getPreValidToDate() {
		return preValidToDate;
	}


	public void setPreValidToDate(Date preValidToDate) {
		this.preValidToDate = preValidToDate;
	}

	
	public void fillInPricer(RfqItemVO rfqItem){
		rfqItem.setAllocationFlag(false);
		rfqItem.setAqFlag(true);
		rfqItem.setQcComment(avnetQcComments);
		rfqItem.setCost(cost);
		if (costIndicator != null) {
			rfqItem.setCostIndicator(costIndicator.getName());
		}
		
		//vo.setCostIndicatorType(getCostIndicatorType());
		rfqItem.setLeadTime(leadTime);
		//materialTypeId, set in sub class
		//minSellPrice, set in sub class. Only normal pricer has	
		rfqItem.setMoq(calMoq());
		rfqItem.setMov(mov);
		rfqItem.setMpq(mpq);
		//multiUsage, get from MfrDetail, override in subclass
		
		rfqItem.setPmoq(calPmoq(rfqItem.getRequiredQtyAsInt()));
		rfqItem.setPoExpiryDate(calPriceValidityDate());
		//price list remark 1-4, all set to null;
		rfqItem.setPriceValidity(priceValidity);
		//productGroup1-4, all set in MaterialRegional
		//programType, set in sub class.
		rfqItem.setQtyIndicator(calQtyIndicator());
		rfqItem.setQuoteExpiryDate(calQuoteExpiryDate());
		rfqItem.setQuotedQty(calQuotedQty(rfqItem.getRequiredQtyAsInt()));
		//salesCost, salesCostFlag, salesCostType, suggestedResalle. all set in SalesCostPricer
		rfqItem.setSalesCostType(SalesCostType.NonSC);
		rfqItem.setShipmentValidity(shipmentValidity);
		rfqItem.setTermsAndCondition(termsAndConditions);
		
		
//		rfqItem.setMaterial(getMaterial());
	}
	
	public boolean isEffectivePricer(){
//		Date date = getCurrentDateZeroHour();
		Date date = new Date();
		return (quotationEffectiveDate != null  && ! quotationEffectiveDate.after(date))
				&& (quotationEffectiveTo != null && ! quotationEffectiveTo.before(date));
	}
	
	Date getCurrentDateZeroHour() {
		Calendar cal = Calendar.getInstance();
		cal.setTimeZone(TimeZone.getTimeZone("GMT+8"));
		cal.set(Calendar.HOUR_OF_DAY, 0);
		cal.set(Calendar.MINUTE, 0);
		cal.set(Calendar.SECOND, 0);
		cal.set(Calendar.MILLISECOND, 0);
		return cal.getTime();
	}

	public static final String A_BOOK_COST = "A-Book Cost";

	public boolean isABookCostPricer() {
		return costIndicator != null && StringUtils.equalsIgnoreCase(A_BOOK_COST, costIndicator.getName()) && (this instanceof NormalPricer);
	}
	
	public void fillupPricerInfo(PricerInfo pricerInfo) {
		pricerInfo.setPricerId(id);
		//allocationFlag, set in Prier and SubClass.
		pricerInfo.setAllocationFlag(false);
		pricerInfo.setQcComment(avnetQcComments);
		//BOTTOM_PRICE, set in SubClass
		//Cancellation window, set by ManufacturerDetail
		pricerInfo.setCost(cost);
		if (costIndicator != null) {
			pricerInfo.setCostIndicator(costIndicator.getName());
		}
		//DESCRIPTION, only NormalPricer SubClass has description
		pricerInfo.setLeadTime(leadTime);
		
		//MATERIAL_TYPE_ID, set in SubClass
		//MIN_SELL_PRICE, set in SubClass
		pricerInfo.setMoq(moq);
		pricerInfo.setMov(mov);
		pricerInfo.setMpq(mpq);
		
		//multiple usage flag, set by ManufacturerDetail, override by some SubClass

		//pmoq, set to null for all pricer
		//po expirty date , set after user fill priceValidity?
		//PRICE_LIST_REMARKS_1-4, only NormalPricer has
		pricerInfo.setPriceValidity(priceValidity);
		
		//below 4 set by MaterialRegional
		//PRODUCT_GROUP2_ID
		//PRODUCT_GROUP1_ID
		//PRODUCT_GROUP3
		//PRODUCT_GROUP4
		
		//PROGRAM_TYPE, set by SubClass
		//qty indicator, set by ManufacturerDetail, override in SubClass
		//quote expirty date, set after user fill PriceValidity?
		//quoted qty, all null
		//resale indicator, set in ManufacturerDetail and override in SubClass
		//reschedule window, set by ManufacturerDetail
		
		//below 3, set in SalesCostPricer SubClass
		//SALES_COST, 
		//SALES_COST_TYPE
		//SALES_COST_FLAG

		pricerInfo.setShipmentValidity(shipmentValidity);
		//SUGGESTED_RESALE, only set in SalesCostPricer 
		pricerInfo.setTermsAndConditions(termsAndConditions);
		
		
		//TO-DO pricerInfo. multiusage
//		material.getAbookPricer(bizUnitBean.getName()).fillupPricerInfo(pricerInfo);
		
		pricerInfo.setQuotationEffectiveDate(quotationEffectiveDate);
		pricerInfo.setDisplayQuoteEffDate(displayQuoteEffDate);	
		
		
	}
	
	void applyCostIndicator(PricerInfo pricerInfo) {
		NormalPricer aBookCostPricer = this.getMaterial().getEffectiveOrExpiredABookCostPricer(bizUnitBean.getName());
		costIndicator.apply(aBookCostPricer, pricerInfo);
		
	}
	
	public abstract String getCostIndicatorType();
	
	abstract int getPriority();
	
	abstract boolean allowOverride();
	
	abstract boolean isCustomerMatched(Customer soldToCustomer, Customer endCustomer, List<Customer> allowedCustomers);
	
	// tell if this pricer's salesCostFlag match the MaterialRegional's salesCostFlag definition 
	abstract boolean isSalesCostTypeMatched();
	
	// tell if this pricer's salesCostFlag match the input parameter  
	abstract boolean isSalesCostTypeMatched(boolean salesCostType);
	
	boolean isRegionMatched(String region) {
		return bizUnitBean.getName().equalsIgnoreCase(region);
//		return bizUnitBean.getSelfAndAllSubBizUnits().contains(region);
		
	}
	
	boolean isRegionCustomerTypeMatched(String region, Customer soldToCustomer, Customer endCustomer, List<Customer> allowedCustomers) {
		return isRegionMatched(region) && isCustomerMatched(soldToCustomer, endCustomer, allowedCustomers) && isSalesCostTypeMatched();
	}
	
	boolean isRegionCustomerTypeMatched(String region, Customer soldToCustomer, Customer endCustomer, List<Customer> allowedCustomers, boolean salesCostFlag) {
		return isRegionMatched(region) && isCustomerMatched(soldToCustomer, endCustomer, allowedCustomers) && isSalesCostTypeMatched(salesCostFlag);
	}

	boolean isRegionCustomerTypeMatched(PricerInfo pricerInfo) {
		return isRegionCustomerTypeMatched(pricerInfo.getBizUnit(), pricerInfo.getSoldToCustomer(), 
				pricerInfo.getEndCustomer(), pricerInfo.getAllowedCustomers(), pricerInfo.isSalesCostFlag());
	}

	
	boolean isValidPriceValidity(){
		return true;
	}
	
	boolean isValidShipmentValidity(){
		return true;
	}
	
/*	boolean matchAQCondition(RfqItemVO rfqItemVo) {
		if (mpq == null || mpq.intValue() == 0) {
			return false;
		}
		
		if((moq == null || moq.intValue()== 0) && (mov == null || mov.intValue()==0)) {
			return false;
		}
			
		if(leadTime == null) {
			return false;
		}
		
		return true;
	}*/
	
	public static final String RFQ_COST_INDICATOR_TYPE_N = "N";
	public static final String RFQ_COST_INDICATOR_TYPE_C = "C";
	public static final String RFQ_COST_INDICATOR_TYPE_P = "P";



	public static final String EMPTY = "";


	public void fillupPricerWithSalesCostInfo(PricerInfo pricerInfo, String region) {
		
		MaterialRegional materialRegional = getMaterialRegionalByMaterialandRegion(this.getMaterial(),region);
		pricerInfo.setSalesCostPart("No");
	}


	private MaterialRegional getMaterialRegionalByMaterialandRegion(Material material2, String region) {
		// TODO Auto-generated method stub
		return null;
	}
	
	
	//For AQ only, Override in QtyBreakPricer
	String calQtyIndicator() {
		if(mov != null && cost != null && cost != 0 && moq != null){
			if (mov/cost > moq) {
				return "MOV";
			} else {
				return "MOQ";
			}
		} else if ((mov == null || cost == null || cost == 0) && moq != null) {
			return "MOQ";
		} else if (mov != null && cost != null && cost != 0 && moq == null){
			return "MOV";
		} else {
			return null;
		}
	}	
	
	Integer calMoq() {
		if (calQtyIndicator().equalsIgnoreCase("MOQ")) {
			return moq;
		} else if (calQtyIndicator().equalsIgnoreCase("MOV")) {
			return roundUp((int)Math.ceil(mov / cost));
		}
		return null;
	}
	
	//Override in QtyBreakPrice
	Integer calQuotedQty(Integer requiredQty) {
		if (requiredQty == null || calMoq() == null) {
			return null;
		}
		if (requiredQty < calMoq()) {
			return roundUp(calMoq());
		} else {
			return roundUp(requiredQty);
		}
	}
	
		
	//For AQ only, Override in QtyBreakPricer
	String calPmoq(Integer requiredQty) {
		if (calQtyIndicator().equals("MOQ") || calQtyIndicator().equals("MOV")){
			if (calQuotedQty(requiredQty) != null ) {
				return String.valueOf(calQuotedQty(requiredQty)) + "+";
			}
		}
		return null;
	}
	
	
	
	Date calPriceValidityDate() {
		if (priceValidity == null) {
			return null;
		}
		
		if (StringUtils.isNumeric(priceValidity)) {
			Calendar calendar = Calendar.getInstance();
//			calendar.set(Calendar.HOUR, 0);
//			calendar.set(Calendar.MINUTE, 0);
//			calendar.set(Calendar.SECOND, 0);
//			calendar.set(Calendar.MILLISECOND, 0);
			calendar.add(Calendar.DATE, Integer.parseInt(priceValidity));
			return calendar.getTime();
		} 
		DateFormat format = new SimpleDateFormat("dd/MM/yyyy"); 
		try {
			Date date =  format.parse(priceValidity);
			return date;
		} catch (ParseException e) {
			//to do
			e.printStackTrace();
		}
		
		return null;
	}
	
	//override in QtyBreakPricer 
	Date calQuoteExpiryDate() {
		if (calPriceValidityDate() == null) {
			return null;
		}
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(calPriceValidityDate());
		calendar.add(Calendar.DATE, -1);
		return calendar.getTime();
	}

	Integer roundUp(Integer qty){
		if(qty == null || mpq == null || mpq == 0) {
			return null;
		}
		return ((int)Math.ceil(qty * 1.0d / mpq)) * mpq;
	}

	Integer roundDown(Integer qty){
		if(qty == null || mpq == null || mpq == 0) {
			return null;
		}
		if (qty % mpq == 0) {
			return (qty - mpq) < 0 ? 0 : (qty - mpq);
		} else {
			return ((int)Math.floor(qty * 1.0d / mpq) * mpq);
		}
		
	}

}