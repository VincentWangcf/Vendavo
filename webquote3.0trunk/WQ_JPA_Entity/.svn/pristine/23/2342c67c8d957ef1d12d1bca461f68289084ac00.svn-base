package com.avnet.emasia.webquote.entity;

import static org.testng.Assert.assertEquals;
import static org.testng.Assert.assertNull;
import static org.testng.Assert.assertTrue;
import static org.testng.Assert.assertNotNull;

import java.util.ArrayList;
import java.util.List;

import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import com.avnet.emasia.webquote.vo.RfqItemVO;


@Test
public class MaterialTest {
	private Material material;;
	private Customer soldTo;
	private Customer end;
	private List<Customer> allowedCustomers;

	private NormalPricer np;
	private ContractPricer cp;
	private ProgramPricer pp;
	private SalesCostPricer sp;
	private RFQSubmissionTypeEnum submissionType;
	
	private RfqItemVO rfqItem;
	
	private String region;
	
	@BeforeMethod
	public void setup() {
		material =  MaterialFactory.getInstance().createMaterial();
		
		np =  (NormalPricer) material.getPricers().get(0);
		cp =  (ContractPricer) material.getPricers().get(1);
		pp = (ProgramPricer) material.getPricers().get(2);
		sp = (SalesCostPricer) material.getPricers().get(3);
		
		soldTo = new Customer()	;
		soldTo.setCustomerNumber("soldTo");
		
		end = new Customer();
		end.setCustomerNumber("end");
		
		allowedCustomers = new ArrayList<>();
		allowedCustomers.add(soldTo);
		
		rfqItem = new RfqItemVO();
		region  =  "China";
		
		submissionType = RFQSubmissionTypeEnum.NormalRFQSubmission;
	}
	
	public void getMaterialRegaionalTest() {
		MaterialRegional mr1 = material.getMaterialRegaional("CHINA");
		assertEquals(mr1.getBizUnit().getName(), "CHINA");
		MaterialRegional mr2 = material.getMaterialRegaional("TW");
		assertEquals(mr2.getBizUnit().getName(), "TW");
		
		MaterialRegional mr3 = material.getMaterialRegaional("ASEAN");
		assertNull(mr3);
	}
	
	
	
	public void getCandidatePricersForAQTest1() {
		material.getMaterialRegaional("China").setSalesCostFlag(false);
		List<Pricer> pricers = material.getCandidatePricersForAQ("China",soldTo, end, allowedCustomers);
		assertEquals(pricers.size(),3);
	}

	
	public void getCandidatePricersForAQTest2() {
		ContractPricer cp =  (ContractPricer)material.getPricers().get(1);
		cp.setOverrideFlag(false);
		cp.setCost(100d);
		List<Pricer> pricers = material.getCandidatePricersForAQ("China",soldTo, end, allowedCustomers);
		
		assertEquals(pricers.size(),1);
		assertTrue(pricers.get(0) instanceof ContractPricer);
	}
	
	public void getCandidatePricersForAQTest3() {
		material.getMaterialRegaional("China").setSalesCostFlag(false);
		np.setCost(1d);
		cp.setCost(1.05d);
		pp.setCost(1.1d);
		
		List<Pricer> pricers = material.getCandidatePricersForAQ("China",soldTo, end, allowedCustomers);
		assertEquals(pricers.size(),3);
		assertTrue(pricers.get(0) instanceof NormalPricer);
		assertTrue(pricers.get(1) instanceof ContractPricer);
		assertTrue(pricers.get(2) instanceof ProgramPricer);
		
	}
	
	public void getCandidatePricersForAQTest4() {
		material.getMaterialRegaional("China").setSalesCostFlag(false);
		np.setCost(1d);
		cp.setCost(1d);
		pp.setCost(1d);
		
		List<Pricer> pricers = material.getCandidatePricersForAQ("China",soldTo, end, allowedCustomers);
		assertEquals(pricers.size(),3);
		assertTrue(pricers.get(0) instanceof ContractPricer);
		assertTrue(pricers.get(1) instanceof ProgramPricer);
		assertTrue(pricers.get(2) instanceof NormalPricer);
		
	}
	
	public void getCandidatePricersForAQTest5() {
		material.getMaterialRegaional("China").setSalesCostFlag(true);
		List<Pricer> pricers = material.getCandidatePricersForAQ("China",soldTo, end, new ArrayList<Customer>());
		assertEquals(pricers.size(),1);
	}
	
	public void fillInPricerInfoTest() {
		
		RfqItemVO expected = rfqItem.copy();
	
		
		material.applyAQLogic(rfqItem, region, soldTo, end, allowedCustomers, submissionType);
		material.getMaterialRegaional(region).getManufacturerDetail().fillIn(expected);
		
		assertEquals(rfqItem.getCancellationWindow(), expected.getCancellationWindow());
		assertEquals(rfqItem.getReschedulingWindow(), expected.getReschedulingWindow());
		assertEquals(rfqItem.getMultiUsage(), expected.getMultiUsage());
		
	}
	
	public void fillInPricerInfoTest2() {
		RfqItemVO expected = rfqItem.copy();
		material.applyAQLogic(rfqItem, region, soldTo, end, allowedCustomers, submissionType);
		
		MaterialRegional mr = material.getMaterialRegaional(region);
		mr.fillInPricer(expected, RFQSubmissionTypeEnum.NormalRFQSubmission);
		
		assertEquals(rfqItem.getProductGroup1(), expected.getProductGroup1());
		assertEquals(rfqItem.getProductGroup2(), expected.getProductGroup2());
		assertEquals(rfqItem.getProductGroup3(), expected.getProductGroup3());
		assertEquals(rfqItem.getProductGroup4(), expected.getProductGroup4());
		assertEquals(rfqItem.isSalesCostFlag(), expected.isSalesCostFlag());
	}
	
	public void fillInPricerInfoTest3() {
		material.getMaterialRegaional("China").setSalesCostFlag(false);
		np.setCost(1.05d);
		np.setMinSellPrice(1.2d);
		cp.setCost(1.06d);
		cp.setMinSellPrice(1.1d);
		pp.setCost(1.07d);
		pp.getQuantityBreakPrices().get(0).setQuantityBreakPrice(1.2d);
		
		rfqItem.setSpecialPriceIndicator(false);
		rfqItem.setTargetResale("1.15");
		rfqItem.setRequiredQty("100");
		material.applyAQLogic(rfqItem, region, soldTo, end, allowedCustomers, submissionType);
		assertEquals(rfqItem.matchAQConditions(), true);
		assertEquals(rfqItem.getCost().doubleValue(), 1.06d);

	}
	
	public void fillInPricerInfoTest30() {
		material.getMaterialRegaional("China").setSalesCostFlag(false);
		np.setCost(1.05d);
		np.setMinSellPrice(1.2d);
		cp.setCost(1.06d);
		cp.setMinSellPrice(1.1d);
		pp.setCost(1.07d);
		pp.getQuantityBreakPrices().get(0).setQuantityBreakPrice(1.2d);
		
		rfqItem.setSpecialPriceIndicator(false);
		rfqItem.setTargetResale("1.15");
		rfqItem.setRequiredQty("100");
		
		material.applyAQLogic(rfqItem, region, soldTo, end, allowedCustomers, submissionType);
//		assertEquals(rfqItem.matchAQConditions(), false);
		assertEquals(rfqItem.getCost().doubleValue(), 1.06d);
	}
	
	public void fillInPricerInfoTest4() {
		material.getMaterialRegaional("China").setSalesCostFlag(false);
		np.setCost(1.05d);
		np.setMinSellPrice(1.2d);
		cp.setCost(1.06d);
		cp.setMinSellPrice(1.1d);
		pp.setCost(1.07d);
		pp.getQuantityBreakPrices().get(0).setQuantityBreakPrice(1.2d);
		
		rfqItem.setTargetResale("0.9");
		rfqItem.setRequiredQty("100");
		material.applyAQLogic(rfqItem, region, soldTo, end, allowedCustomers, submissionType);
		assertEquals(rfqItem.matchAQConditions(), false);
		assertEquals(rfqItem.getCost().doubleValue(), 1.05d);

	}	
}
