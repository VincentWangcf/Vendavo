package com.avnet.emasia.webquote.entity;

import java.math.BigDecimal;
import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;

import org.apache.commons.lang.StringUtils;

//@Embeddable
public class Money {

	// @Enumerated(EnumType.STRING)
	private Currency currency;

	private BigDecimal amount;

	/*
	 * public Money() {
	 * 
	 * }
	 * 
	 * 
	 * public Money(String curr, BigDecimal amount) { if
	 * (StringUtils.isEmpty(curr) || amount == null) { throw new
	 * IllegalArgumentException(); }
	 * 
	 * this.currency = Currency.valueOf(curr); this.amount = amount;
	 * 
	 * }
	 * 
	 * public Money(String curr, String amount) { if (StringUtils.isEmpty(curr)
	 * || StringUtils.isEmpty(amount)) { throw new IllegalArgumentException(); }
	 * 
	 * this.currency = Currency.valueOf(curr); this.amount = new
	 * BigDecimal(amount);
	 * 
	 * }
	 */

	private Money(BigDecimal amount, Currency curr) {
		this.amount = amount;
		this.currency = curr;
	}

	public static Money of(String amount, String curr) {
		if (StringUtils.isEmpty(amount) || StringUtils.isEmpty(curr)) {
			return null;
		}
		try {
			return new Money(new BigDecimal(amount), Currency.valueOf(curr));
		} catch (Exception e) {
			return null;
		}
	}

	public static Money of(BigDecimal amount, Currency curr) {
		if (amount == null || curr == null) {
			return null;
		}
		return new Money(amount, curr);
	}

	public static Money of(Double amount, Currency curr) {
		if (amount == null || curr == null) {
			return null;
		}
		try {
			return new Money(new BigDecimal(amount), curr);
		} catch (Exception e) {
			return null;
		}
	}

	public static Money of(Double amount, String curr) {
		if (amount == null || StringUtils.isEmpty(curr)) {
			return null;
		}
		try {
			return new Money(new BigDecimal(amount), Currency.valueOf(curr));
		} catch (Exception e) {
			return null;
		}
	}

	public Currency getCurrency() {
		return currency;
	}

	public BigDecimal getAmount() {
		return amount;
	}

	// no setters allowed

	private List<ExchangeRate> exchangeRates;

	Money convertTo(Currency toCurrency, BizUnit bizUnit, Customer customer, Date date) {

		if (toCurrency == null || bizUnit == null || customer == null || date == null) {
			throw new IllegalArgumentException();
		}

		if (toCurrency == this.currency) {
			return this;
		}

		BigDecimal exchRateFrom = null;
		BigDecimal exchRateTo = null;
		List<ExchangeRate> fromRates = null;
		List<ExchangeRate> toRates = null;

		if (this.currency == Currency.USD) {
			exchRateFrom = BigDecimal.ONE;
		} else {
			fromRates = findExchangeRate(getCurrency(), bizUnit, customer, date);
		}

		if (toCurrency == Currency.USD) {
			exchRateTo = BigDecimal.ONE;
		} else {
			toRates = findExchangeRate(toCurrency, bizUnit, customer, date);
		}
		
		if (exchRateFrom == null ^ exchRateTo == null) {
			if (exchRateFrom == null && ! fromRates.isEmpty()) {
				exchRateFrom =  fromRates.get(0).getRateInTotal();
			}
			if (exchRateTo == null && ! toRates.isEmpty()) {
				exchRateTo =  fromRates.get(0).getRateInTotal();
			}
			
		}  else { //
			for(ExchangeRate fromRate : fromRates) {
				boolean customerRate =  StringUtils.isNotEmpty(fromRate.getSoldToCode());
				for(ExchangeRate toRate : toRates) {
					if (customerRate ==  StringUtils.isNotEmpty(toRate.getSoldToCode())) {
						exchRateFrom = fromRate.getRateInTotal();
						exchRateFrom = toRate.getExRateTo();
					}
				}
			}
		}
		
		if (exchRateFrom != null && exchRateTo != null) {
			return Money.of(getAmount().multiply(exchRateFrom).divide(exchRateTo), toCurrency);
		}

		return null;
	}

	private List<ExchangeRate> findExchangeRate(Currency toCurrency, BizUnit bizUnit, Customer customer, Date date) {
		List<ExchangeRate> rates1 = exchangeRates.stream().filter(
				rate -> rate.getCurrFrom().equals(Currency.USD.name())
				&& rate.getCurrTo().equals(toCurrency.name()) 
				&& rate.getBizUnit().equals(bizUnit.getName())
				&& StringUtils.isNotEmpty(rate.getSoldToCode())
				&& rate.getSoldToCode().equals(customer.getCustomerNumber()) 
				&& rate.getValidFrom().after(date)
				&& rate.getValidTo().before(date)).
		collect(Collectors.toList());

		List<ExchangeRate> rates2 = exchangeRates.stream().filter(rate -> 
			rate.getCurrFrom().equals(Currency.USD.name())
			&& rate.getCurrTo().equals(toCurrency.name()) 
			&& rate.getBizUnit().equals(bizUnit.getName())
			&& rate.getValidFrom().after(date) 
			&& rate.getValidTo().before(date)
			&& StringUtils.isEmpty(rate.getSoldToCode()))
		.collect(Collectors.toList());

		rates1.addAll(rates2);
		return rates1;
	}

}
