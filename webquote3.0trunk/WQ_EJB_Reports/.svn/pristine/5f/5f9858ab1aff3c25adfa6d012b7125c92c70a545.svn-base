package com.avnet.emasia.webquote.reports.ejb.remote.impl;

import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.ejb.EJB;
import javax.ejb.Remote;
import javax.ejb.Stateless;

import org.apache.poi.xssf.streaming.SXSSFWorkbook;

import com.avnet.emasia.webquote.entity.ExcelReport;
import com.avnet.emasia.webquote.entity.Material;
import com.avnet.emasia.webquote.entity.User;
import com.avnet.emasia.webquote.poi.ExcelGenerator;
import com.avnet.emasia.webquote.quote.ejb.MaterialSB;
import com.avnet.emasia.webquote.quote.vo.PartMasterCriteria;
import com.avnet.emasia.webquote.reports.constant.ReportConstant;
import com.avnet.emasia.webquote.reports.ejb.ExcelReportSB;
import com.avnet.emasia.webquote.reports.ejb.remote.OffLineRemote;
import com.avnet.emasia.webquote.reports.util.ReportConvertor;
import com.avnet.emasia.webquote.reports.util.ReportsUtil;
import com.avnet.emasia.webquote.user.ejb.UserSB;
import com.avnet.emasia.webquote.utilities.common.SysConfigSB;
import com.avnet.emasia.webquote.vo.OfflineReportParam;

@Stateless
@Remote(OffLineRemote.class)
public class PartMasterOffLineReport extends OffLineReport implements OffLineRemote {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	private static final Logger LOG = Logger.getLogger(PartMasterOffLineReport.class.getName());

	@EJB
	ExcelReportSB excelReportSB;
	
	@EJB
	private transient UserSB userSb;
	
	@EJB
	private transient MaterialSB materialSB;
	
	@EJB
	private SysConfigSB sysConfigSB;

	@SuppressWarnings("rawtypes")
	@Override
	public void sendOffLineReport(OfflineReportParam param) throws Exception {
		List<Material> resultList = null;
		SXSSFWorkbook workbook = null;
		try {
			int pageSize = 30000;
			User user = userSb.findByEmployeeIdLazily(param.getEmployeeId());
			ExcelReport excelReport = excelReportSB.getExcelReportByReportName(param.getReportName());
			PartMasterCriteria criteria = (PartMasterCriteria) param.getCriteriaBean();
			int totalRecords = materialSB.partMasterEnquiryCount(criteria);
			LOG.info("search result count:" + totalRecords);
			int count = totalRecords / pageSize;
			LOG.info("count:" + count);
			String templatePath = sysConfigSB.getProperyValue(ReportConstant.TEMPLATE_PATH);
			String reportFilePath = sysConfigSB.getProperyValue(ReportConstant.OFFLINE_REPORT_PATH);
			String newfileName = ReportsUtil.generateOfflineReportFileName(user.getEmployeeId(), "xlsx",param.getReportName());
			//reportFilePath = "C:/david/sharefolder/tempd";
			workbook = ExcelGenerator.generateExcelTemplate(excelReport, param.getReportName(), templatePath);
			for (int i = 0; i <= count; i++) {
				criteria.setStart(i * pageSize);
				if (pageSize > (totalRecords - (i * pageSize))) {
					criteria.setEnd(totalRecords - (i * pageSize));
				} else {
					criteria.setEnd(pageSize);
				}

				resultList = new ArrayList<Material>();
				resultList = materialSB.partMasterEnquiry(criteria, false);
				List newList = ReportConvertor.convertPartMasterForQC(resultList, criteria.getRegion());
				workbook = ExcelGenerator.generateExcelFile(workbook, newList, excelReport);
				resultList.clear();
				resultList = null;
			}
			ExcelGenerator.outputExcelFile(workbook, reportFilePath + File.separator + newfileName);
			sendOfflineEmail(user,newfileName);
		} catch (Exception e) {
			LOG.log(Level.WARNING, "Exception PartMaster sendOffLineReport : "+e.getMessage(), e);
			e.printStackTrace();
			if(workbook != null) {
				workbook.dispose();
			}
			throw e;
		}finally {
			if(resultList != null) {
				resultList.clear();
				resultList = null;
			}
		}
		
	
	}

	

}
