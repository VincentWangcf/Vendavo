package com.avnet.emasia.webquote.reports.ejb.remote.impl;

import java.io.File;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.ejb.EJB;
import javax.ejb.Remote;
import javax.ejb.Stateless;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.streaming.SXSSFSheet;
import org.apache.poi.xssf.streaming.SXSSFWorkbook;
import org.eclipse.jetty.util.log.Log;

import com.avnet.emasia.webquote.commodity.bean.PricerUploadTemplateBean;
import com.avnet.emasia.webquote.commodity.constant.PricerConstant;
import com.avnet.emasia.webquote.commodity.ejb.PricerEnquirySB;
import com.avnet.emasia.webquote.entity.ExcelReport;
import com.avnet.emasia.webquote.entity.Material;
import com.avnet.emasia.webquote.entity.User;
import com.avnet.emasia.webquote.exception.WebQuoteException;
import com.avnet.emasia.webquote.poi.ExcelGenerator;
import com.avnet.emasia.webquote.quote.ejb.MaterialSB;
import com.avnet.emasia.webquote.quote.vo.PartMasterCriteria;
import com.avnet.emasia.webquote.reports.constant.ReportConstant;
import com.avnet.emasia.webquote.reports.ejb.ExcelReportSB;
import com.avnet.emasia.webquote.reports.ejb.remote.OffLineRemote;
import com.avnet.emasia.webquote.reports.util.ReportConvertor;
import com.avnet.emasia.webquote.reports.util.ReportsUtil;
import com.avnet.emasia.webquote.user.ejb.UserSB;
import com.avnet.emasia.webquote.utilities.bean.ExcelAliasBean;
import com.avnet.emasia.webquote.utilities.bean.PricerExcelAlias;
import com.avnet.emasia.webquote.utilities.common.SysConfigSB;
import com.avnet.emasia.webquote.vo.OfflineReportParam;

@Stateless
@Remote(OffLineRemote.class)
public class PricerOffLineReport extends OffLineReport implements OffLineRemote {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	private static final Logger LOG = Logger.getLogger(PricerOffLineReport.class.getName());

	@EJB
	ExcelReportSB excelReportSB;
	
	@EJB
	private transient UserSB userSb;
	
	@EJB
	private transient MaterialSB materialSB;
	
	@EJB
	private transient PricerEnquirySB pricerEnquirySB;
	
	@EJB
	private SysConfigSB sysConfigSB;

	@SuppressWarnings("rawtypes")
	@Override
	public void sendOffLineReport(OfflineReportParam param) throws Exception {
		LOG.info("Call sendOffLineReport begin ,param ::" +param.toString());
		List<PricerUploadTemplateBean> resultList = null;
		try {
			int pageSize = 30000;
			User user = userSb.findByEmployeeIdLazily(param.getEmployeeId());
			ExcelReport excelReport = excelReportSB.getExcelReportByReportName(param.getReportName());
			PricerUploadTemplateBean criteria = (PricerUploadTemplateBean) param.getCriteriaBean();
			String templatePath = sysConfigSB.getProperyValue(ReportConstant.TEMPLATE_PATH);
			String reportFilePath = sysConfigSB.getProperyValue(ReportConstant.OFFLINE_REPORT_PATH);
			String newfileName = ReportsUtil.generateOfflineReportFileName(user.getEmployeeId(), "xlsx",param.getReportName());
			/*reportFilePath = "C:/david/sharefolder/tempd";
			templatePath = "C:/david/sharefolder/tempd";*/
			SXSSFWorkbook workbook = ExcelGenerator.generateExcelTemplate(excelReport, param.getReportName(), templatePath);
			boolean needContinueFind = true;
			for (int i = 0; needContinueFind ; i++) {
				resultList = pricerEnquirySB.pricerEnquiry(criteria, true, i * pageSize, (i+1)*pageSize);
				needContinueFind = resultList.size()<pageSize? false:true;
				workbook = generateExcelFileForHasAnotationBean(workbook, resultList);
				resultList.clear();
				resultList = null;
			}
			ExcelGenerator.outputExcelFile(workbook, reportFilePath + File.separator + newfileName);
			sendOfflineEmail(user,newfileName);
			LOG.info("Call sendOffLineReport end "+param.toString());
		} catch (Exception e) {
			//LOG.log(Level.WARNING, "Exception PRICER sendOffLineReport : "+e.getMessage() + e.getStackTrace(), e);
			LOG.severe("Exception PRICER sendOffLineReport : "+e.getMessage() + e.getStackTrace());
			throw e;
		}finally {
			if(resultList != null) {
				resultList.clear();
				resultList = null;
			}
		}
	}

	public static SXSSFWorkbook generateExcelFileForHasAnotationBean(SXSSFWorkbook workbook, List resultList)
			throws WebQuoteException {
		SXSSFSheet sh = (SXSSFSheet) workbook.getSheetAt(0);
		Object bean = null;
		List<ExcelAliasBean> excelAliasTreeSet = getPricerExcelAliasAnnotation(PricerUploadTemplateBean.class);
		//List<ExcelAliasBean> excelAliasTreeSet = PricerUploadHelper.getPricerExcelAliasAnnotation();
		if(resultList != null && resultList.size() > 0) {
			for (int idx = 0; idx < resultList.size(); idx++) {
				int lastRowIndex = sh.getLastRowNum();
				//for avoid get error num when first get row num.
				if(lastRowIndex==0) {
					lastRowIndex= PricerConstant.PRICER_TEMPLATE_HEADER_ROW_NUMBER-1;
				}
				bean = resultList.get(idx);
				
				Row row = sh.createRow(lastRowIndex+1);
				Cell cell = null;
				String value =null;
				for(ExcelAliasBean excelAliasBean:excelAliasTreeSet){					
					cell = row.createCell(excelAliasBean.getCellNum()-1);
					cell.setCellType(Cell.CELL_TYPE_STRING);

					if(cell!=null){
						String fieldName = excelAliasBean.getFieldName();
						Method met;
						try {
							met = bean.getClass().getMethod("get"+fieldName.substring(0,1).toUpperCase() + fieldName.substring(1));
							value = (String) met.invoke(bean) ;
							cell.setCellValue(value);
						} catch (Exception e) {
							LOG.log(Level.SEVERE, "Exception occurred for att: "+bean+", Exception message: "+e.getMessage(), e); 
						}
					}	
				}
			}
		}
		return workbook;
	}
	
	
	
	public static List<ExcelAliasBean> getPricerExcelAliasAnnotation(Class<?> beanClass ){
		List<ExcelAliasBean> treeSet = new ArrayList<ExcelAliasBean>();
	
		Field[] fields = beanClass.getDeclaredFields();
	
		for(Field f :fields){
			f.setAccessible(true);
			PricerExcelAlias annontation = f.getAnnotation(PricerExcelAlias.class);
			if(annontation==null) continue;

			ExcelAliasBean bean = new ExcelAliasBean();
			bean.setAliasName( annontation.name());
			bean.setCellNum(Integer.valueOf(annontation.cellNum()));
			bean.setFieldName(f.getName());
			bean.setFieldLength(Integer.valueOf(annontation.fieldLength()));
			String mandatory = annontation.mandatory();
			if(mandatory!=null){
				String[] temp = mandatory.split(",");
				if(temp.length==6){
					if(temp[0].equals("true")){
						bean.setNormalMandatory(true);
					}
					if(temp[1].equals("true")){
						bean.setProgramMandatory(true);
					}
					if(temp[2].equals("true")){
						bean.setContractMandatory(true);
					}
					if(temp[3].equals("true")){
						bean.setPastMasterMandatory(true);
					}
					if(temp[4].equals("true")){
						bean.setSimplePricer(true);
					}
					if(temp[5].equals("true")){
						bean.setSalesCostPricer(true);
					}
				}
			}
			treeSet.add(bean);
		}
		Collections.sort(treeSet,new ExcelAliasComparator());
		return treeSet;
	}
	
	static class ExcelAliasComparator implements Comparator<ExcelAliasBean> {

		public int compare(ExcelAliasBean f1, ExcelAliasBean f2) {

			if (f1.getCellNum() > f2.getCellNum()) {
				return 1;
			} else if (f1.getCellNum() == f2.getCellNum()) {
				return 0;
			} else {
				return -1;
			}
		}
	}	
	

}
