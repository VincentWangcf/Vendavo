package com.avnet.emasia.webquote.quote.ejb;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.logging.Logger;

import javax.ejb.EJB;
import javax.ejb.LocalBean;
import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

import com.avnet.emasia.webquote.entity.BizUnit;
import com.avnet.emasia.webquote.entity.Material;
import com.avnet.emasia.webquote.entity.NormalPricer;
import com.avnet.emasia.webquote.entity.RestrictedCustomerMapping;
import com.avnet.emasia.webquote.entity.User;
import com.avnet.emasia.webquote.exception.WebQuoteRuntimeException;
import com.avnet.emasia.webquote.quote.ejb.constant.QuoteSBConstant;
import com.avnet.emasia.webquote.quote.vo.CatalogSearchItemBean;
import com.avnet.emasia.webquote.quote.vo.CatalogSearchResult;
import com.avnet.emasia.webquote.quote.vo.RestrictedCustomerMappingParameter;
import com.avnet.emasia.webquote.quote.vo.RestrictedCustomerMappingSearchCriteria;
import com.avnet.emasia.webquote.user.ejb.UserSB;
import com.avnet.emasia.webquote.utilities.util.MaterialHelper;
import com.avnet.emasia.webquote.vo.PricerInfo;


/**
 * Session Bean implementation class QuoteSB
 */
@Stateless
@LocalBean
public class CatalogSearchSB {
	
	@PersistenceContext(unitName="Server_Source")
	EntityManager em;
	
	@EJB
	UserSB userSB;
	@EJB
	RestrictedCustomerMappingSB restrictedCustomerSB;
	
	@EJB
	PricerTypeMappingSB pricerTypeMappingSB;
	
	@EJB
	MaterialSB materialSB;
	
	@EJB
	QuoteSB quoteSB;
	
	@EJB
	private CustomerSB customerSB;
	
	private static final Logger LOG =Logger.getLogger(CatalogSearchSB.class.getName());
    
	public CatalogSearchSB(){
		
	}
	

	
public List<CatalogSearchResult> checkPrice(List<CatalogSearchItemBean> items, User user, String selectedBizUnit){
		
		List<CatalogSearchResult> results = new ArrayList<CatalogSearchResult>();
		
		List<RestrictedCustomerMapping> restrictedCustomerList =  getRestrictedCustomerList(items,  selectedBizUnit);
		
/*		for(InstantPriceCheckItem item : items)
		{
			
			if(isEmpty(item.getFullMfrPart())){
				continue;
			}
			

			//Check book price
			List<NormalPricer> materialDetails = findBookPrice(item, user, selectedBizUnit);
			List<NormalPricer> newMaterialDetails = filterOutRestrictCustomer(materialDetails,item, restrictedCustomerList);
			
			List<PricerInfo> pricerInfoList = getDefaultCostIndicator(newMaterialDetails,item, user, selectedBizUnit);
			//List<MaterialDetail> newMaterialDetails = pricerTypeMappingSB.filterOutFuturePriceForInstantCheck(materialDetails, selectedBizUnit);

			//Find the MaterialDetail with lowest cost one
			//List<MaterialDetail> lowestCostMaterialDetails = findMinCostMaterialDetail(newMaterialDetails2);
			for(PricerInfo pricerInfo:  pricerInfoList)
			{
				CatalogSearchResult result = convertToCheckResult(pricerInfo, item);
				result.setRequiredQty(item.getRequestQty());
				result.setSoldToCustomerCode(item.getSoldToCode());
				results.add(result);
			}
			
		}*/
		
		user = em.find(User.class, user.getId());
		List<PricerInfo> pricerInfos = new ArrayList<>();

		for (CatalogSearchItemBean item : items) {

			if(isEmpty(item.getFullMfrPart())){
				continue;
			}
			
			List<Material> materials = materialSB.wildcardFind(item.getMfr().toUpperCase(), item.getFullMfrPart().toUpperCase());
			
			for (Material material : materials) {
				PricerInfo pricerInfo = new PricerInfo();
				pricerInfo.setBizUnit(selectedBizUnit);
				pricerInfo.setRequestedQty(item.getRequestQty());
				pricerInfo.setMfr(material.getManufacturer().getName());
				pricerInfo.setFullMfrPartNumber(material.getFullMfrPartNumber());
				pricerInfo.setSoldToCustomer(customerSB.findByPK(item.getSoldToCode()));
				pricerInfo.setSoldToCustomerName(item.getSoldToParty());
				pricerInfo.setEndCustomer(customerSB.findByPK(item.getEndCustomerCode()));
				pricerInfo.setEndToCustomerName(item.getEndCustomer());
				pricerInfo.setAllowedCustomers(user.getCustomers());
				material.fillDefaultCostIndicatorInPricerInfo(pricerInfo);
				if (pricerInfo.getCostIndicator() != null) {
					pricerInfos.add(pricerInfo);
				}
			}
			
		}
		for(PricerInfo pricerInfo:  pricerInfos) {
			CatalogSearchResult result = convertToCheckResult(pricerInfo);
			result.setRequiredQty(pricerInfo.getRequestedQty());
//			result.setSoldToCustomerCode(pricerInfo.getSoldToCustomer().getCustomerNumber());
			results.add(result);
		}		
		
		
		int i = 1;
		for(CatalogSearchResult result : results){
			result.setSeq(i++);
		}
		
		return results;
	}

	
	
	private boolean isEmpty(String source){
		if(source == null){
			return true;
		}
		if(source.equals("")){
			return true;
		}
		return false;
	}
	
	private Date convertPriceValidityToQuoteExpiryDate(String priceValidity){
		if(priceValidity == null){
			return null;
		}
		
		Date validity = null;

		if (priceValidity != null) {
			if (priceValidity.matches("^(0|[1-9][0-9]*)$")) {
				int shift = Integer.parseInt(priceValidity);
				validity = shiftDate(new Date(), shift);
			} else {
				SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
				try {
					validity = sdf.parse(priceValidity);
				} catch (ParseException e) {
					throw new WebQuoteRuntimeException(e.getMessage(),new RuntimeException(e));
				}
			}
		}
		validity = shiftDate(validity, QuoteSBConstant.QUOTE_EXPIRY_DATE_SHIFT_NORMAL);
		return validity;
	}
	
	private static Date shiftDate(Date date, int shift){
		Calendar cal = Calendar.getInstance();
		cal.setTime(date);
		cal.add(Calendar.DATE, shift);
		return cal.getTime();
	}
	
	
	public List<RestrictedCustomerMapping> getRestrictedCustomerList(List<CatalogSearchItemBean> items, String selectedBizUnit )
	{
		List<RestrictedCustomerMappingSearchCriteria> restrictedCustomerCriteriaList = new ArrayList<RestrictedCustomerMappingSearchCriteria>();
		List<RestrictedCustomerMapping>  returnRestrictedCustomerList = new ArrayList<RestrictedCustomerMapping>();
		if(items!=null && items.size()>0)
		{
			for(CatalogSearchItemBean ipci: items)
			{
				if(ipci.getSoldToCode()!=null && !ipci.getSoldToCode().isEmpty())
				{
					RestrictedCustomerMappingSearchCriteria rcc = new RestrictedCustomerMappingSearchCriteria();
					rcc.setBizUnit(selectedBizUnit);
					rcc.setMfrKeyword(ipci.getMfr());
					rcc.setSoldToCodeKeyword(ipci.getSoldToCode());
					restrictedCustomerCriteriaList.add(rcc);
				}
			}
			returnRestrictedCustomerList = restrictedCustomerSB.findRestrictedCust(restrictedCustomerCriteriaList);				
		}
		else
		{
			returnRestrictedCustomerList = new ArrayList<RestrictedCustomerMapping>();
		}
		
		return returnRestrictedCustomerList;
	}
	
	public List<NormalPricer> filterOutRestrictCustomer(List<NormalPricer> materialDetails, CatalogSearchItemBean item, List<RestrictedCustomerMapping> restrictedCustomerList)
	{
		//LOG.info("== CatalogSearchSB filterOutRestrictCustomer");
		List<NormalPricer> newMaterialDetails = new ArrayList<NormalPricer>();
		if(materialDetails!=null && materialDetails.size()>0)
			for(NormalPricer md : materialDetails)
			{
				RestrictedCustomerMappingParameter rcmp = new RestrictedCustomerMappingParameter();
				Material material = md.getMaterial();
				rcmp.setCostIndicator(md.getCostIndicator().getName());
				rcmp.setMfr(material.getManufacturer().getName());
				if(material.getProductGroup1()!=null)
				rcmp.setProductGroup1Name(material.getProductGroup1().getName());
				if(material.getProductGroup2()!=null)
				rcmp.setProductGroup2Name(material.getProductGroup2().getName());
				
				rcmp.setProductGroup3Name(material.getProductGroup3());
				rcmp.setProductGroup4Name(material.getProductGroup4());
				rcmp.setRequiredPartNumber(material.getFullMfrPartNumber());
				rcmp.setSoldToCustomerNumber(item.getSoldToCode());
				if(!restrictedCustomerSB.hasMatchedRetrictedCustomer( rcmp, restrictedCustomerList))
				{
					newMaterialDetails.add(md);
				}
			}
		//LOG.info("== CatalogSearchSB filterOutRestrictCustomer return : "+newMaterialDetails.size());
		return newMaterialDetails;
	}
	
	public List<PricerInfo> getDefaultCostIndicator(List<NormalPricer> materialDetails, CatalogSearchItemBean item, User user , String selectedBizUnit)
	{
		//LOG.info("== CatalogSearchSB getDefaultCostIndicator");
		List<PricerInfo> returnMaterialDetails = new ArrayList<PricerInfo>();
		Set<String> materialKeySet = new HashSet<String>();
		if(materialDetails==null)
			return returnMaterialDetails;
		for(NormalPricer md : materialDetails)
		{
			String key = md.getMaterial().getManufacturer().getName()+"|"+md.getMaterial().getFullMfrPartNumber();
			if(materialKeySet.contains(key))
			{
				continue;
			}
			else
			{
				materialKeySet.add(key);
			}
			
			PricerInfo pricerInfo = new PricerInfo();
			BizUnit bizUnit = new BizUnit();
			bizUnit.setName(selectedBizUnit);
			pricerInfo.setBizUnit(bizUnit.getName());
			pricerInfo.setMfr(md.getMaterial().getManufacturer().getName());
			pricerInfo.setFullMfrPartNumber(md.getMaterial().getFullMfrPartNumber());
			pricerInfo.setSoldToCustomerName(item.getSoldToParty());
			pricerInfo.setSoldToCustomerNumber(item.getSoldToCode());
			pricerInfo.setEndToCustomerName(item.getEndCustomer());
			pricerInfo.setEndToCustomerNumber(item.getEndCustomerCode());
			pricerInfo.setSalesEmployeeId(user.getEmployeeId());
			
			pricerInfo = quoteSB.populateDefaultCostIndicator(pricerInfo);

			if(!MaterialHelper.isSpecialMaterial(md.getMaterial()))
            {
			    returnMaterialDetails.add(pricerInfo);
            }
				
		}
		return returnMaterialDetails;
	}
	
	

	

	

	
	private CatalogSearchResult convertToCheckResult(PricerInfo pricerInfo){
		LOG.info("== CatalogSearchSB convertToCheckResult ");
		CatalogSearchResult result = new CatalogSearchResult();
		result.setMfr(pricerInfo.getMfr());
		result.setFullMfrPart(pricerInfo.getFullMfrPartNumber());
		result.setMpq(pricerInfo.getMpq());
		result.setMoq(pricerInfo.getMoq());
		result.setTargetResale(pricerInfo.getBottomPrice());
		if(pricerInfo.getCostIndicator() != null){
			result.setCostIndicator(pricerInfo.getCostIndicator());
		}
		
		//result.setQuoteExpiryDate(null);
		result.setPriceValidity(pricerInfo.getPriceValidity());
		result.setQuoteExpiryDate(convertPriceValidityToQuoteExpiryDate(pricerInfo.getPriceValidity()));
		
		
		result.setLeadTime(pricerInfo.getLeadTime());
		result.setBizUnit(pricerInfo.getBizUnit());
		result.setDescription(pricerInfo.getDescription());
		
		//WebQuote 2.2 enhancement: instance pricing checking
		if(pricerInfo.isContractPricer())
		{
			result.setPriceType(QuoteSBConstant.PRICE_TYPE_CONTRACT);
			result.setQuotationEffectiveDate(null);

		    result.setSoldToCustomerCode(pricerInfo.getContractSoldToCustomerNumber());
		    result.setSoldToCustomerName(pricerInfo.getContractSoldToCustomerName());
		    LOG.info("== CatalogSearchSB convertToCheckResult result.setSoldToCustomerCode:"+result.getSoldToCustomerCode());
		    LOG.info("== CatalogSearchSB convertToCheckResult result.setSoldToCustomerName:"+result.getSoldToCustomerName());

		}
		else
		{
			if(pricerInfo.getMaterialTypeId()==null || "".equalsIgnoreCase(pricerInfo.getMaterialTypeId()))
			{
				result.setPriceType("");
			}
			else if(QuoteSBConstant.PRICE_TYPE_NORMAL.equalsIgnoreCase(pricerInfo.getMaterialTypeId()))
			{
				result.setPriceType(QuoteSBConstant.PRICE_TYPE_NORMAL);
				result.setQuotationEffectiveDate(pricerInfo.getDisplayQuoteEffDate());
				result.setSoldToCustomerCode("");
				result.setSoldToCustomerName("");
			}
			else if(QuoteSBConstant.PRICE_TYPE_PROGRAM.equalsIgnoreCase(pricerInfo.getMaterialTypeId()))
			{
				result.setPriceType(QuoteSBConstant.PRICE_TYPE_PROGRAM);
				result.setQuotationEffectiveDate(pricerInfo.getDisplayQuoteEffDate());
				result.setSoldToCustomerCode("");
				result.setSoldToCustomerName("");
			}
		}
		
		return result;
	}
	

}
