package com.avnet.emasia.webquote.commodity.ejb; 

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.ejb.Stateless;
import javax.ejb.TransactionManagement;
import javax.ejb.TransactionManagementType;
import javax.persistence.Column;
import javax.persistence.Query;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Join;
import javax.persistence.criteria.JoinType;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import com.avnet.emasia.webquote.commodity.bean.PricerUploadParametersBean;
import com.avnet.emasia.webquote.commodity.bean.PricerUploadTemplateBean;
import com.avnet.emasia.webquote.commodity.bean.VerifyEffectiveDateResult;
import com.avnet.emasia.webquote.commodity.constant.PRICER_TYPE;
import com.avnet.emasia.webquote.commodity.constant.PricerConstant;
import com.avnet.emasia.webquote.commodity.constant.QED_CHECK_STATE;
import com.avnet.emasia.webquote.commodity.dao.PricerUploadCommonSB;
import com.avnet.emasia.webquote.commodity.util.CommodityUtil;
import com.avnet.emasia.webquote.commodity.util.PricerUtils;
import com.avnet.emasia.webquote.entity.BizUnit;
import com.avnet.emasia.webquote.entity.ContractPricer;
import com.avnet.emasia.webquote.entity.CostIndicator;
import com.avnet.emasia.webquote.entity.Customer;
import com.avnet.emasia.webquote.entity.Manufacturer;
import com.avnet.emasia.webquote.entity.Material;
import com.avnet.emasia.webquote.entity.MaterialRegional;
import com.avnet.emasia.webquote.entity.NormalPricer;
import com.avnet.emasia.webquote.entity.Pricer;
import com.avnet.emasia.webquote.entity.ProductCategory;
import com.avnet.emasia.webquote.entity.ProgramPricer;
import com.avnet.emasia.webquote.entity.QuantityBreakPrice;
import com.avnet.emasia.webquote.entity.SalesCostPricer;
import com.avnet.emasia.webquote.entity.SalesCostType;
import com.avnet.emasia.webquote.entity.User;
import com.avnet.emasia.webquote.exception.WebQuoteException;
import com.avnet.emasia.webquote.utilities.util.QuoteUtil;

@Stateless
@TransactionManagement(TransactionManagementType.BEAN)
public class SalesCostPricerUploadSB  extends PricerUploadCommonSB {
	
	private static final Logger LOG =Logger.getLogger(SalesCostPricerUploadSB.class.getName());
	/**
	 *mfr + p/n + pricer type + region + salescost type((ZIM/(ZBMP/ZBMD)) ZBMP ARE THE SAME AS ZBMP) + QED
	 *
	 *
	 *@Temporal(TemporalType.TIMESTAMP)
	*@Column(name = "QUOTATION_EFFECTIVE_DATE")
	*private Date quotationEffectiveDate;
	
	*@Temporal(TemporalType.TIMESTAMP)
	 *@Column(name = "QUOTATION_EFFECTIVE_TO")
	 *private Date quotationEffectiveTo;

	 **/
	//TODO
	public SalesCostPricer getSCPricerByComponentKey(Material material, PricerUploadTemplateBean bean) {
		if(material == null ||bean == null ){
			return null;
		}
		StringBuilder sql = new StringBuilder();
		sql.append(" SELECT p FROM SalesCostPricer p WHERE p.material = :material ");//AND p.pricerType =:pricerType 
		sql.append(" AND p.bizUnitBean.name = :bizUnit ");
		sql.append(" AND  ");
		
		String sqlSalesTypeParam = null;
		if(SalesCostType.ZBMD.toString().equals(bean.getSalesCostType()) 
				|| SalesCostType.ZBMP.toString().equals(bean.getSalesCostType())) {
			sqlSalesTypeParam = " (p.salesCostType =:ZBMD  or  p.salesCostType =:ZBMP) " ;
		} else if (SalesCostType.ZINM.toString().equals(bean.getSalesCostType())) {
			sqlSalesTypeParam = " p.salesCostType =:ZINM ";
		}
		
		sql.append(sqlSalesTypeParam);
		
		String qedStringInFile = bean.getQuotationEffectiveDate();
		//displayQuoteEffDate quotationEffectiveTo quotationEffectiveDate
		/**
		 * qedStringInFile not empty
		 * must match all as below:
		 * first : displayQuoteEffDate must equals QED in excel
		 * second : quotationEffectiveDate equals QED in excel or
		 * 		   not overlap in [quotationEffectiveDate,quotationEffectiveTo]
		 **/
		if(!QuoteUtil.isEmpty(qedStringInFile)){
			sql.append(" AND (p.displayQuoteEffDate =:effectiveForm AND (p.quotationEffectiveDate =:effectiveForm "
					+" OR p.quotationEffectiveDate IS NUL OR p.quotationEffectiveTo IS NUL "
					+" OR NOT (p.quotationEffectiveDate <=:effectiveTo AND p.quotationEffectiveTo >=:effectiveForm)"
					+ "))");
		}else {
			//qedStringInFile is empty only when displayQuoteEffDate is null ,this situation can be matched
			sql.append(" AND p.displayQuoteEffDate IS NULL");
		}
			
		Query query = em.createQuery(sql.toString());
		query.setParameter("material", material);
		///query.setParameter("pricerType", PRICER_TYPE.SALESCOST.getName());
		query.setParameter("bizUnit", bean.getRegion());
		
		if(SalesCostType.ZBMD.toString().equals(bean.getSalesCostType()) 
				|| SalesCostType.ZBMP.toString().equals(bean.getSalesCostType())) {
			query.setParameter("ZBMD", SalesCostType.ZBMD);
			query.setParameter("ZBMP", SalesCostType.ZBMP);
		}else if (SalesCostType.ZINM.toString().equals(bean.getSalesCostType())) {
			query.setParameter("ZINM", SalesCostType.ZINM);
		}
		/*// FOR PARAMETER :salesCostType
		if(SalesCostType.ZBMD.toString().equals(bean.getSalesCostType()) 
				|| SalesCostType.ZBMP.toString().equals(bean.getSalesCostType())) {
			query.setParameter("salesCostType", 
					"('" + SalesCostType.ZBMD.toString() +"','" + SalesCostType.ZBMP.toString() + "')");
		} else {
			query.setParameter("salesCostType", "('" + bean.getSalesCostType() + "')");
		}*/
		// FOR displayQuoteEffDate quotationEffectiveTo quotationEffectiveDate
		if(!QuoteUtil.isEmpty(qedStringInFile)) {
			Date effectiveForm = PricerUtils.getEffectiveFrom(qedStringInFile);
			Date effectiveTo = PricerUtils.getEffectiveTo(effectiveForm, bean.getValidity());
			query.setParameter("effectiveForm", effectiveForm);
			query.setParameter("effectiveTo", effectiveTo);
		}
		List<SalesCostPricer> list = query.getResultList();
		if(list.isEmpty()) {
			return null;
		}
		//Log
		return (SalesCostPricer)list.get(0);			
	}
	//TODO
	public List<Pricer> getAllOverLapSCPricers(Material material, PricerUploadTemplateBean bean) {
		if(material == null ||bean == null ){
			return null;
		}
		StringBuilder sql = new StringBuilder();
		sql.append(" SELECT p FROM SalesCostPricer p WHERE p.material = :material ");//AND p.pricerType =:pricerType 
		sql.append(" AND p.bizUnitBean.name = :bizUnit ");
		sql.append(" AND  ");
		
		String sqlSalesTypeParam = null;
		if(SalesCostType.ZBMD.toString().equals(bean.getSalesCostType()) 
				|| SalesCostType.ZBMP.toString().equals(bean.getSalesCostType())) {
			sqlSalesTypeParam = " (p.salesCostType =:ZBMD  or  p.salesCostType =:ZBMP) " ;
		} else if (SalesCostType.ZINM.toString().equals(bean.getSalesCostType())) {
			sqlSalesTypeParam = " p.salesCostType =:ZINM ";
		}
		
		sql.append(sqlSalesTypeParam);
		
		String qedStringInFile = bean.getQuotationEffectiveDate();
		Date effectiveForm = PricerUtils.getEffectiveFrom(qedStringInFile);
		Date effectiveTo = PricerUtils.getEffectiveTo(effectiveForm, bean.getValidity());
		//displayQuoteEffDate quotationEffectiveTo quotationEffectiveDate
		/**
		 * qedStringInFile not empty
		 * overlap in [quotationEffectiveDate,quotationEffectiveTo]
		 **/
		if(!QuoteUtil.isEmpty(qedStringInFile)) {
			sql.append(" AND (p.quotationEffectiveDate <=:effectiveTo AND p.quotationEffectiveTo >=:effectiveForm) ");
		}else {
			/**
			 * qedStringInFile is empty
			 * overlap in [displayQuoteEffDate,quotationEffectiveTo]
			 **/
			sql.append(" AND (p.quotationEffectiveDate <=:effectiveTo AND p.quotationEffectiveTo >=:effectiveForm) ");
		}
			
		Query query = em.createQuery(sql.toString());
		query.setParameter("material", material);
		//query.setParameter("pricerType", PRICER_TYPE.SALESCOST.getName());
		query.setParameter("bizUnit", bean.getRegion());
		// FOR PARAMETER :salesCostType
		
		if(SalesCostType.ZBMD.toString().equals(bean.getSalesCostType()) 
				|| SalesCostType.ZBMP.toString().equals(bean.getSalesCostType())) {
			query.setParameter("ZBMD", SalesCostType.ZBMD);
			query.setParameter("ZBMP", SalesCostType.ZBMP);
		}else if (SalesCostType.ZINM.toString().equals(bean.getSalesCostType())) {
			query.setParameter("ZINM", SalesCostType.ZINM);
		}
		query.setParameter("effectiveForm", effectiveForm);
		query.setParameter("effectiveTo", effectiveTo);
		return query.getResultList();
	}
	
	
	@Override
	public void insertUploadOperater(List<PricerUploadTemplateBean> items, String materialTypeStr,User user, List<Manufacturer> manufacturerLst, int[] countArr, PricerUploadParametersBean puBean)  {
		long start = System.currentTimeMillis();
		//need some   persist  obj to fill .
		initPricerUploadParametersBean(items, user, manufacturerLst, puBean);
		for (PricerUploadTemplateBean bean : items) {
			if (QED_CHECK_STATE.INSERT.getName().equals(bean.getQedCheckState())) {
				//need TO TRY TO get pricer again from DB.
				bean.setPricer(this.getSCPricerByComponentKey(bean.getMaterial(), bean));
				if(bean.getPricer() !=null) {
					bean.setQedCheckState(QED_CHECK_STATE.UPDATE.getName());
				}else {
					try {
						bean.setPricer(new SalesCostPricer());
						SalesCostPricer pricer = PricerUtils.convert((SalesCostPricer)bean.getPricer(), bean, user, puBean);
						em.persist(pricer);
						insertQuantityBreakPrice(pricer);
						em.flush();
						
						countArr[10]++;// addedNormalCount++;
					} catch (Exception e) {
						LOG.log(Level.SEVERE, "insertSCPricer error : " + materialTypeStr
								+ " :: user Id and name " + user.getId() + " & " + user.getName() + e.getMessage(), e);
					}
				}
			}
			//
			if (QED_CHECK_STATE.UPDATE.getName().equals(bean.getQedCheckState())) {
				try {
					removeQuantityBreakPrice(bean);
					SalesCostPricer pricer = PricerUtils.convert((SalesCostPricer)bean.getPricer(), bean, user, puBean);
					insertQuantityBreakPrice(pricer);
					em.merge(pricer);
					countArr[11]++; // updatedNormalCount++;
				} catch (Exception e) {
					LOG.log(Level.SEVERE, "updateSCPricer error : " + materialTypeStr
							+ " :: user Id and name " + user.getId() + " & " + user.getName() + e.getMessage(), e);
				}
			} 
		}
		long end = System.currentTimeMillis();
		LOG.info("insertUploadOperater-SalesCost,takes " + (end - start) + " ms  processed line:"+items.get(items.size()-1).getLineSeq());
	}
	
	private void removeQuantityBreakPrice(PricerUploadTemplateBean pricr){
		long materialDetailId = pricr.getPricer().getId();
		//TODO a.materialDetail.id
		Query query = em.createQuery("delete FROM QuantityBreakPrice a where a.materialDetail.id = :matDtlId");
		query.setParameter("matDtlId", materialDetailId);
		int rowCount = query.executeUpdate();
		//LOG.info("delete QuantityBreakPrice size :"+ rowCount);
	}
	private void insertQuantityBreakPrice(SalesCostPricer pricer){
		for (QuantityBreakPrice abp : pricer.getQuantityBreakPrices()) {
			abp.setMaterialDetail(pricer);
			em.persist(abp);
		}
	}
	
	@Override
	public void removeOnlyPricerOperater(List<PricerUploadTemplateBean> items, String pricerType, User user,  int[] countArr) {
		 this.removeOnlyMaterialDetail(items, user,countArr,pricerType);		
	}
		

	private void removeOnlyMaterialDetail( List<PricerUploadTemplateBean> beans, User user,int[] countArr,String pricerType) {
		StringBuffer sb = new StringBuffer("(");
		for(PricerUploadTemplateBean bean:beans){
			sb.append(bean.getPricer().getId()).append(",");
		}
		sb.deleteCharAt(sb.length()-1);
		sb.append(")");
		String deleteQuantityBreakPrice = "DELETE FROM QuantityBreakPrice e WHERE e.materialDetail.id in " +sb.toString();
		Query deleteQbpQuery = em.createQuery(deleteQuantityBreakPrice);
		deleteQbpQuery.executeUpdate();
		String hql = "DELETE FROM Pricer e WHERE e.id in " +sb.toString();
		Query query = em.createQuery(hql);
		int rowCount = query.executeUpdate();
		countArr[4] = countArr[4]+rowCount;
		LOG.info("remove only pricer - salesCost count :"+ countArr[4]);

	}
}
