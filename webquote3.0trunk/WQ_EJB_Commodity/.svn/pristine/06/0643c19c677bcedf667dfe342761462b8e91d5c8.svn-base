package com.avnet.emasia.webquote.commodity.util;

import java.sql.Timestamp;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.ResourceBundle;
import java.util.logging.Logger;

import javax.persistence.EntityManager;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Expression;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import com.avnet.emasia.webquote.commodity.bean.PricerUploadTemplateBean;
import com.avnet.emasia.webquote.commodity.bean.VerifyEffectiveDateResult;
import com.avnet.emasia.webquote.commodity.dto.PISearchBean;
import com.avnet.emasia.webquote.entity.BizUnit;
import com.avnet.emasia.webquote.entity.CostIndicator;
import com.avnet.emasia.webquote.entity.DataAccess;
import com.avnet.emasia.webquote.entity.Manufacturer;
import com.avnet.emasia.webquote.entity.Material;
import com.avnet.emasia.webquote.entity.NormalPricer;
import com.avnet.emasia.webquote.entity.ProductGroup;
import com.avnet.emasia.webquote.entity.ProgramPricer;
import com.avnet.emasia.webquote.entity.ProgramType;
import com.avnet.emasia.webquote.entity.QuantityBreakPrice;
import com.avnet.emasia.webquote.masterData.util.DateUtils;
import com.avnet.emasia.webquote.utilities.DBResourceBundle;
import com.avnet.emasia.webquote.utilities.util.QuoteUtil;

/**
 * @author punit.singh
 * This Class having common code logic
 */
public class CommodityUtil {

	private static Logger logger = Logger.getLogger(CommodityUtil.class.getName());

	private final static String FIELD_NAME_PROGRAM_TYPE = "programType";

	private final static String LIKE_SIGN = "%";

	private final static String FIELD_NAME_MANUFACTURER = "manufacturer";
	private final static String FIELD_NAME_FULL_MFR_PART_NUMBER = "fullMfrPartNumber";
	private final static String FIELD_NAME_MATERIAL = "material";
	private final static String FIELD_NAME_BIZ_UNIT_BEAN = "bizUnitBean";
	private final static String FIELD_NAME_NAME = "name";
	private final static String FIELD_NAME_PRODUCT_GROUP_2 = "productGroup2";
	//private final static String FIELD_NAME_MATERIAL_CATEGORY = "materialCategory";
	private final static String FIELD_NAME_PROGRAM_EFFECTIVE_DATE = "programEffectiveDate";
	private final static String FIELD_NAME_PROGRAM_CLOSING_DATE = "programClosingDate";
	private final static String FIELD_NAME_PROGRAM_SPECIAL_ITEM_FLAG = "programSpecialItemFlag";

	private final static String FIELD_NAME_LAST_UPDATE_ON = "lastUpdatedOn";
	private final static String FIELD_NAME_DISPLAY_ON_TOP = "displayOnTop";

	private final static String FIELD_NAME_PROGRAM_AVAILABLE_TO_SELL_QTY = "programAvailableToSellQty";

	private final static String SORTED_ORDER_DESCENDING = "DESCENDING";

	private final static String SORTED_FIELD_QTY = "programAvailableToSellQty";
	private final static String SORTED_FIELD_PROGRAM_TYPE = "programType.name";
	private final static String SORTED_FIELD_PRO_GROUP2 = "material.productGroup2.name";
	private final static String SORTED_FIELD_PART_NUMBER = "fullMfrPartNumber";
	private final static String SORTED_FIELD_MFR = "material.manufacturer.name";

	private final static String SORTED_FIELD_M_MFR = "mfr";
	private final static String SORTED_FIELD_M_FULL_MFR_PART = "fullMFRPart";
	private final static String SORTED_FIELD_M_PRODUCE_GROUP = "productGroup";
	private final static String SORTED_FIELD_M_PROGRAM = "program";
	private final static String SORTED_FIELD_M_DISPLAY_ON_TOP = "displayOnTop";
	private final static String SORTED_FIELD_M_SPECIAL_ITEM_INDICATOR = "specialItemIndicator";
	private final static String SORTED_FIELD_M_MINIMUM_COST = "minimumCost";
	private final static String SORTED_FIELD_M_AVAILABLE_TO_SELL_QTY = "availableToSellQuantity";
	private final static String SORTED_FIELD_M_CALL_FOR_QUOTE = "callForQuote";
	private final static String SORTED_FIELD_M_MPQ = "mpq";
	private final static String SORTED_FIELD_M_MOQ = "moq";
	private final static String SORTED_FIELD_M_MOV = "mov";
	private final static String SORTED_FIELD_M_COST_INDICATOR = "costIndicator";
	private final static String SORTED_FIELD_M_PROG_EFFECT_DATE = "programEffectiveDate";
	private final static String SORTED_FIELD_M_PROG_CLOSING_DATE = "programClosingDate";
	private final static String SORTED_FIELD_M_VALIDITY = "validity";
	private final static String SORTED_FIELD_M_SHIPMENT_VALIDITY = "shipmentValidity";
	private final static String SORTED_FIELD_M_LEADTIME = "leadTime";
	private final static String SORTED_FIELD_M_QUANT_INDICATOR = "quantityIndicator";
	private final static String SORTED_FIELD_M_NEW_ITEM_INDICATOR = "newItemIndicator";
	private final static String SORTED_FIELD_M_ALLOCATION_FLAG = "allocationFlag";
	private final static String SORTED_FIELD_M_RESALE_INDICATOR = "resaleIndicator";
	private final static String SORTED_FIELD_M_TERM_AND_CONDITIONS = "termsandConditions";
	private final static String SORTED_FIELD_M_AVNET_QUOTE_CENTER_COMMENTS = "avnetQuoteCentreComments";
	private final static String SORTED_FIELD_M_CREATED_ON = "createdOn";
	private final static String SORTED_FIELD_M_CREATED_BY = "createdBy";
	private final static String SORTED_FIELD_M_LAST_UPDATE_BY = "lastUpdateBy";

	/**
	 * @param pisb
	 * @param cb
	 * @param cq
	 * @return
	 */
	public static CriteriaQuery<ProgramPricer> programMaterialCriteriaQuery(final PISearchBean pisb, final CriteriaBuilder cb, final CriteriaQuery<ProgramPricer> cq) {
		

		Root<ProgramPricer> programMaterial = cq.from(ProgramPricer.class);
		List<Predicate> predicates = new ArrayList<Predicate>();

		Expression<String> fullMfrPartNumber = programMaterial.<Material>get(FIELD_NAME_MATERIAL)
				.get(FIELD_NAME_FULL_MFR_PART_NUMBER);
		Expression<String> mfrName = programMaterial.<Material>get(FIELD_NAME_MATERIAL)
				.<Manufacturer>get(FIELD_NAME_MANUFACTURER).get(FIELD_NAME_NAME);
		Expression<String> productGroupName = programMaterial.<Material>get(FIELD_NAME_MATERIAL)
				.<ProductGroup>get(FIELD_NAME_PRODUCT_GROUP_2).get(FIELD_NAME_NAME);
		Expression<String> programTypeName = programMaterial.<ProgramType>get(FIELD_NAME_PROGRAM_TYPE)
				.get(FIELD_NAME_NAME);
		Expression<String> bizUnit = programMaterial.<BizUnit>get(FIELD_NAME_BIZ_UNIT_BEAN).get(FIELD_NAME_NAME);

		Expression<Manufacturer> mfr = programMaterial.<Material>get(FIELD_NAME_MATERIAL)
				.<Manufacturer>get(FIELD_NAME_MANUFACTURER);
		Expression<ProductGroup> productGroup = programMaterial.<Material>get(FIELD_NAME_MATERIAL)
				.<ProductGroup>get(FIELD_NAME_PRODUCT_GROUP_2);
		Expression<ProgramType> programType = programMaterial.<ProgramType>get(FIELD_NAME_PROGRAM_TYPE);
		Expression<Integer> programAvailableSellQty = programMaterial
				.<Integer>get(FIELD_NAME_PROGRAM_AVAILABLE_TO_SELL_QTY);

		Expression<Integer> mpq = programMaterial.<Integer>get(SORTED_FIELD_M_MPQ);
		Expression<Integer> moq = programMaterial.<Integer>get(SORTED_FIELD_M_MOQ);
		Expression<Integer> mov = programMaterial.<Integer>get(SORTED_FIELD_M_MOV);

		Expression<Integer> specialItemIndicator = programMaterial.<Integer>get("programSpecialItemFlag");
		Expression<Boolean> allocationFlag = programMaterial.<Boolean>get(SORTED_FIELD_M_ALLOCATION_FLAG);
		Expression<Date> createdOn = programMaterial.<Date>get(SORTED_FIELD_M_CREATED_ON);
		Expression<Boolean> newItemIndicator = programMaterial.<Boolean>get("newProgramMaterialIndicator");
		Expression<String> leadTime = programMaterial.<String>get(SORTED_FIELD_M_LEADTIME);
		Expression<Integer> qtyIndicator = programMaterial.<Integer>get("qtyIndicator");
		Expression<String> validity = programMaterial.<String>get("priceValidity");
		Expression<Date> shipmentValidity = programMaterial.<Date>get(SORTED_FIELD_M_SHIPMENT_VALIDITY);
		Expression<Date> effectDate = programMaterial.<Date>get(SORTED_FIELD_M_PROG_EFFECT_DATE);
		Expression<Date> closingDate = programMaterial.<Date>get(SORTED_FIELD_M_PROG_CLOSING_DATE);
		Expression<Boolean> callForQuote = programMaterial.<Boolean>get("programCallForQuote");
		Expression<String> resaleIndicator = programMaterial.<String>get(SORTED_FIELD_M_RESALE_INDICATOR);
		Expression<String> termsAndCondition = programMaterial.<String>get("termsAndConditions");
		Expression<Double> miniCost = programMaterial.<Double>get("programMinimumCost");
		Expression<String> avnetQuoteCenterComments = programMaterial.<String>get("avnetQcComments");
		Expression<String> costIndicator = programMaterial.<CostIndicator>get(SORTED_FIELD_M_COST_INDICATOR)
				.get("name");
		Expression<String> createdBy = programMaterial.<String>get(SORTED_FIELD_M_CREATED_BY);
		Expression<String> updatedBy = programMaterial.<String>get("lastUpdatedBy");

		if (pisb.getBizUnit() != null)
			predicates.add(cb.equal(bizUnit, pisb.getBizUnit()));

		if (pisb.getMfrPart() != null && !pisb.getMfrPart().isEmpty())
			if (pisb.getExact() == null) {
				predicates.add(
						cb.like(cb.upper(fullMfrPartNumber), LIKE_SIGN + pisb.getMfrPart().toUpperCase() + LIKE_SIGN));
			} else {
				predicates.add(cb.equal(fullMfrPartNumber, pisb.getMfrPart()));
			}

		if (pisb.getMfr() != null) {
			predicates.add(cb.like(cb.upper(mfrName), LIKE_SIGN + pisb.getMfr().toUpperCase() + LIKE_SIGN));
		}

		// Added by Punit for CPD Exercise
		predicates = preparePISearchBean(pisb, predicates, mfr, cb, programType, programTypeName, productGroupName,
				productGroup, mfrName);
		

		if (pisb.getActive() != null && !pisb.getActive().isEmpty()) {
			predicates.add(cb.lessThanOrEqualTo(programMaterial.<Date>get(FIELD_NAME_PROGRAM_EFFECTIVE_DATE),
					DateUtils.getCurrentAsiaDateObj()));
			predicates.add(cb.greaterThanOrEqualTo(programMaterial.<Date>get(FIELD_NAME_PROGRAM_CLOSING_DATE),
					DateUtils.getCurrentAsiaDateObj()));
		}
		// Common code
		predicates = securityCheckPISearchBean(pisb, cb, programMaterial, predicates);
		
		cq.select(programMaterial);
		cq.where(predicates.toArray(new Predicate[] {}));
		if (pisb.getSortField() != null) {
			if (SORTED_ORDER_DESCENDING.equalsIgnoreCase(pisb.getSortOrder())) {
				if (SORTED_FIELD_QTY.equalsIgnoreCase(pisb.getSortField())) {
					cq.orderBy(cb.desc(programAvailableSellQty));
				} else if (SORTED_FIELD_PROGRAM_TYPE.equalsIgnoreCase(pisb.getSortField())) {
					cq.orderBy(cb.desc(programTypeName));
				} else if (SORTED_FIELD_PRO_GROUP2.equalsIgnoreCase(pisb.getSortField())) {
					cq.orderBy(cb.desc(productGroupName));
				} else if (SORTED_FIELD_PART_NUMBER.equalsIgnoreCase(pisb.getSortField())) {
					cq.orderBy(cb.desc(fullMfrPartNumber));
				} else if (SORTED_FIELD_MFR.equalsIgnoreCase(pisb.getSortField())) {
					cq.orderBy(cb.desc(mfrName));
				} else if (SORTED_FIELD_M_MFR.equalsIgnoreCase(pisb.getSortField())) {
					cq.orderBy(cb.desc(mfrName));
				} else if (SORTED_FIELD_M_FULL_MFR_PART.equalsIgnoreCase(pisb.getSortField())) {
					cq.orderBy(cb.desc(fullMfrPartNumber));
				} else if (SORTED_FIELD_M_PRODUCE_GROUP.equalsIgnoreCase(pisb.getSortField())) {
					cq.orderBy(cb.desc(productGroupName));
				} else if (SORTED_FIELD_M_PROGRAM.equalsIgnoreCase(pisb.getSortField())) {
					cq.orderBy(cb.desc(programTypeName));
				} else if (SORTED_FIELD_M_DISPLAY_ON_TOP.equalsIgnoreCase(pisb.getSortField())) {
					cq.orderBy(
							cb.desc(programMaterial.<Material>get(FIELD_NAME_MATERIAL).get(FIELD_NAME_DISPLAY_ON_TOP)));
				} else if (SORTED_FIELD_M_SPECIAL_ITEM_INDICATOR.equalsIgnoreCase(pisb.getSortField())) {
					cq.orderBy(cb.desc(specialItemIndicator));
				} else if (SORTED_FIELD_M_MINIMUM_COST.equalsIgnoreCase(pisb.getSortField())) {
					cq.orderBy(cb.desc(miniCost));
				} else if (SORTED_FIELD_M_AVAILABLE_TO_SELL_QTY.equalsIgnoreCase(pisb.getSortField())) {
					cq.orderBy(cb.desc(programAvailableSellQty));
				} else if (SORTED_FIELD_M_CALL_FOR_QUOTE.equalsIgnoreCase(pisb.getSortField())) {
					cq.orderBy(cb.desc(callForQuote));
				} else if (SORTED_FIELD_M_MPQ.equalsIgnoreCase(pisb.getSortField())) {
					cq.orderBy(cb.desc(mpq));
				} else if (SORTED_FIELD_M_MOQ.equalsIgnoreCase(pisb.getSortField())) {
					cq.orderBy(cb.desc(moq));
				} else if (SORTED_FIELD_M_MOV.equalsIgnoreCase(pisb.getSortField())) {
					cq.orderBy(cb.desc(mov));
				} else if (SORTED_FIELD_M_COST_INDICATOR.equalsIgnoreCase(pisb.getSortField())) {
					cq.orderBy(cb.desc(costIndicator));
				} else if (SORTED_FIELD_M_PROG_EFFECT_DATE.equalsIgnoreCase(pisb.getSortField())) {
					cq.orderBy(cb.desc(effectDate));
				} else if (SORTED_FIELD_M_PROG_CLOSING_DATE.equalsIgnoreCase(pisb.getSortField())) {
					cq.orderBy(cb.desc(closingDate));
				} else if (SORTED_FIELD_M_VALIDITY.equalsIgnoreCase(pisb.getSortField())) {
					cq.orderBy(cb.desc(validity));
				} else if (SORTED_FIELD_M_SHIPMENT_VALIDITY.equalsIgnoreCase(pisb.getSortField())) {
					cq.orderBy(cb.desc(shipmentValidity));
				} else if (SORTED_FIELD_M_LEADTIME.equalsIgnoreCase(pisb.getSortField())) {
					cq.orderBy(cb.desc(leadTime));
				} else if (SORTED_FIELD_M_QUANT_INDICATOR.equalsIgnoreCase(pisb.getSortField())) {
					cq.orderBy(cb.desc(qtyIndicator));
				} else if (SORTED_FIELD_M_NEW_ITEM_INDICATOR.equalsIgnoreCase(pisb.getSortField())) {
					cq.orderBy(cb.desc(newItemIndicator));
				} else if (SORTED_FIELD_M_ALLOCATION_FLAG.equalsIgnoreCase(pisb.getSortField())) {
					cq.orderBy(cb.desc(allocationFlag));
				} else if (SORTED_FIELD_M_RESALE_INDICATOR.equalsIgnoreCase(pisb.getSortField())) {
					cq.orderBy(cb.desc(resaleIndicator));
				} else if (SORTED_FIELD_M_TERM_AND_CONDITIONS.equalsIgnoreCase(pisb.getSortField())) {
					cq.orderBy(cb.desc(termsAndCondition));
				} else if (SORTED_FIELD_M_AVNET_QUOTE_CENTER_COMMENTS.equalsIgnoreCase(pisb.getSortField())) {
					cq.orderBy(cb.desc(avnetQuoteCenterComments));
				} else if (SORTED_FIELD_M_CREATED_ON.equalsIgnoreCase(pisb.getSortField())) {
					cq.orderBy(cb.desc(createdOn));
				} else if (SORTED_FIELD_M_CREATED_BY.equalsIgnoreCase(pisb.getSortField())) {
					cq.orderBy(cb.desc(createdBy));
				} else if (SORTED_FIELD_M_LAST_UPDATE_BY.equalsIgnoreCase(pisb.getSortField())) {
					cq.orderBy(cb.desc(updatedBy));
				}

			} else {
				if (SORTED_FIELD_QTY.equalsIgnoreCase(pisb.getSortField())) {
					cq.orderBy(cb.asc(programAvailableSellQty));
				} else if (SORTED_FIELD_PROGRAM_TYPE.equalsIgnoreCase(pisb.getSortField())) {
					cq.orderBy(cb.asc(programTypeName));
				} else if (SORTED_FIELD_PRO_GROUP2.equalsIgnoreCase(pisb.getSortField())) {
					cq.orderBy(cb.asc(productGroupName));
				} else if (SORTED_FIELD_PART_NUMBER.equalsIgnoreCase(pisb.getSortField())) {
					cq.orderBy(cb.asc(fullMfrPartNumber));
				} else if (SORTED_FIELD_MFR.equalsIgnoreCase(pisb.getSortField())) {
					cq.orderBy(cb.asc(mfrName));
				} else if (SORTED_FIELD_M_MFR.equalsIgnoreCase(pisb.getSortField())) {
					cq.orderBy(cb.asc(mfrName));
				} else if (SORTED_FIELD_M_FULL_MFR_PART.equalsIgnoreCase(pisb.getSortField())) {
					cq.orderBy(cb.asc(fullMfrPartNumber));
				} else if (SORTED_FIELD_M_PRODUCE_GROUP.equalsIgnoreCase(pisb.getSortField())) {
					cq.orderBy(cb.asc(productGroupName));
				} else if (SORTED_FIELD_M_PROGRAM.equalsIgnoreCase(pisb.getSortField())) {
					cq.orderBy(cb.asc(programTypeName));
				} else if (SORTED_FIELD_M_DISPLAY_ON_TOP.equalsIgnoreCase(pisb.getSortField())) {
					cq.orderBy(
							cb.asc(programMaterial.<Material>get(FIELD_NAME_MATERIAL).get(FIELD_NAME_DISPLAY_ON_TOP)));
				} else if (SORTED_FIELD_M_SPECIAL_ITEM_INDICATOR.equalsIgnoreCase(pisb.getSortField())) {
					cq.orderBy(cb.asc(specialItemIndicator));
				} else if (SORTED_FIELD_M_MINIMUM_COST.equalsIgnoreCase(pisb.getSortField())) {
					cq.orderBy(cb.asc(miniCost));
				} else if (SORTED_FIELD_M_AVAILABLE_TO_SELL_QTY.equalsIgnoreCase(pisb.getSortField())) {
					cq.orderBy(cb.asc(programAvailableSellQty));
				} else if (SORTED_FIELD_M_CALL_FOR_QUOTE.equalsIgnoreCase(pisb.getSortField())) {
					cq.orderBy(cb.asc(callForQuote));
				} else if (SORTED_FIELD_M_MPQ.equalsIgnoreCase(pisb.getSortField())) {
					cq.orderBy(cb.asc(mpq));
				} else if (SORTED_FIELD_M_MOQ.equalsIgnoreCase(pisb.getSortField())) {
					cq.orderBy(cb.asc(moq));
				} else if (SORTED_FIELD_M_MOV.equalsIgnoreCase(pisb.getSortField())) {
					cq.orderBy(cb.asc(mov));
				} else if (SORTED_FIELD_M_COST_INDICATOR.equalsIgnoreCase(pisb.getSortField())) {
					cq.orderBy(cb.asc(costIndicator));
				} else if (SORTED_FIELD_M_PROG_EFFECT_DATE.equalsIgnoreCase(pisb.getSortField())) {
					cq.orderBy(cb.asc(effectDate));
				} else if (SORTED_FIELD_M_PROG_CLOSING_DATE.equalsIgnoreCase(pisb.getSortField())) {
					cq.orderBy(cb.asc(closingDate));
				} else if (SORTED_FIELD_M_VALIDITY.equalsIgnoreCase(pisb.getSortField())) {
					cq.orderBy(cb.asc(validity));
				} else if (SORTED_FIELD_M_SHIPMENT_VALIDITY.equalsIgnoreCase(pisb.getSortField())) {
					cq.orderBy(cb.asc(shipmentValidity));
				} else if (SORTED_FIELD_M_LEADTIME.equalsIgnoreCase(pisb.getSortField())) {
					cq.orderBy(cb.asc(leadTime));
				} else if (SORTED_FIELD_M_QUANT_INDICATOR.equalsIgnoreCase(pisb.getSortField())) {
					cq.orderBy(cb.asc(qtyIndicator));
				} else if (SORTED_FIELD_M_NEW_ITEM_INDICATOR.equalsIgnoreCase(pisb.getSortField())) {
					cq.orderBy(cb.asc(newItemIndicator));
				} else if (SORTED_FIELD_M_ALLOCATION_FLAG.equalsIgnoreCase(pisb.getSortField())) {
					cq.orderBy(cb.asc(allocationFlag));
				} else if (SORTED_FIELD_M_RESALE_INDICATOR.equalsIgnoreCase(pisb.getSortField())) {
					cq.orderBy(cb.asc(resaleIndicator));
				} else if (SORTED_FIELD_M_TERM_AND_CONDITIONS.equalsIgnoreCase(pisb.getSortField())) {
					cq.orderBy(cb.asc(termsAndCondition));
				} else if (SORTED_FIELD_M_AVNET_QUOTE_CENTER_COMMENTS.equalsIgnoreCase(pisb.getSortField())) {
					cq.orderBy(cb.asc(avnetQuoteCenterComments));
				} else if (SORTED_FIELD_M_CREATED_ON.equalsIgnoreCase(pisb.getSortField())) {
					cq.orderBy(cb.asc(createdOn));
				} else if (SORTED_FIELD_M_CREATED_BY.equalsIgnoreCase(pisb.getSortField())) {
					cq.orderBy(cb.asc(createdBy));
				} else if (SORTED_FIELD_M_LAST_UPDATE_BY.equalsIgnoreCase(pisb.getSortField())) {
					cq.orderBy(cb.asc(updatedBy));
				}
			}

		} else {
			cq.orderBy(
					cb.asc(cb.selectCase()
							.when(cb.isNull(
									programMaterial.<Material>get(FIELD_NAME_MATERIAL).get(FIELD_NAME_DISPLAY_ON_TOP)),
									999999)
							.otherwise(
									programMaterial.<Material>get(FIELD_NAME_MATERIAL).get(FIELD_NAME_DISPLAY_ON_TOP))),
					cb.asc(cb.selectCase()
							.when(cb.isNull(programMaterial.get(FIELD_NAME_PROGRAM_SPECIAL_ITEM_FLAG)), 999999)
							.otherwise(programMaterial.get(FIELD_NAME_PROGRAM_SPECIAL_ITEM_FLAG))),
					cb.desc(programMaterial.get(FIELD_NAME_LAST_UPDATE_ON)), cb.asc(mfrName),
					cb.asc(fullMfrPartNumber));
		}

		return cq;

	}
	
	
	public static ProgramPricer updatePPMDQuantityBreakPriceList(final ProgramPricer mDetail, final PricerUploadTemplateBean pricr, final EntityManager em){
		
		try {
			List<QuantityBreakPrice> qpLst = new ArrayList<QuantityBreakPrice>();
			if ((pricr.getQuantityBreak1() != null) && (!pricr.getQuantityBreak1().equals(""))
					&& (pricr.getQuantityBreakPrice1() != null) && (!pricr.getQuantityBreakPrice1().equals(""))) {
				QuantityBreakPrice qp = new QuantityBreakPrice();
				qp.setQuantityBreak(Integer.parseInt(pricr.getQuantityBreak1()));
				qp.setQuantityBreakPrice(Double.parseDouble(pricr.getQuantityBreakPrice1()));
				qp.setMaterialDetail(mDetail);
				em.persist(qp);
				qpLst.add(qp);
			}

			if ((pricr.getQuantityBreak2() != null) && (!pricr.getQuantityBreak2().equals(""))) {
				QuantityBreakPrice qp = new QuantityBreakPrice();
				qp.setQuantityBreak(Integer.parseInt(pricr.getQuantityBreak2()));
				if ((pricr.getQuantityBreakPrice2() != null) && (!pricr.getQuantityBreakPrice2().equals(""))) {
					qp.setQuantityBreakPrice(Double.parseDouble(pricr.getQuantityBreakPrice2()));
				} else {
					qp.setQuantityBreakPrice(null);
				}

				qp.setMaterialDetail(mDetail);
				em.persist(qp);
				qpLst.add(qp);
			}

			if ((pricr.getQuantityBreak3() != null) && (!pricr.getQuantityBreak3().equals(""))) {
				QuantityBreakPrice qp = new QuantityBreakPrice();
				qp.setQuantityBreak(Integer.parseInt(pricr.getQuantityBreak3()));
				if ((pricr.getQuantityBreakPrice3() != null) && (!pricr.getQuantityBreakPrice3().equals(""))) {
					qp.setQuantityBreakPrice(Double.parseDouble(pricr.getQuantityBreakPrice3()));
				} else {
					qp.setQuantityBreakPrice(null);
				}
				qp.setMaterialDetail(mDetail);
				em.persist(qp);
				qpLst.add(qp);
			}

			if ((pricr.getQuantityBreak4() != null) && (!pricr.getQuantityBreak4().equals(""))) {
				QuantityBreakPrice qp = new QuantityBreakPrice();
				qp.setQuantityBreak(Integer.parseInt(pricr.getQuantityBreak4()));
				if ((pricr.getQuantityBreakPrice4() != null) && (!pricr.getQuantityBreakPrice4().equals(""))) {
					qp.setQuantityBreakPrice(Double.parseDouble(pricr.getQuantityBreakPrice4()));
				} else {
					qp.setQuantityBreakPrice(null);
				}
				qp.setMaterialDetail(mDetail);
				em.persist(qp);
				qpLst.add(qp);
			}

			if ((pricr.getQuantityBreak5() != null) && (!pricr.getQuantityBreak5().equals(""))) {
				QuantityBreakPrice qp = new QuantityBreakPrice();
				qp.setQuantityBreak(Integer.parseInt(pricr.getQuantityBreak5()));
				if ((pricr.getQuantityBreakPrice5() != null) && (!pricr.getQuantityBreakPrice5().equals(""))) {
					qp.setQuantityBreakPrice(Double.parseDouble(pricr.getQuantityBreakPrice5()));
				} else {
					qp.setQuantityBreakPrice(null);
				}
				qp.setMaterialDetail(mDetail);
				em.persist(qp);
				qpLst.add(qp);
			}

			/*if ((pricr.getQuantityBreak6() != null) && (!pricr.getQuantityBreak6().equals(""))) {
				QuantityBreakPrice qp = new QuantityBreakPrice();
				qp.setQuantityBreak(Integer.parseInt(pricr.getQuantityBreak6()));
				if ((pricr.getQuantityBreakPrice6() != null) && (!pricr.getQuantityBreakPrice6().equals(""))) {
					qp.setQuantityBreakPrice(Double.parseDouble(pricr.getQuantityBreakPrice6()));
				} else {
					qp.setQuantityBreakPrice(null);
				}
				qp.setMaterialDetail(mDetail);
				em.persist(qp);
				qpLst.add(qp);
			}

			if ((pricr.getQuantityBreak7() != null) && (!pricr.getQuantityBreak7().equals(""))
					&& (pricr.getQuantityBreakPrice7() != null) && (!pricr.getQuantityBreakPrice7().equals(""))) {
				QuantityBreakPrice qp = new QuantityBreakPrice();
				qp.setQuantityBreak(Integer.parseInt(pricr.getQuantityBreak7()));
				if ((pricr.getQuantityBreakPrice7() != null) && (!pricr.getQuantityBreakPrice7().equals(""))) {
					qp.setQuantityBreakPrice(Double.parseDouble(pricr.getQuantityBreakPrice7()));
				} else {
					qp.setQuantityBreakPrice(null);
				}
				qp.setMaterialDetail(mDetail);
				em.persist(qp);
				qpLst.add(qp);
			}

			if ((pricr.getQuantityBreak8() != null) && (!pricr.getQuantityBreak8().equals(""))) {
				QuantityBreakPrice qp = new QuantityBreakPrice();
				qp.setQuantityBreak(Integer.parseInt(pricr.getQuantityBreak8()));
				if ((pricr.getQuantityBreakPrice8() != null) && (!pricr.getQuantityBreakPrice8().equals(""))) {
					qp.setQuantityBreakPrice(Double.parseDouble(pricr.getQuantityBreakPrice8()));
				} else {
					qp.setQuantityBreakPrice(null);
				}
				qp.setMaterialDetail(mDetail);
				em.persist(qp);
				qpLst.add(qp);
			}

			if ((pricr.getQuantityBreak9() != null) && (!pricr.getQuantityBreak9().equals(""))) {
				QuantityBreakPrice qp = new QuantityBreakPrice();
				qp.setQuantityBreak(Integer.parseInt(pricr.getQuantityBreak9()));
				if ((pricr.getQuantityBreakPrice9() != null) && (!pricr.getQuantityBreakPrice9().equals(""))) {
					qp.setQuantityBreakPrice(Double.parseDouble(pricr.getQuantityBreakPrice9()));
				} else {
					qp.setQuantityBreakPrice(null);
				}
				qp.setMaterialDetail(mDetail);
				em.persist(qp);
				qpLst.add(qp);
			}

			if ((pricr.getQuantityBreak10() != null) && (!pricr.getQuantityBreak10().equals(""))) {
				QuantityBreakPrice qp = new QuantityBreakPrice();
				qp.setQuantityBreak(Integer.parseInt(pricr.getQuantityBreak10()));
				if ((pricr.getQuantityBreakPrice10() != null) && (!pricr.getQuantityBreakPrice10().equals(""))) {
					qp.setQuantityBreakPrice(Double.parseDouble(pricr.getQuantityBreakPrice10()));
				} else {
					qp.setQuantityBreakPrice(null);
				}
				qp.setMaterialDetail(mDetail);
				em.persist(qp);
				qpLst.add(qp);
			}*/
			mDetail.setQuantityBreakPrices(qpLst);
		}catch(Exception e){
			throw e;
		}
		
		return mDetail;
	}
	
	
	/**
	 * @param pricr
	 * @param mDetail
	 * @throws ParseException
	 */
	public static ProgramPricer updateProgramPricerMaterialDetailFromPUTBean(final PricerUploadTemplateBean pricr,
			final ProgramPricer mDetail) throws ParseException {

		if ((pricr.getSpecialItemIndicator() != null) && (!pricr.getSpecialItemIndicator().equals(""))) {
			mDetail.setProgramSpecialItemFlag(Integer.parseInt(pricr.getSpecialItemIndicator()));
		} else {
			mDetail.setProgramSpecialItemFlag(null);
		}

		String aq = pricr.getAQFlag();
		if ((aq != null) && (!aq.equals(""))) {
			aq = aq.trim();
			if (aq.equalsIgnoreCase("Yes")) {
				mDetail.setProgramAqFlag(true);
			} else {
				mDetail.setProgramAqFlag(false);
			}
		} else {
			mDetail.setProgramAqFlag(null);
		}

		String cfq = pricr.getCallForQuote();
		if ((cfq != null) && (!cfq.equals(""))) {
			cfq = cfq.trim();
			if (cfq.equalsIgnoreCase("Yes")) {
				mDetail.setProgramCallForQuote(true);
			} else {
				mDetail.setProgramCallForQuote(false);
			}
		} else {
			mDetail.setProgramCallForQuote(null);
		}

		if (pricr.getProgramClosingDate() != null && !pricr.getProgramClosingDate().equals("")) {
			mDetail.setProgramClosingDate(QuoteUtil.convertStringToDate(pricr.getProgramClosingDate(), "dd/MM/yyyy"));
		} else {
			mDetail.setProgramClosingDate(null);
		}

		if (pricr.getProgramEffectiveDate() != null && !pricr.getProgramEffectiveDate().equals("")) {
			mDetail.setProgramEffectiveDate(
					QuoteUtil.convertStringToDate(pricr.getProgramEffectiveDate(), "dd/MM/yyyy"));
		} else {
			mDetail.setProgramEffectiveDate(null);
		}

		if ((pricr.getAvailabletoSellQuantity() != null) && (!pricr.getAvailabletoSellQuantity().equals(""))) {
			mDetail.setProgramAvailableToSellQty(Integer.parseInt(pricr.getAvailabletoSellQuantity()));
		} else {
			mDetail.setProgramAvailableToSellQty(null);
		}
		
		return mDetail;
	}
	
	
	/**
	 * @param pisb
	 * @param cb
	 * @param programMaterial
	 * @param predicates
	 */
	public static List<Predicate> securityCheckPISearchBean(final PISearchBean pisb, final CriteriaBuilder cb, final Root<ProgramPricer> programMaterial, final List<Predicate> predicates){
		
		Expression<Manufacturer>  mfr = programMaterial.<Material>get(FIELD_NAME_MATERIAL).<Manufacturer>get(FIELD_NAME_MANUFACTURER);
	   	Expression<ProductGroup>  productGroup = programMaterial.<Material>get(FIELD_NAME_MATERIAL).<ProductGroup>get(FIELD_NAME_PRODUCT_GROUP_2);
	   	Expression<ProgramType>  programType = programMaterial.<ProgramType>get(FIELD_NAME_PROGRAM_TYPE);
	   //	Expression<String> materialType = programMaterial.<String>get(FIELD_NAME_MATERIAL_CATEGORY);
	   	Expression<String>  mfrName = programMaterial.<Material>get(FIELD_NAME_MATERIAL).<Manufacturer>get(FIELD_NAME_MANUFACTURER).get(FIELD_NAME_NAME);
		//Security check
		if(pisb.isDataAccessCheckRequired())
		{
			logger.fine("call searchProgramMaterial : security check required .");
			boolean isContainFullAccess = false;
			if(pisb.getDataAccesses()!=null && pisb.getDataAccesses().size()>0)
	        {
				logger.fine("call searchProgramMaterial : security check required | dataAccess size  "+ pisb.getDataAccesses().size());
				List<DataAccess> dataAccList = pisb.getDataAccesses();
				List<Predicate> subPredicatesWhole = new ArrayList<Predicate>();
	        	for(DataAccess da : dataAccList)
	        	{
	        		List<Predicate> subPredicates = new ArrayList<Predicate>();
	        		if(da.getManufacturer()!=null)
	        		{
	        		   subPredicates.add(cb.equal(mfr, da.getManufacturer()));
	        		}
                    if(da.getProductGroup()!=null)
                    {
                    	subPredicates.add(cb.equal(productGroup, da.getProductGroup()));
                    }
                    if(da.getProgramType()!=null)
                    {
                    	subPredicates.add(cb.equal(programType, da.getProgramType()));
                    }

                    if(subPredicates.size()==0)
                    {
                    	isContainFullAccess = true;
                    }
                    subPredicatesWhole.add(cb.and(subPredicates.toArray(new Predicate[0])));
	        	}
	        	if(!isContainFullAccess)
	        	{
	        		predicates.add(cb.or(subPredicatesWhole.toArray(new Predicate[0])));
	        	}
	        }
			else
			{
				//without any data access .
				predicates.add(cb.equal(mfrName, "NA"));
			}
			
		}
		return predicates;
	}
	
	
	
	/**
	 * @param results
	 * @param mfrLst
	 * @param nlist
	 * @param param
	 */
	public static List<VerifyEffectiveDateResult> verifyEffectiveDateResult(final List<VerifyEffectiveDateResult> results, final List<Manufacturer> mfrLst,
			final List<?> nlist, final String param) {
		Object[] obj = null;

		VerifyEffectiveDateResult result = null;
		for (int i = 0; i < nlist.size(); i++) {
			obj = (Object[]) nlist.get(i);
			result = new VerifyEffectiveDateResult();
			result.setMaterialDetailId(Long.parseLong(obj[0].toString()));
			result.setMaterialCategory((String) obj[1]);
			result.setDisplayQuoteEffDate(PricerUtils.timestampToDate((Timestamp) obj[2]));
			result.setFullMfrPartNumber((String) obj[3]);
			result.setPriceValidity((String) obj[4]);
			result.setQuotationEffectiveDate(PricerUtils.timestampToDate((Timestamp) obj[5]));
			result.setQuotationEffectiveTo(PricerUtils.timestampToDate((Timestamp) obj[6]));
			result.setBizUnit((String) obj[7]);
			result.setCostIndicator((String) obj[8]);
			result.setMaterialId(Long.parseLong(obj[9].toString()));

			for (Manufacturer mfr : mfrLst) {
				if (mfr.getId() == Long.parseLong(obj[10].toString())) {
					result.setMfr(mfr.getName());
					break;
				}
			}
			if (param != null && param.equalsIgnoreCase("contractPriceUpload")) {
				result.setSoldToCode((String) obj[11]);
			}
			if (results == null || !results.contains(result)) {
				results.add(result);
			}

		}
		
		return results;
	}
	
	
	/**
	 * @param pricr
	 * @param mDtl
	 * @param employeeId
	 * @throws ParseException
	 */
	public static NormalPricer pricerMasterEnquiryDetails(PricerUploadTemplateBean pricr, NormalPricer mDtl, String employeeId) throws ParseException {
		mDtl.setPriceListRemarks1(pricr.getPriceListRemarks());
		mDtl.setPriceListRemarks2(pricr.getPriceListRemarks2());
		mDtl.setPriceListRemarks3(pricr.getPriceListRemarks3());
		mDtl.setPriceListRemarks4(pricr.getPriceListRemarks4());
		
		if ((pricr.getMinSell()!= null) && (!pricr.getMinSell().equals(""))) {
			mDtl.setMinSellPrice(Double.parseDouble(pricr.getMinSell()));
		}else {
			mDtl.setMinSellPrice(null);
		}
	
		if (!QuoteUtil.isEmpty(pricr.getCost())) {
			mDtl.setCost(Double.parseDouble(pricr.getCost()));
		} else {
			mDtl.setCost(null);
		}

		if (!QuoteUtil.isEmpty(pricr.getBottomPrice())) {
			mDtl.setBottomPrice(Double.parseDouble(pricr.getBottomPrice()));
		} else {
			mDtl.setBottomPrice(null);
		}
		
		mDtl.setLeadTime(pricr.getLeadTime());

		if (!QuoteUtil.isEmpty(pricr.getMPQ())) {
			mDtl.setMpq(Integer.parseInt(pricr.getMPQ()));
		} else {
			mDtl.setMpq(null);
		}

		if (!QuoteUtil.isEmpty(pricr.getMOQ())) {
			mDtl.setMoq(Integer.parseInt(pricr.getMOQ()));
		} else {
			mDtl.setMoq(null);
		}

		if (!QuoteUtil.isEmpty(pricr.getMOV())) {
			mDtl.setMov(Integer.parseInt(pricr.getMOV()));
		} else {
			mDtl.setMov(null);
		}
		
		if (!QuoteUtil.isEmpty(pricr.getShipmentValidity())) {
			Date date = null;
			try {
				date = QuoteUtil.convertStringToDate(pricr.getShipmentValidity(), "dd/MM/yyyy");
			} catch (ParseException e) {
				throw e;
			}
			mDtl.setShipmentValidity(date);
		} else {
			mDtl.setShipmentValidity(null);
		}
		
		mDtl.setTermsAndConditions(pricr.getTermsAndConditions());

		mDtl.setLastUpdatedOn(new Date());
		mDtl.setLastUpdatedBy(employeeId);
		mDtl.setPriceValidity(pricr.getValidity());

		/*String aFlag = pricr.getAllocationFlag();
		if (!QuoteUtil.isEmpty(aFlag)) {
			aFlag = aFlag.trim();
			if (aFlag.equalsIgnoreCase("Yes")) {
				mDtl.setAllocationFlag(true);
			} else {
				mDtl.setAllocationFlag(false);
			}
		} else {
			mDtl.setAllocationFlag(null);
		}*/
		
		return mDtl;
	}
	
	/**
	 * @param pisb
	 * @param predicates
	 * @param mfr
	 * @param cb
	 * @param programType
	 * @param programTypeName
	 * @param productGroupName
	 * @param productGroup
	 * @param mfrName
	 */
	public static List<Predicate> preparePISearchBean(PISearchBean pisb, List<Predicate> predicates, Expression<Manufacturer> mfr,
			CriteriaBuilder cb, Expression<ProgramType> programType, Expression<String> programTypeName,
			Expression<String> productGroupName, Expression<ProductGroup> productGroup, Expression<String> mfrName) {
		if (pisb.getMfrList() != null) {
			if (pisb.getMfrList().isEmpty()) {
				predicates.add(cb.isNull(mfr));
			} else {
				predicates.add(mfrName.in(pisb.getMfrList()));
			}
		}

		if (pisb.getProductGroupList() != null) {
			if (pisb.getProductGroupList().isEmpty()) {
				predicates.add(cb.isNull(productGroup));
			} else {
				predicates.add(productGroupName.in(pisb.getProductGroupList()));
			}
		}

		if (pisb.getProgramTypeList() != null) {
			if (pisb.getProgramTypeList().isEmpty()) {
				predicates.add(cb.isNull(programType));
			} else {
				predicates.add(programTypeName.in(pisb.getProgramTypeList()));
			}
		}
		
		return predicates;
	}
	
	public static String getText(Locale locale, final String key) {
		ResourceBundle bundle = ResourceBundle.getBundle(DBResourceBundle.class.getName(),locale);
			return bundle.getString(key);
	}
	
	
}
